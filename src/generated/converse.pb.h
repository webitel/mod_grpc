// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: converse.proto
// Protobuf C++ Version: 5.29.0

#ifndef converse_2eproto_2epb_2eh
#define converse_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_converse_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_converse_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_converse_2eproto;
namespace ai_bots {
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Config_UserDataEntry_DoNotUse;
struct Config_UserDataEntry_DoNotUseDefaultTypeInternal;
extern Config_UserDataEntry_DoNotUseDefaultTypeInternal _Config_UserDataEntry_DoNotUse_default_instance_;
class ConverseRequest;
struct ConverseRequestDefaultTypeInternal;
extern ConverseRequestDefaultTypeInternal _ConverseRequest_default_instance_;
class ConverseResponse;
struct ConverseResponseDefaultTypeInternal;
extern ConverseResponseDefaultTypeInternal _ConverseResponse_default_instance_;
class ConverseResponse_VariablesEntry_DoNotUse;
struct ConverseResponse_VariablesEntry_DoNotUseDefaultTypeInternal;
extern ConverseResponse_VariablesEntry_DoNotUseDefaultTypeInternal _ConverseResponse_VariablesEntry_DoNotUse_default_instance_;
class Input;
struct InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class RecognizeRequest;
struct RecognizeRequestDefaultTypeInternal;
extern RecognizeRequestDefaultTypeInternal _RecognizeRequest_default_instance_;
class RecognizeResponse;
struct RecognizeResponseDefaultTypeInternal;
extern RecognizeResponseDefaultTypeInternal _RecognizeResponse_default_instance_;
class RecognizeResponse_VariablesEntry_DoNotUse;
struct RecognizeResponse_VariablesEntry_DoNotUseDefaultTypeInternal;
extern RecognizeResponse_VariablesEntry_DoNotUseDefaultTypeInternal _RecognizeResponse_VariablesEntry_DoNotUse_default_instance_;
}  // namespace ai_bots
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ai_bots {

// ===================================================================


// -------------------------------------------------------------------

class RecognizeResponse_VariablesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  RecognizeResponse_VariablesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RecognizeResponse_VariablesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit RecognizeResponse_VariablesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const RecognizeResponse_VariablesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const RecognizeResponse_VariablesEntry_DoNotUse*>(
        &_RecognizeResponse_VariablesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_converse_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      57, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Input final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ai_bots.Input) */ {
 public:
  inline Input() : Input(nullptr) {}
  ~Input() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Input* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Input));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Input(
      ::google::protobuf::internal::ConstantInitialized);

  inline Input(const Input& from) : Input(nullptr, from) {}
  inline Input(Input&& from) noexcept
      : Input(nullptr, std::move(from)) {}
  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Input& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kAudioData = 1,
    kTextData = 2,
    DATA_NOT_SET = 0,
  };
  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
        &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Input& a, Input& b) { a.Swap(&b); }
  inline void Swap(Input* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Input* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Input* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Input>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Input& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Input& from) { Input::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Input* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ai_bots.Input"; }

 protected:
  explicit Input(::google::protobuf::Arena* arena);
  Input(::google::protobuf::Arena* arena, const Input& from);
  Input(::google::protobuf::Arena* arena, Input&& from) noexcept
      : Input(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAudioDataFieldNumber = 1,
    kTextDataFieldNumber = 2,
  };
  // bytes audio_data = 1;
  bool has_audio_data() const;
  void clear_audio_data() ;
  const std::string& audio_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio_data(Arg_&& arg, Args_... args);
  std::string* mutable_audio_data();
  PROTOBUF_NODISCARD std::string* release_audio_data();
  void set_allocated_audio_data(std::string* value);

  private:
  const std::string& _internal_audio_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_data(
      const std::string& value);
  std::string* _internal_mutable_audio_data();

  public:
  // string text_data = 2;
  bool has_text_data() const;
  void clear_text_data() ;
  const std::string& text_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text_data(Arg_&& arg, Args_... args);
  std::string* mutable_text_data();
  PROTOBUF_NODISCARD std::string* release_text_data();
  void set_allocated_text_data(std::string* value);

  private:
  const std::string& _internal_text_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text_data(
      const std::string& value);
  std::string* _internal_mutable_text_data();

  public:
  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:ai_bots.Input)
 private:
  class _Internal;
  void set_has_audio_data();
  void set_has_text_data();
  inline bool has_data() const;
  inline void clear_has_data();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 0,
      31, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Input& from_msg);
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr audio_data_;
      ::google::protobuf::internal::ArenaStringPtr text_data_;
    } data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_converse_2eproto;
};
// -------------------------------------------------------------------

class ConverseResponse_VariablesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ConverseResponse_VariablesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConverseResponse_VariablesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ConverseResponse_VariablesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ConverseResponse_VariablesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ConverseResponse_VariablesEntry_DoNotUse*>(
        &_ConverseResponse_VariablesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_converse_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      56, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Config_UserDataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Config_UserDataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Config_UserDataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Config_UserDataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Config_UserDataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Config_UserDataEntry_DoNotUse*>(
        &_Config_UserDataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_converse_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      45, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class RecognizeResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ai_bots.RecognizeResponse) */ {
 public:
  inline RecognizeResponse() : RecognizeResponse(nullptr) {}
  ~RecognizeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RecognizeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RecognizeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RecognizeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RecognizeResponse(const RecognizeResponse& from) : RecognizeResponse(nullptr, from) {}
  inline RecognizeResponse(RecognizeResponse&& from) noexcept
      : RecognizeResponse(nullptr, std::move(from)) {}
  inline RecognizeResponse& operator=(const RecognizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognizeResponse& operator=(RecognizeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognizeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecognizeResponse* internal_default_instance() {
    return reinterpret_cast<const RecognizeResponse*>(
        &_RecognizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(RecognizeResponse& a, RecognizeResponse& b) { a.Swap(&b); }
  inline void Swap(RecognizeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognizeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognizeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RecognizeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RecognizeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RecognizeResponse& from) { RecognizeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RecognizeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ai_bots.RecognizeResponse"; }

 protected:
  explicit RecognizeResponse(::google::protobuf::Arena* arena);
  RecognizeResponse(::google::protobuf::Arena* arena, const RecognizeResponse& from);
  RecognizeResponse(::google::protobuf::Arena* arena, RecognizeResponse&& from) noexcept
      : RecognizeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVariablesFieldNumber = 3,
    kIsFinalFieldNumber = 1,
    kInterruptedFieldNumber = 2,
  };
  // map<string, string> variables = 3;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  const ::google::protobuf::Map<std::string, std::string>& variables() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_variables();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_variables() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_variables();

  public:
  // bool is_final = 1;
  void clear_is_final() ;
  bool is_final() const;
  void set_is_final(bool value);

  private:
  bool _internal_is_final() const;
  void _internal_set_is_final(bool value);

  public:
  // bool interrupted = 2;
  void clear_interrupted() ;
  bool interrupted() const;
  void set_interrupted(bool value);

  private:
  bool _internal_interrupted() const;
  void _internal_set_interrupted(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ai_bots.RecognizeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 1,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RecognizeResponse& from_msg);
    ::google::protobuf::internal::MapField<RecognizeResponse_VariablesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        variables_;
    bool is_final_;
    bool interrupted_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_converse_2eproto;
};
// -------------------------------------------------------------------

class ConverseResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ai_bots.ConverseResponse) */ {
 public:
  inline ConverseResponse() : ConverseResponse(nullptr) {}
  ~ConverseResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConverseResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConverseResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConverseResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConverseResponse(const ConverseResponse& from) : ConverseResponse(nullptr, from) {}
  inline ConverseResponse(ConverseResponse&& from) noexcept
      : ConverseResponse(nullptr, std::move(from)) {}
  inline ConverseResponse& operator=(const ConverseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConverseResponse& operator=(ConverseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConverseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConverseResponse* internal_default_instance() {
    return reinterpret_cast<const ConverseResponse*>(
        &_ConverseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(ConverseResponse& a, ConverseResponse& b) { a.Swap(&b); }
  inline void Swap(ConverseResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConverseResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConverseResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConverseResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConverseResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConverseResponse& from) { ConverseResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConverseResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ai_bots.ConverseResponse"; }

 protected:
  explicit ConverseResponse(::google::protobuf::Arena* arena);
  ConverseResponse(::google::protobuf::Arena* arena, const ConverseResponse& from);
  ConverseResponse(::google::protobuf::Arena* arena, ConverseResponse&& from) noexcept
      : ConverseResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVariablesFieldNumber = 5,
    kConversationIdFieldNumber = 1,
    kAudioDataFieldNumber = 2,
    kTextDataFieldNumber = 6,
    kStopTalkFieldNumber = 3,
    kEndConversationFieldNumber = 4,
  };
  // map<string, string> variables = 5;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  const ::google::protobuf::Map<std::string, std::string>& variables() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_variables();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_variables() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_variables();

  public:
  // string conversation_id = 1;
  void clear_conversation_id() ;
  const std::string& conversation_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conversation_id(Arg_&& arg, Args_... args);
  std::string* mutable_conversation_id();
  PROTOBUF_NODISCARD std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* value);

  private:
  const std::string& _internal_conversation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(
      const std::string& value);
  std::string* _internal_mutable_conversation_id();

  public:
  // bytes audio_data = 2;
  void clear_audio_data() ;
  const std::string& audio_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio_data(Arg_&& arg, Args_... args);
  std::string* mutable_audio_data();
  PROTOBUF_NODISCARD std::string* release_audio_data();
  void set_allocated_audio_data(std::string* value);

  private:
  const std::string& _internal_audio_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_data(
      const std::string& value);
  std::string* _internal_mutable_audio_data();

  public:
  // string text_data = 6;
  void clear_text_data() ;
  const std::string& text_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text_data(Arg_&& arg, Args_... args);
  std::string* mutable_text_data();
  PROTOBUF_NODISCARD std::string* release_text_data();
  void set_allocated_text_data(std::string* value);

  private:
  const std::string& _internal_text_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text_data(
      const std::string& value);
  std::string* _internal_mutable_text_data();

  public:
  // bool stop_talk = 3;
  void clear_stop_talk() ;
  bool stop_talk() const;
  void set_stop_talk(bool value);

  private:
  bool _internal_stop_talk() const;
  void _internal_set_stop_talk(bool value);

  public:
  // bool end_conversation = 4;
  void clear_end_conversation() ;
  bool end_conversation() const;
  void set_end_conversation(bool value);

  private:
  bool _internal_end_conversation() const;
  void _internal_set_end_conversation(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ai_bots.ConverseResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      66, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConverseResponse& from_msg);
    ::google::protobuf::internal::MapField<ConverseResponse_VariablesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        variables_;
    ::google::protobuf::internal::ArenaStringPtr conversation_id_;
    ::google::protobuf::internal::ArenaStringPtr audio_data_;
    ::google::protobuf::internal::ArenaStringPtr text_data_;
    bool stop_talk_;
    bool end_conversation_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_converse_2eproto;
};
// -------------------------------------------------------------------

class Config final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ai_bots.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  ~Config() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Config* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Config));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Config(
      ::google::protobuf::internal::ConstantInitialized);

  inline Config(const Config& from) : Config(nullptr, from) {}
  inline Config(Config&& from) noexcept
      : Config(nullptr, std::move(from)) {}
  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
        &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Config& a, Config& b) { a.Swap(&b); }
  inline void Swap(Config* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Config* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Config>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Config& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Config& from) { Config::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Config* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ai_bots.Config"; }

 protected:
  explicit Config(::google::protobuf::Arena* arena);
  Config(::google::protobuf::Arena* arena, const Config& from);
  Config(::google::protobuf::Arena* arena, Config&& from) noexcept
      : Config(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserDataFieldNumber = 3,
    kConversationIdFieldNumber = 1,
    kDialogIdFieldNumber = 2,
    kRateFieldNumber = 4,
  };
  // map<string, string> user_data = 3;
  int user_data_size() const;
  private:
  int _internal_user_data_size() const;

  public:
  void clear_user_data() ;
  const ::google::protobuf::Map<std::string, std::string>& user_data() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_user_data();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_user_data() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_user_data();

  public:
  // string conversation_id = 1;
  void clear_conversation_id() ;
  const std::string& conversation_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conversation_id(Arg_&& arg, Args_... args);
  std::string* mutable_conversation_id();
  PROTOBUF_NODISCARD std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* value);

  private:
  const std::string& _internal_conversation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(
      const std::string& value);
  std::string* _internal_mutable_conversation_id();

  public:
  // string dialog_id = 2;
  void clear_dialog_id() ;
  const std::string& dialog_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dialog_id(Arg_&& arg, Args_... args);
  std::string* mutable_dialog_id();
  PROTOBUF_NODISCARD std::string* release_dialog_id();
  void set_allocated_dialog_id(std::string* value);

  private:
  const std::string& _internal_dialog_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dialog_id(
      const std::string& value);
  std::string* _internal_mutable_dialog_id();

  public:
  // string rate = 4;
  void clear_rate() ;
  const std::string& rate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rate(Arg_&& arg, Args_... args);
  std::string* mutable_rate();
  PROTOBUF_NODISCARD std::string* release_rate();
  void set_allocated_rate(std::string* value);

  private:
  const std::string& _internal_rate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rate(
      const std::string& value);
  std::string* _internal_mutable_rate();

  public:
  // @@protoc_insertion_point(class_scope:ai_bots.Config)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      60, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Config& from_msg);
    ::google::protobuf::internal::MapField<Config_UserDataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        user_data_;
    ::google::protobuf::internal::ArenaStringPtr conversation_id_;
    ::google::protobuf::internal::ArenaStringPtr dialog_id_;
    ::google::protobuf::internal::ArenaStringPtr rate_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_converse_2eproto;
};
// -------------------------------------------------------------------

class RecognizeRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ai_bots.RecognizeRequest) */ {
 public:
  inline RecognizeRequest() : RecognizeRequest(nullptr) {}
  ~RecognizeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RecognizeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RecognizeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RecognizeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RecognizeRequest(const RecognizeRequest& from) : RecognizeRequest(nullptr, from) {}
  inline RecognizeRequest(RecognizeRequest&& from) noexcept
      : RecognizeRequest(nullptr, std::move(from)) {}
  inline RecognizeRequest& operator=(const RecognizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognizeRequest& operator=(RecognizeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecognizeRequest& default_instance() {
    return *internal_default_instance();
  }
  enum RequestTypeCase {
    kConfig = 1,
    kInput = 2,
    REQUEST_TYPE_NOT_SET = 0,
  };
  static inline const RecognizeRequest* internal_default_instance() {
    return reinterpret_cast<const RecognizeRequest*>(
        &_RecognizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(RecognizeRequest& a, RecognizeRequest& b) { a.Swap(&b); }
  inline void Swap(RecognizeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognizeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecognizeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RecognizeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RecognizeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RecognizeRequest& from) { RecognizeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RecognizeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ai_bots.RecognizeRequest"; }

 protected:
  explicit RecognizeRequest(::google::protobuf::Arena* arena);
  RecognizeRequest(::google::protobuf::Arena* arena, const RecognizeRequest& from);
  RecognizeRequest(::google::protobuf::Arena* arena, RecognizeRequest&& from) noexcept
      : RecognizeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConfigFieldNumber = 1,
    kInputFieldNumber = 2,
  };
  // .ai_bots.Config config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;

  public:
  void clear_config() ;
  const ::ai_bots::Config& config() const;
  PROTOBUF_NODISCARD ::ai_bots::Config* release_config();
  ::ai_bots::Config* mutable_config();
  void set_allocated_config(::ai_bots::Config* value);
  void unsafe_arena_set_allocated_config(::ai_bots::Config* value);
  ::ai_bots::Config* unsafe_arena_release_config();

  private:
  const ::ai_bots::Config& _internal_config() const;
  ::ai_bots::Config* _internal_mutable_config();

  public:
  // .ai_bots.Input input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;

  public:
  void clear_input() ;
  const ::ai_bots::Input& input() const;
  PROTOBUF_NODISCARD ::ai_bots::Input* release_input();
  ::ai_bots::Input* mutable_input();
  void set_allocated_input(::ai_bots::Input* value);
  void unsafe_arena_set_allocated_input(::ai_bots::Input* value);
  ::ai_bots::Input* unsafe_arena_release_input();

  private:
  const ::ai_bots::Input& _internal_input() const;
  ::ai_bots::Input* _internal_mutable_input();

  public:
  void clear_request_type();
  RequestTypeCase request_type_case() const;
  // @@protoc_insertion_point(class_scope:ai_bots.RecognizeRequest)
 private:
  class _Internal;
  void set_has_config();
  void set_has_input();
  inline bool has_request_type() const;
  inline void clear_has_request_type();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RecognizeRequest& from_msg);
    union RequestTypeUnion {
      constexpr RequestTypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::ai_bots::Config* config_;
      ::ai_bots::Input* input_;
    } request_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_converse_2eproto;
};
// -------------------------------------------------------------------

class ConverseRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ai_bots.ConverseRequest) */ {
 public:
  inline ConverseRequest() : ConverseRequest(nullptr) {}
  ~ConverseRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConverseRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConverseRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConverseRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConverseRequest(const ConverseRequest& from) : ConverseRequest(nullptr, from) {}
  inline ConverseRequest(ConverseRequest&& from) noexcept
      : ConverseRequest(nullptr, std::move(from)) {}
  inline ConverseRequest& operator=(const ConverseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConverseRequest& operator=(ConverseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConverseRequest& default_instance() {
    return *internal_default_instance();
  }
  enum RequestTypeCase {
    kConfig = 1,
    kInput = 2,
    REQUEST_TYPE_NOT_SET = 0,
  };
  static inline const ConverseRequest* internal_default_instance() {
    return reinterpret_cast<const ConverseRequest*>(
        &_ConverseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ConverseRequest& a, ConverseRequest& b) { a.Swap(&b); }
  inline void Swap(ConverseRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConverseRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConverseRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConverseRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConverseRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConverseRequest& from) { ConverseRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConverseRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ai_bots.ConverseRequest"; }

 protected:
  explicit ConverseRequest(::google::protobuf::Arena* arena);
  ConverseRequest(::google::protobuf::Arena* arena, const ConverseRequest& from);
  ConverseRequest(::google::protobuf::Arena* arena, ConverseRequest&& from) noexcept
      : ConverseRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConfigFieldNumber = 1,
    kInputFieldNumber = 2,
  };
  // .ai_bots.Config config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;

  public:
  void clear_config() ;
  const ::ai_bots::Config& config() const;
  PROTOBUF_NODISCARD ::ai_bots::Config* release_config();
  ::ai_bots::Config* mutable_config();
  void set_allocated_config(::ai_bots::Config* value);
  void unsafe_arena_set_allocated_config(::ai_bots::Config* value);
  ::ai_bots::Config* unsafe_arena_release_config();

  private:
  const ::ai_bots::Config& _internal_config() const;
  ::ai_bots::Config* _internal_mutable_config();

  public:
  // .ai_bots.Input input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;

  public:
  void clear_input() ;
  const ::ai_bots::Input& input() const;
  PROTOBUF_NODISCARD ::ai_bots::Input* release_input();
  ::ai_bots::Input* mutable_input();
  void set_allocated_input(::ai_bots::Input* value);
  void unsafe_arena_set_allocated_input(::ai_bots::Input* value);
  ::ai_bots::Input* unsafe_arena_release_input();

  private:
  const ::ai_bots::Input& _internal_input() const;
  ::ai_bots::Input* _internal_mutable_input();

  public:
  void clear_request_type();
  RequestTypeCase request_type_case() const;
  // @@protoc_insertion_point(class_scope:ai_bots.ConverseRequest)
 private:
  class _Internal;
  void set_has_config();
  void set_has_input();
  inline bool has_request_type() const;
  inline void clear_has_request_type();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConverseRequest& from_msg);
    union RequestTypeUnion {
      constexpr RequestTypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::ai_bots::Config* config_;
      ::ai_bots::Input* input_;
    } request_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_converse_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Config

// string conversation_id = 1;
inline void Config::clear_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.ClearToEmpty();
}
inline const std::string& Config::conversation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.Config.conversation_id)
  return _internal_conversation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Config::set_conversation_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai_bots.Config.conversation_id)
}
inline std::string* Config::mutable_conversation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:ai_bots.Config.conversation_id)
  return _s;
}
inline const std::string& Config::_internal_conversation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conversation_id_.Get();
}
inline void Config::_internal_set_conversation_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(value, GetArena());
}
inline std::string* Config::_internal_mutable_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.conversation_id_.Mutable( GetArena());
}
inline std::string* Config::release_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ai_bots.Config.conversation_id)
  return _impl_.conversation_id_.Release();
}
inline void Config::set_allocated_conversation_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ai_bots.Config.conversation_id)
}

// string dialog_id = 2;
inline void Config::clear_dialog_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dialog_id_.ClearToEmpty();
}
inline const std::string& Config::dialog_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.Config.dialog_id)
  return _internal_dialog_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Config::set_dialog_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dialog_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai_bots.Config.dialog_id)
}
inline std::string* Config::mutable_dialog_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dialog_id();
  // @@protoc_insertion_point(field_mutable:ai_bots.Config.dialog_id)
  return _s;
}
inline const std::string& Config::_internal_dialog_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dialog_id_.Get();
}
inline void Config::_internal_set_dialog_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dialog_id_.Set(value, GetArena());
}
inline std::string* Config::_internal_mutable_dialog_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dialog_id_.Mutable( GetArena());
}
inline std::string* Config::release_dialog_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ai_bots.Config.dialog_id)
  return _impl_.dialog_id_.Release();
}
inline void Config::set_allocated_dialog_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dialog_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.dialog_id_.IsDefault()) {
    _impl_.dialog_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ai_bots.Config.dialog_id)
}

// map<string, string> user_data = 3;
inline int Config::_internal_user_data_size() const {
  return _internal_user_data().size();
}
inline int Config::user_data_size() const {
  return _internal_user_data_size();
}
inline void Config::clear_user_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_data_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Config::_internal_user_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_data_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Config::user_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:ai_bots.Config.user_data)
  return _internal_user_data();
}
inline ::google::protobuf::Map<std::string, std::string>* Config::_internal_mutable_user_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_data_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Config::mutable_user_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:ai_bots.Config.user_data)
  return _internal_mutable_user_data();
}

// string rate = 4;
inline void Config::clear_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_.ClearToEmpty();
}
inline const std::string& Config::rate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.Config.rate)
  return _internal_rate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Config::set_rate(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai_bots.Config.rate)
}
inline std::string* Config::mutable_rate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rate();
  // @@protoc_insertion_point(field_mutable:ai_bots.Config.rate)
  return _s;
}
inline const std::string& Config::_internal_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rate_.Get();
}
inline void Config::_internal_set_rate(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_.Set(value, GetArena());
}
inline std::string* Config::_internal_mutable_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rate_.Mutable( GetArena());
}
inline std::string* Config::release_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ai_bots.Config.rate)
  return _impl_.rate_.Release();
}
inline void Config::set_allocated_rate(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.rate_.IsDefault()) {
    _impl_.rate_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ai_bots.Config.rate)
}

// -------------------------------------------------------------------

// Input

// bytes audio_data = 1;
inline bool Input::has_audio_data() const {
  return data_case() == kAudioData;
}
inline void Input::set_has_audio_data() {
  _impl_._oneof_case_[0] = kAudioData;
}
inline void Input::clear_audio_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() == kAudioData) {
    _impl_.data_.audio_data_.Destroy();
    clear_has_data();
  }
}
inline const std::string& Input::audio_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.Input.audio_data)
  return _internal_audio_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Input::set_audio_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() != kAudioData) {
    clear_data();

    set_has_audio_data();
    _impl_.data_.audio_data_.InitDefault();
  }
  _impl_.data_.audio_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai_bots.Input.audio_data)
}
inline std::string* Input::mutable_audio_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audio_data();
  // @@protoc_insertion_point(field_mutable:ai_bots.Input.audio_data)
  return _s;
}
inline const std::string& Input::_internal_audio_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (data_case() != kAudioData) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.data_.audio_data_.Get();
}
inline void Input::_internal_set_audio_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() != kAudioData) {
    clear_data();

    set_has_audio_data();
    _impl_.data_.audio_data_.InitDefault();
  }
  _impl_.data_.audio_data_.Set(value, GetArena());
}
inline std::string* Input::_internal_mutable_audio_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() != kAudioData) {
    clear_data();

    set_has_audio_data();
    _impl_.data_.audio_data_.InitDefault();
  }
  return _impl_.data_.audio_data_.Mutable( GetArena());
}
inline std::string* Input::release_audio_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ai_bots.Input.audio_data)
  if (data_case() != kAudioData) {
    return nullptr;
  }
  clear_has_data();
  return _impl_.data_.audio_data_.Release();
}
inline void Input::set_allocated_audio_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_data()) {
    clear_data();
  }
  if (value != nullptr) {
    set_has_audio_data();
    _impl_.data_.audio_data_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ai_bots.Input.audio_data)
}

// string text_data = 2;
inline bool Input::has_text_data() const {
  return data_case() == kTextData;
}
inline void Input::set_has_text_data() {
  _impl_._oneof_case_[0] = kTextData;
}
inline void Input::clear_text_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() == kTextData) {
    _impl_.data_.text_data_.Destroy();
    clear_has_data();
  }
}
inline const std::string& Input::text_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.Input.text_data)
  return _internal_text_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Input::set_text_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() != kTextData) {
    clear_data();

    set_has_text_data();
    _impl_.data_.text_data_.InitDefault();
  }
  _impl_.data_.text_data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai_bots.Input.text_data)
}
inline std::string* Input::mutable_text_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text_data();
  // @@protoc_insertion_point(field_mutable:ai_bots.Input.text_data)
  return _s;
}
inline const std::string& Input::_internal_text_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (data_case() != kTextData) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.data_.text_data_.Get();
}
inline void Input::_internal_set_text_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() != kTextData) {
    clear_data();

    set_has_text_data();
    _impl_.data_.text_data_.InitDefault();
  }
  _impl_.data_.text_data_.Set(value, GetArena());
}
inline std::string* Input::_internal_mutable_text_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() != kTextData) {
    clear_data();

    set_has_text_data();
    _impl_.data_.text_data_.InitDefault();
  }
  return _impl_.data_.text_data_.Mutable( GetArena());
}
inline std::string* Input::release_text_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ai_bots.Input.text_data)
  if (data_case() != kTextData) {
    return nullptr;
  }
  clear_has_data();
  return _impl_.data_.text_data_.Release();
}
inline void Input::set_allocated_text_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_data()) {
    clear_data();
  }
  if (value != nullptr) {
    set_has_text_data();
    _impl_.data_.text_data_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ai_bots.Input.text_data)
}

inline bool Input::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Input::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline Input::DataCase Input::data_case() const {
  return Input::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConverseRequest

// .ai_bots.Config config = 1;
inline bool ConverseRequest::has_config() const {
  return request_type_case() == kConfig;
}
inline bool ConverseRequest::_internal_has_config() const {
  return request_type_case() == kConfig;
}
inline void ConverseRequest::set_has_config() {
  _impl_._oneof_case_[0] = kConfig;
}
inline void ConverseRequest::clear_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_type_case() == kConfig) {
    if (GetArena() == nullptr) {
      delete _impl_.request_type_.config_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_type_.config_);
    }
    clear_has_request_type();
  }
}
inline ::ai_bots::Config* ConverseRequest::release_config() {
  // @@protoc_insertion_point(field_release:ai_bots.ConverseRequest.config)
  if (request_type_case() == kConfig) {
    clear_has_request_type();
    auto* temp = _impl_.request_type_.config_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_type_.config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ai_bots::Config& ConverseRequest::_internal_config() const {
  return request_type_case() == kConfig ? *_impl_.request_type_.config_ : reinterpret_cast<::ai_bots::Config&>(::ai_bots::_Config_default_instance_);
}
inline const ::ai_bots::Config& ConverseRequest::config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.ConverseRequest.config)
  return _internal_config();
}
inline ::ai_bots::Config* ConverseRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ai_bots.ConverseRequest.config)
  if (request_type_case() == kConfig) {
    clear_has_request_type();
    auto* temp = _impl_.request_type_.config_;
    _impl_.request_type_.config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConverseRequest::unsafe_arena_set_allocated_config(::ai_bots::Config* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request_type();
  if (value) {
    set_has_config();
    _impl_.request_type_.config_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai_bots.ConverseRequest.config)
}
inline ::ai_bots::Config* ConverseRequest::_internal_mutable_config() {
  if (request_type_case() != kConfig) {
    clear_request_type();
    set_has_config();
    _impl_.request_type_.config_ =
        ::google::protobuf::Message::DefaultConstruct<::ai_bots::Config>(GetArena());
  }
  return _impl_.request_type_.config_;
}
inline ::ai_bots::Config* ConverseRequest::mutable_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai_bots::Config* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:ai_bots.ConverseRequest.config)
  return _msg;
}

// .ai_bots.Input input = 2;
inline bool ConverseRequest::has_input() const {
  return request_type_case() == kInput;
}
inline bool ConverseRequest::_internal_has_input() const {
  return request_type_case() == kInput;
}
inline void ConverseRequest::set_has_input() {
  _impl_._oneof_case_[0] = kInput;
}
inline void ConverseRequest::clear_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_type_case() == kInput) {
    if (GetArena() == nullptr) {
      delete _impl_.request_type_.input_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_type_.input_);
    }
    clear_has_request_type();
  }
}
inline ::ai_bots::Input* ConverseRequest::release_input() {
  // @@protoc_insertion_point(field_release:ai_bots.ConverseRequest.input)
  if (request_type_case() == kInput) {
    clear_has_request_type();
    auto* temp = _impl_.request_type_.input_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_type_.input_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ai_bots::Input& ConverseRequest::_internal_input() const {
  return request_type_case() == kInput ? *_impl_.request_type_.input_ : reinterpret_cast<::ai_bots::Input&>(::ai_bots::_Input_default_instance_);
}
inline const ::ai_bots::Input& ConverseRequest::input() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.ConverseRequest.input)
  return _internal_input();
}
inline ::ai_bots::Input* ConverseRequest::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ai_bots.ConverseRequest.input)
  if (request_type_case() == kInput) {
    clear_has_request_type();
    auto* temp = _impl_.request_type_.input_;
    _impl_.request_type_.input_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConverseRequest::unsafe_arena_set_allocated_input(::ai_bots::Input* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request_type();
  if (value) {
    set_has_input();
    _impl_.request_type_.input_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai_bots.ConverseRequest.input)
}
inline ::ai_bots::Input* ConverseRequest::_internal_mutable_input() {
  if (request_type_case() != kInput) {
    clear_request_type();
    set_has_input();
    _impl_.request_type_.input_ =
        ::google::protobuf::Message::DefaultConstruct<::ai_bots::Input>(GetArena());
  }
  return _impl_.request_type_.input_;
}
inline ::ai_bots::Input* ConverseRequest::mutable_input() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai_bots::Input* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:ai_bots.ConverseRequest.input)
  return _msg;
}

inline bool ConverseRequest::has_request_type() const {
  return request_type_case() != REQUEST_TYPE_NOT_SET;
}
inline void ConverseRequest::clear_has_request_type() {
  _impl_._oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}
inline ConverseRequest::RequestTypeCase ConverseRequest::request_type_case() const {
  return ConverseRequest::RequestTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RecognizeRequest

// .ai_bots.Config config = 1;
inline bool RecognizeRequest::has_config() const {
  return request_type_case() == kConfig;
}
inline bool RecognizeRequest::_internal_has_config() const {
  return request_type_case() == kConfig;
}
inline void RecognizeRequest::set_has_config() {
  _impl_._oneof_case_[0] = kConfig;
}
inline void RecognizeRequest::clear_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_type_case() == kConfig) {
    if (GetArena() == nullptr) {
      delete _impl_.request_type_.config_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_type_.config_);
    }
    clear_has_request_type();
  }
}
inline ::ai_bots::Config* RecognizeRequest::release_config() {
  // @@protoc_insertion_point(field_release:ai_bots.RecognizeRequest.config)
  if (request_type_case() == kConfig) {
    clear_has_request_type();
    auto* temp = _impl_.request_type_.config_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_type_.config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ai_bots::Config& RecognizeRequest::_internal_config() const {
  return request_type_case() == kConfig ? *_impl_.request_type_.config_ : reinterpret_cast<::ai_bots::Config&>(::ai_bots::_Config_default_instance_);
}
inline const ::ai_bots::Config& RecognizeRequest::config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.RecognizeRequest.config)
  return _internal_config();
}
inline ::ai_bots::Config* RecognizeRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ai_bots.RecognizeRequest.config)
  if (request_type_case() == kConfig) {
    clear_has_request_type();
    auto* temp = _impl_.request_type_.config_;
    _impl_.request_type_.config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RecognizeRequest::unsafe_arena_set_allocated_config(::ai_bots::Config* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request_type();
  if (value) {
    set_has_config();
    _impl_.request_type_.config_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai_bots.RecognizeRequest.config)
}
inline ::ai_bots::Config* RecognizeRequest::_internal_mutable_config() {
  if (request_type_case() != kConfig) {
    clear_request_type();
    set_has_config();
    _impl_.request_type_.config_ =
        ::google::protobuf::Message::DefaultConstruct<::ai_bots::Config>(GetArena());
  }
  return _impl_.request_type_.config_;
}
inline ::ai_bots::Config* RecognizeRequest::mutable_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai_bots::Config* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:ai_bots.RecognizeRequest.config)
  return _msg;
}

// .ai_bots.Input input = 2;
inline bool RecognizeRequest::has_input() const {
  return request_type_case() == kInput;
}
inline bool RecognizeRequest::_internal_has_input() const {
  return request_type_case() == kInput;
}
inline void RecognizeRequest::set_has_input() {
  _impl_._oneof_case_[0] = kInput;
}
inline void RecognizeRequest::clear_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (request_type_case() == kInput) {
    if (GetArena() == nullptr) {
      delete _impl_.request_type_.input_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_type_.input_);
    }
    clear_has_request_type();
  }
}
inline ::ai_bots::Input* RecognizeRequest::release_input() {
  // @@protoc_insertion_point(field_release:ai_bots.RecognizeRequest.input)
  if (request_type_case() == kInput) {
    clear_has_request_type();
    auto* temp = _impl_.request_type_.input_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_type_.input_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ai_bots::Input& RecognizeRequest::_internal_input() const {
  return request_type_case() == kInput ? *_impl_.request_type_.input_ : reinterpret_cast<::ai_bots::Input&>(::ai_bots::_Input_default_instance_);
}
inline const ::ai_bots::Input& RecognizeRequest::input() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.RecognizeRequest.input)
  return _internal_input();
}
inline ::ai_bots::Input* RecognizeRequest::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ai_bots.RecognizeRequest.input)
  if (request_type_case() == kInput) {
    clear_has_request_type();
    auto* temp = _impl_.request_type_.input_;
    _impl_.request_type_.input_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RecognizeRequest::unsafe_arena_set_allocated_input(::ai_bots::Input* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request_type();
  if (value) {
    set_has_input();
    _impl_.request_type_.input_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai_bots.RecognizeRequest.input)
}
inline ::ai_bots::Input* RecognizeRequest::_internal_mutable_input() {
  if (request_type_case() != kInput) {
    clear_request_type();
    set_has_input();
    _impl_.request_type_.input_ =
        ::google::protobuf::Message::DefaultConstruct<::ai_bots::Input>(GetArena());
  }
  return _impl_.request_type_.input_;
}
inline ::ai_bots::Input* RecognizeRequest::mutable_input() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai_bots::Input* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:ai_bots.RecognizeRequest.input)
  return _msg;
}

inline bool RecognizeRequest::has_request_type() const {
  return request_type_case() != REQUEST_TYPE_NOT_SET;
}
inline void RecognizeRequest::clear_has_request_type() {
  _impl_._oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}
inline RecognizeRequest::RequestTypeCase RecognizeRequest::request_type_case() const {
  return RecognizeRequest::RequestTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RecognizeResponse

// bool is_final = 1;
inline void RecognizeResponse::clear_is_final() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_final_ = false;
}
inline bool RecognizeResponse::is_final() const {
  // @@protoc_insertion_point(field_get:ai_bots.RecognizeResponse.is_final)
  return _internal_is_final();
}
inline void RecognizeResponse::set_is_final(bool value) {
  _internal_set_is_final(value);
  // @@protoc_insertion_point(field_set:ai_bots.RecognizeResponse.is_final)
}
inline bool RecognizeResponse::_internal_is_final() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_final_;
}
inline void RecognizeResponse::_internal_set_is_final(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_final_ = value;
}

// bool interrupted = 2;
inline void RecognizeResponse::clear_interrupted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interrupted_ = false;
}
inline bool RecognizeResponse::interrupted() const {
  // @@protoc_insertion_point(field_get:ai_bots.RecognizeResponse.interrupted)
  return _internal_interrupted();
}
inline void RecognizeResponse::set_interrupted(bool value) {
  _internal_set_interrupted(value);
  // @@protoc_insertion_point(field_set:ai_bots.RecognizeResponse.interrupted)
}
inline bool RecognizeResponse::_internal_interrupted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.interrupted_;
}
inline void RecognizeResponse::_internal_set_interrupted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interrupted_ = value;
}

// map<string, string> variables = 3;
inline int RecognizeResponse::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int RecognizeResponse::variables_size() const {
  return _internal_variables_size();
}
inline void RecognizeResponse::clear_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.variables_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& RecognizeResponse::_internal_variables() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.variables_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& RecognizeResponse::variables() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:ai_bots.RecognizeResponse.variables)
  return _internal_variables();
}
inline ::google::protobuf::Map<std::string, std::string>* RecognizeResponse::_internal_mutable_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.variables_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* RecognizeResponse::mutable_variables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:ai_bots.RecognizeResponse.variables)
  return _internal_mutable_variables();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ConverseResponse

// string conversation_id = 1;
inline void ConverseResponse::clear_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.ClearToEmpty();
}
inline const std::string& ConverseResponse::conversation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.ConverseResponse.conversation_id)
  return _internal_conversation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConverseResponse::set_conversation_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai_bots.ConverseResponse.conversation_id)
}
inline std::string* ConverseResponse::mutable_conversation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:ai_bots.ConverseResponse.conversation_id)
  return _s;
}
inline const std::string& ConverseResponse::_internal_conversation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conversation_id_.Get();
}
inline void ConverseResponse::_internal_set_conversation_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(value, GetArena());
}
inline std::string* ConverseResponse::_internal_mutable_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.conversation_id_.Mutable( GetArena());
}
inline std::string* ConverseResponse::release_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ai_bots.ConverseResponse.conversation_id)
  return _impl_.conversation_id_.Release();
}
inline void ConverseResponse::set_allocated_conversation_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ai_bots.ConverseResponse.conversation_id)
}

// bytes audio_data = 2;
inline void ConverseResponse::clear_audio_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_data_.ClearToEmpty();
}
inline const std::string& ConverseResponse::audio_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.ConverseResponse.audio_data)
  return _internal_audio_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConverseResponse::set_audio_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai_bots.ConverseResponse.audio_data)
}
inline std::string* ConverseResponse::mutable_audio_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audio_data();
  // @@protoc_insertion_point(field_mutable:ai_bots.ConverseResponse.audio_data)
  return _s;
}
inline const std::string& ConverseResponse::_internal_audio_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.audio_data_.Get();
}
inline void ConverseResponse::_internal_set_audio_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_data_.Set(value, GetArena());
}
inline std::string* ConverseResponse::_internal_mutable_audio_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.audio_data_.Mutable( GetArena());
}
inline std::string* ConverseResponse::release_audio_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ai_bots.ConverseResponse.audio_data)
  return _impl_.audio_data_.Release();
}
inline void ConverseResponse::set_allocated_audio_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.audio_data_.IsDefault()) {
    _impl_.audio_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ai_bots.ConverseResponse.audio_data)
}

// string text_data = 6;
inline void ConverseResponse::clear_text_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_data_.ClearToEmpty();
}
inline const std::string& ConverseResponse::text_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.ConverseResponse.text_data)
  return _internal_text_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConverseResponse::set_text_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai_bots.ConverseResponse.text_data)
}
inline std::string* ConverseResponse::mutable_text_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text_data();
  // @@protoc_insertion_point(field_mutable:ai_bots.ConverseResponse.text_data)
  return _s;
}
inline const std::string& ConverseResponse::_internal_text_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.text_data_.Get();
}
inline void ConverseResponse::_internal_set_text_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_data_.Set(value, GetArena());
}
inline std::string* ConverseResponse::_internal_mutable_text_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.text_data_.Mutable( GetArena());
}
inline std::string* ConverseResponse::release_text_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ai_bots.ConverseResponse.text_data)
  return _impl_.text_data_.Release();
}
inline void ConverseResponse::set_allocated_text_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.text_data_.IsDefault()) {
    _impl_.text_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ai_bots.ConverseResponse.text_data)
}

// bool stop_talk = 3;
inline void ConverseResponse::clear_stop_talk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stop_talk_ = false;
}
inline bool ConverseResponse::stop_talk() const {
  // @@protoc_insertion_point(field_get:ai_bots.ConverseResponse.stop_talk)
  return _internal_stop_talk();
}
inline void ConverseResponse::set_stop_talk(bool value) {
  _internal_set_stop_talk(value);
  // @@protoc_insertion_point(field_set:ai_bots.ConverseResponse.stop_talk)
}
inline bool ConverseResponse::_internal_stop_talk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stop_talk_;
}
inline void ConverseResponse::_internal_set_stop_talk(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stop_talk_ = value;
}

// bool end_conversation = 4;
inline void ConverseResponse::clear_end_conversation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_conversation_ = false;
}
inline bool ConverseResponse::end_conversation() const {
  // @@protoc_insertion_point(field_get:ai_bots.ConverseResponse.end_conversation)
  return _internal_end_conversation();
}
inline void ConverseResponse::set_end_conversation(bool value) {
  _internal_set_end_conversation(value);
  // @@protoc_insertion_point(field_set:ai_bots.ConverseResponse.end_conversation)
}
inline bool ConverseResponse::_internal_end_conversation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.end_conversation_;
}
inline void ConverseResponse::_internal_set_end_conversation(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_conversation_ = value;
}

// map<string, string> variables = 5;
inline int ConverseResponse::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int ConverseResponse::variables_size() const {
  return _internal_variables_size();
}
inline void ConverseResponse::clear_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.variables_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ConverseResponse::_internal_variables() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.variables_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ConverseResponse::variables() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:ai_bots.ConverseResponse.variables)
  return _internal_variables();
}
inline ::google::protobuf::Map<std::string, std::string>* ConverseResponse::_internal_mutable_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.variables_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* ConverseResponse::mutable_variables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:ai_bots.ConverseResponse.variables)
  return _internal_mutable_variables();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ai_bots


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // converse_2eproto_2epb_2eh
