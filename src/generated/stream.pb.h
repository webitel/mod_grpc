// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: stream.proto
// Protobuf C++ Version: 5.29.0

#ifndef stream_2eproto_2epb_2eh
#define stream_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_stream_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_stream_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_stream_2eproto;
namespace amd {
class StreamPCMRequest;
struct StreamPCMRequestDefaultTypeInternal;
extern StreamPCMRequestDefaultTypeInternal _StreamPCMRequest_default_instance_;
class StreamPCMRequest_Metadata;
struct StreamPCMRequest_MetadataDefaultTypeInternal;
extern StreamPCMRequest_MetadataDefaultTypeInternal _StreamPCMRequest_Metadata_default_instance_;
class StreamPCMResponse;
struct StreamPCMResponseDefaultTypeInternal;
extern StreamPCMResponseDefaultTypeInternal _StreamPCMResponse_default_instance_;
}  // namespace amd
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace amd {
enum UploadStatusCode : int {
  Unknown = 0,
  Ok = 1,
  Failed = 2,
  UploadStatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  UploadStatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool UploadStatusCode_IsValid(int value);
extern const uint32_t UploadStatusCode_internal_data_[];
constexpr UploadStatusCode UploadStatusCode_MIN = static_cast<UploadStatusCode>(0);
constexpr UploadStatusCode UploadStatusCode_MAX = static_cast<UploadStatusCode>(2);
constexpr int UploadStatusCode_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
UploadStatusCode_descriptor();
template <typename T>
const std::string& UploadStatusCode_Name(T value) {
  static_assert(std::is_same<T, UploadStatusCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UploadStatusCode_Name().");
  return UploadStatusCode_Name(static_cast<UploadStatusCode>(value));
}
template <>
inline const std::string& UploadStatusCode_Name(UploadStatusCode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<UploadStatusCode_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool UploadStatusCode_Parse(absl::string_view name, UploadStatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UploadStatusCode>(
      UploadStatusCode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class StreamPCMResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:amd.StreamPCMResponse) */ {
 public:
  inline StreamPCMResponse() : StreamPCMResponse(nullptr) {}
  ~StreamPCMResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StreamPCMResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StreamPCMResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamPCMResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamPCMResponse(const StreamPCMResponse& from) : StreamPCMResponse(nullptr, from) {}
  inline StreamPCMResponse(StreamPCMResponse&& from) noexcept
      : StreamPCMResponse(nullptr, std::move(from)) {}
  inline StreamPCMResponse& operator=(const StreamPCMResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamPCMResponse& operator=(StreamPCMResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamPCMResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamPCMResponse* internal_default_instance() {
    return reinterpret_cast<const StreamPCMResponse*>(
        &_StreamPCMResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(StreamPCMResponse& a, StreamPCMResponse& b) { a.Swap(&b); }
  inline void Swap(StreamPCMResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamPCMResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamPCMResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StreamPCMResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamPCMResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamPCMResponse& from) { StreamPCMResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StreamPCMResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "amd.StreamPCMResponse"; }

 protected:
  explicit StreamPCMResponse(::google::protobuf::Arena* arena);
  StreamPCMResponse(::google::protobuf::Arena* arena, const StreamPCMResponse& from);
  StreamPCMResponse(::google::protobuf::Arena* arena, StreamPCMResponse&& from) noexcept
      : StreamPCMResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResultsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated string results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;

  public:
  void clear_results() ;
  const std::string& results(int index) const;
  std::string* mutable_results(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_results(int index, Arg_&& value, Args_... args);
  std::string* add_results();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_results(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& results() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_results();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_results() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_results();

  public:
  // string result = 1;
  void clear_result() ;
  const std::string& result() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result(Arg_&& arg, Args_... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* value);

  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(
      const std::string& value);
  std::string* _internal_mutable_result();

  public:
  // @@protoc_insertion_point(class_scope:amd.StreamPCMResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamPCMResponse& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> results_;
    ::google::protobuf::internal::ArenaStringPtr result_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stream_2eproto;
};
// -------------------------------------------------------------------

class StreamPCMRequest_Metadata final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:amd.StreamPCMRequest.Metadata) */ {
 public:
  inline StreamPCMRequest_Metadata() : StreamPCMRequest_Metadata(nullptr) {}
  ~StreamPCMRequest_Metadata() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StreamPCMRequest_Metadata* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StreamPCMRequest_Metadata));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamPCMRequest_Metadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamPCMRequest_Metadata(const StreamPCMRequest_Metadata& from) : StreamPCMRequest_Metadata(nullptr, from) {}
  inline StreamPCMRequest_Metadata(StreamPCMRequest_Metadata&& from) noexcept
      : StreamPCMRequest_Metadata(nullptr, std::move(from)) {}
  inline StreamPCMRequest_Metadata& operator=(const StreamPCMRequest_Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamPCMRequest_Metadata& operator=(StreamPCMRequest_Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamPCMRequest_Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamPCMRequest_Metadata* internal_default_instance() {
    return reinterpret_cast<const StreamPCMRequest_Metadata*>(
        &_StreamPCMRequest_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(StreamPCMRequest_Metadata& a, StreamPCMRequest_Metadata& b) { a.Swap(&b); }
  inline void Swap(StreamPCMRequest_Metadata* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamPCMRequest_Metadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamPCMRequest_Metadata* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StreamPCMRequest_Metadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamPCMRequest_Metadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamPCMRequest_Metadata& from) { StreamPCMRequest_Metadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StreamPCMRequest_Metadata* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "amd.StreamPCMRequest.Metadata"; }

 protected:
  explicit StreamPCMRequest_Metadata(::google::protobuf::Arena* arena);
  StreamPCMRequest_Metadata(::google::protobuf::Arena* arena, const StreamPCMRequest_Metadata& from);
  StreamPCMRequest_Metadata(::google::protobuf::Arena* arena, StreamPCMRequest_Metadata&& from) noexcept
      : StreamPCMRequest_Metadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 2,
    kMimeTypeFieldNumber = 3,
    kUuidFieldNumber = 4,
    kDomainIdFieldNumber = 1,
    kSampleRateFieldNumber = 5,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string mime_type = 3;
  void clear_mime_type() ;
  const std::string& mime_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mime_type(Arg_&& arg, Args_... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* value);

  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(
      const std::string& value);
  std::string* _internal_mutable_mime_type();

  public:
  // string uuid = 4;
  void clear_uuid() ;
  const std::string& uuid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uuid(Arg_&& arg, Args_... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* value);

  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(
      const std::string& value);
  std::string* _internal_mutable_uuid();

  public:
  // int64 domain_id = 1;
  void clear_domain_id() ;
  ::int64_t domain_id() const;
  void set_domain_id(::int64_t value);

  private:
  ::int64_t _internal_domain_id() const;
  void _internal_set_domain_id(::int64_t value);

  public:
  // int32 sample_rate = 5;
  void clear_sample_rate() ;
  ::int32_t sample_rate() const;
  void set_sample_rate(::int32_t value);

  private:
  ::int32_t _internal_sample_rate() const;
  void _internal_set_sample_rate(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:amd.StreamPCMRequest.Metadata)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamPCMRequest_Metadata& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr mime_type_;
    ::google::protobuf::internal::ArenaStringPtr uuid_;
    ::int64_t domain_id_;
    ::int32_t sample_rate_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stream_2eproto;
};
// -------------------------------------------------------------------

class StreamPCMRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:amd.StreamPCMRequest) */ {
 public:
  inline StreamPCMRequest() : StreamPCMRequest(nullptr) {}
  ~StreamPCMRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StreamPCMRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StreamPCMRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamPCMRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamPCMRequest(const StreamPCMRequest& from) : StreamPCMRequest(nullptr, from) {}
  inline StreamPCMRequest(StreamPCMRequest&& from) noexcept
      : StreamPCMRequest(nullptr, std::move(from)) {}
  inline StreamPCMRequest& operator=(const StreamPCMRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamPCMRequest& operator=(StreamPCMRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamPCMRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kMetadata = 1,
    kChunk = 2,
    DATA_NOT_SET = 0,
  };
  static inline const StreamPCMRequest* internal_default_instance() {
    return reinterpret_cast<const StreamPCMRequest*>(
        &_StreamPCMRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(StreamPCMRequest& a, StreamPCMRequest& b) { a.Swap(&b); }
  inline void Swap(StreamPCMRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamPCMRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamPCMRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StreamPCMRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamPCMRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamPCMRequest& from) { StreamPCMRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StreamPCMRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "amd.StreamPCMRequest"; }

 protected:
  explicit StreamPCMRequest(::google::protobuf::Arena* arena);
  StreamPCMRequest(::google::protobuf::Arena* arena, const StreamPCMRequest& from);
  StreamPCMRequest(::google::protobuf::Arena* arena, StreamPCMRequest&& from) noexcept
      : StreamPCMRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Metadata = StreamPCMRequest_Metadata;

  // accessors -------------------------------------------------------
  enum : int {
    kVadFieldNumber = 3,
    kMetadataFieldNumber = 1,
    kChunkFieldNumber = 2,
  };
  // int32 vad = 3;
  void clear_vad() ;
  ::int32_t vad() const;
  void set_vad(::int32_t value);

  private:
  ::int32_t _internal_vad() const;
  void _internal_set_vad(::int32_t value);

  public:
  // .amd.StreamPCMRequest.Metadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;

  public:
  void clear_metadata() ;
  const ::amd::StreamPCMRequest_Metadata& metadata() const;
  PROTOBUF_NODISCARD ::amd::StreamPCMRequest_Metadata* release_metadata();
  ::amd::StreamPCMRequest_Metadata* mutable_metadata();
  void set_allocated_metadata(::amd::StreamPCMRequest_Metadata* value);
  void unsafe_arena_set_allocated_metadata(::amd::StreamPCMRequest_Metadata* value);
  ::amd::StreamPCMRequest_Metadata* unsafe_arena_release_metadata();

  private:
  const ::amd::StreamPCMRequest_Metadata& _internal_metadata() const;
  ::amd::StreamPCMRequest_Metadata* _internal_mutable_metadata();

  public:
  // bytes chunk = 2;
  bool has_chunk() const;
  void clear_chunk() ;
  const std::string& chunk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chunk(Arg_&& arg, Args_... args);
  std::string* mutable_chunk();
  PROTOBUF_NODISCARD std::string* release_chunk();
  void set_allocated_chunk(std::string* value);

  private:
  const std::string& _internal_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk(
      const std::string& value);
  std::string* _internal_mutable_chunk();

  public:
  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:amd.StreamPCMRequest)
 private:
  class _Internal;
  void set_has_metadata();
  void set_has_chunk();
  inline bool has_data() const;
  inline void clear_has_data();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamPCMRequest& from_msg);
    ::int32_t vad_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::amd::StreamPCMRequest_Metadata* metadata_;
      ::google::protobuf::internal::ArenaStringPtr chunk_;
    } data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stream_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StreamPCMRequest_Metadata

// int64 domain_id = 1;
inline void StreamPCMRequest_Metadata::clear_domain_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.domain_id_ = ::int64_t{0};
}
inline ::int64_t StreamPCMRequest_Metadata::domain_id() const {
  // @@protoc_insertion_point(field_get:amd.StreamPCMRequest.Metadata.domain_id)
  return _internal_domain_id();
}
inline void StreamPCMRequest_Metadata::set_domain_id(::int64_t value) {
  _internal_set_domain_id(value);
  // @@protoc_insertion_point(field_set:amd.StreamPCMRequest.Metadata.domain_id)
}
inline ::int64_t StreamPCMRequest_Metadata::_internal_domain_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.domain_id_;
}
inline void StreamPCMRequest_Metadata::_internal_set_domain_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.domain_id_ = value;
}

// string name = 2;
inline void StreamPCMRequest_Metadata::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StreamPCMRequest_Metadata::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:amd.StreamPCMRequest.Metadata.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamPCMRequest_Metadata::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:amd.StreamPCMRequest.Metadata.name)
}
inline std::string* StreamPCMRequest_Metadata::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:amd.StreamPCMRequest.Metadata.name)
  return _s;
}
inline const std::string& StreamPCMRequest_Metadata::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void StreamPCMRequest_Metadata::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* StreamPCMRequest_Metadata::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* StreamPCMRequest_Metadata::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:amd.StreamPCMRequest.Metadata.name)
  return _impl_.name_.Release();
}
inline void StreamPCMRequest_Metadata::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:amd.StreamPCMRequest.Metadata.name)
}

// string mime_type = 3;
inline void StreamPCMRequest_Metadata::clear_mime_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mime_type_.ClearToEmpty();
}
inline const std::string& StreamPCMRequest_Metadata::mime_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:amd.StreamPCMRequest.Metadata.mime_type)
  return _internal_mime_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamPCMRequest_Metadata::set_mime_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mime_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:amd.StreamPCMRequest.Metadata.mime_type)
}
inline std::string* StreamPCMRequest_Metadata::mutable_mime_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:amd.StreamPCMRequest.Metadata.mime_type)
  return _s;
}
inline const std::string& StreamPCMRequest_Metadata::_internal_mime_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mime_type_.Get();
}
inline void StreamPCMRequest_Metadata::_internal_set_mime_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mime_type_.Set(value, GetArena());
}
inline std::string* StreamPCMRequest_Metadata::_internal_mutable_mime_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.mime_type_.Mutable( GetArena());
}
inline std::string* StreamPCMRequest_Metadata::release_mime_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:amd.StreamPCMRequest.Metadata.mime_type)
  return _impl_.mime_type_.Release();
}
inline void StreamPCMRequest_Metadata::set_allocated_mime_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mime_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mime_type_.IsDefault()) {
    _impl_.mime_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:amd.StreamPCMRequest.Metadata.mime_type)
}

// string uuid = 4;
inline void StreamPCMRequest_Metadata::clear_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& StreamPCMRequest_Metadata::uuid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:amd.StreamPCMRequest.Metadata.uuid)
  return _internal_uuid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamPCMRequest_Metadata::set_uuid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:amd.StreamPCMRequest.Metadata.uuid)
}
inline std::string* StreamPCMRequest_Metadata::mutable_uuid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:amd.StreamPCMRequest.Metadata.uuid)
  return _s;
}
inline const std::string& StreamPCMRequest_Metadata::_internal_uuid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uuid_.Get();
}
inline void StreamPCMRequest_Metadata::_internal_set_uuid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.Set(value, GetArena());
}
inline std::string* StreamPCMRequest_Metadata::_internal_mutable_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.uuid_.Mutable( GetArena());
}
inline std::string* StreamPCMRequest_Metadata::release_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:amd.StreamPCMRequest.Metadata.uuid)
  return _impl_.uuid_.Release();
}
inline void StreamPCMRequest_Metadata::set_allocated_uuid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:amd.StreamPCMRequest.Metadata.uuid)
}

// int32 sample_rate = 5;
inline void StreamPCMRequest_Metadata::clear_sample_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sample_rate_ = 0;
}
inline ::int32_t StreamPCMRequest_Metadata::sample_rate() const {
  // @@protoc_insertion_point(field_get:amd.StreamPCMRequest.Metadata.sample_rate)
  return _internal_sample_rate();
}
inline void StreamPCMRequest_Metadata::set_sample_rate(::int32_t value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:amd.StreamPCMRequest.Metadata.sample_rate)
}
inline ::int32_t StreamPCMRequest_Metadata::_internal_sample_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sample_rate_;
}
inline void StreamPCMRequest_Metadata::_internal_set_sample_rate(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sample_rate_ = value;
}

// -------------------------------------------------------------------

// StreamPCMRequest

// .amd.StreamPCMRequest.Metadata metadata = 1;
inline bool StreamPCMRequest::has_metadata() const {
  return data_case() == kMetadata;
}
inline bool StreamPCMRequest::_internal_has_metadata() const {
  return data_case() == kMetadata;
}
inline void StreamPCMRequest::set_has_metadata() {
  _impl_._oneof_case_[0] = kMetadata;
}
inline void StreamPCMRequest::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() == kMetadata) {
    if (GetArena() == nullptr) {
      delete _impl_.data_.metadata_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.metadata_);
    }
    clear_has_data();
  }
}
inline ::amd::StreamPCMRequest_Metadata* StreamPCMRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:amd.StreamPCMRequest.metadata)
  if (data_case() == kMetadata) {
    clear_has_data();
    auto* temp = _impl_.data_.metadata_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::amd::StreamPCMRequest_Metadata& StreamPCMRequest::_internal_metadata() const {
  return data_case() == kMetadata ? *_impl_.data_.metadata_ : reinterpret_cast<::amd::StreamPCMRequest_Metadata&>(::amd::_StreamPCMRequest_Metadata_default_instance_);
}
inline const ::amd::StreamPCMRequest_Metadata& StreamPCMRequest::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:amd.StreamPCMRequest.metadata)
  return _internal_metadata();
}
inline ::amd::StreamPCMRequest_Metadata* StreamPCMRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:amd.StreamPCMRequest.metadata)
  if (data_case() == kMetadata) {
    clear_has_data();
    auto* temp = _impl_.data_.metadata_;
    _impl_.data_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamPCMRequest::unsafe_arena_set_allocated_metadata(::amd::StreamPCMRequest_Metadata* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_data();
  if (value) {
    set_has_metadata();
    _impl_.data_.metadata_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:amd.StreamPCMRequest.metadata)
}
inline ::amd::StreamPCMRequest_Metadata* StreamPCMRequest::_internal_mutable_metadata() {
  if (data_case() != kMetadata) {
    clear_data();
    set_has_metadata();
    _impl_.data_.metadata_ =
        ::google::protobuf::Message::DefaultConstruct<::amd::StreamPCMRequest_Metadata>(GetArena());
  }
  return _impl_.data_.metadata_;
}
inline ::amd::StreamPCMRequest_Metadata* StreamPCMRequest::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::amd::StreamPCMRequest_Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:amd.StreamPCMRequest.metadata)
  return _msg;
}

// bytes chunk = 2;
inline bool StreamPCMRequest::has_chunk() const {
  return data_case() == kChunk;
}
inline void StreamPCMRequest::set_has_chunk() {
  _impl_._oneof_case_[0] = kChunk;
}
inline void StreamPCMRequest::clear_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() == kChunk) {
    _impl_.data_.chunk_.Destroy();
    clear_has_data();
  }
}
inline const std::string& StreamPCMRequest::chunk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:amd.StreamPCMRequest.chunk)
  return _internal_chunk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamPCMRequest::set_chunk(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() != kChunk) {
    clear_data();

    set_has_chunk();
    _impl_.data_.chunk_.InitDefault();
  }
  _impl_.data_.chunk_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:amd.StreamPCMRequest.chunk)
}
inline std::string* StreamPCMRequest::mutable_chunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:amd.StreamPCMRequest.chunk)
  return _s;
}
inline const std::string& StreamPCMRequest::_internal_chunk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (data_case() != kChunk) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.data_.chunk_.Get();
}
inline void StreamPCMRequest::_internal_set_chunk(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() != kChunk) {
    clear_data();

    set_has_chunk();
    _impl_.data_.chunk_.InitDefault();
  }
  _impl_.data_.chunk_.Set(value, GetArena());
}
inline std::string* StreamPCMRequest::_internal_mutable_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() != kChunk) {
    clear_data();

    set_has_chunk();
    _impl_.data_.chunk_.InitDefault();
  }
  return _impl_.data_.chunk_.Mutable( GetArena());
}
inline std::string* StreamPCMRequest::release_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:amd.StreamPCMRequest.chunk)
  if (data_case() != kChunk) {
    return nullptr;
  }
  clear_has_data();
  return _impl_.data_.chunk_.Release();
}
inline void StreamPCMRequest::set_allocated_chunk(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_data()) {
    clear_data();
  }
  if (value != nullptr) {
    set_has_chunk();
    _impl_.data_.chunk_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:amd.StreamPCMRequest.chunk)
}

// int32 vad = 3;
inline void StreamPCMRequest::clear_vad() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vad_ = 0;
}
inline ::int32_t StreamPCMRequest::vad() const {
  // @@protoc_insertion_point(field_get:amd.StreamPCMRequest.vad)
  return _internal_vad();
}
inline void StreamPCMRequest::set_vad(::int32_t value) {
  _internal_set_vad(value);
  // @@protoc_insertion_point(field_set:amd.StreamPCMRequest.vad)
}
inline ::int32_t StreamPCMRequest::_internal_vad() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vad_;
}
inline void StreamPCMRequest::_internal_set_vad(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vad_ = value;
}

inline bool StreamPCMRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void StreamPCMRequest::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline StreamPCMRequest::DataCase StreamPCMRequest::data_case() const {
  return StreamPCMRequest::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamPCMResponse

// string result = 1;
inline void StreamPCMResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_.ClearToEmpty();
}
inline const std::string& StreamPCMResponse::result() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:amd.StreamPCMResponse.result)
  return _internal_result();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamPCMResponse::set_result(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:amd.StreamPCMResponse.result)
}
inline std::string* StreamPCMResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:amd.StreamPCMResponse.result)
  return _s;
}
inline const std::string& StreamPCMResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_.Get();
}
inline void StreamPCMResponse::_internal_set_result(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_.Set(value, GetArena());
}
inline std::string* StreamPCMResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.result_.Mutable( GetArena());
}
inline std::string* StreamPCMResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:amd.StreamPCMResponse.result)
  return _impl_.result_.Release();
}
inline void StreamPCMResponse::set_allocated_result(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:amd.StreamPCMResponse.result)
}

// repeated string results = 2;
inline int StreamPCMResponse::_internal_results_size() const {
  return _internal_results().size();
}
inline int StreamPCMResponse::results_size() const {
  return _internal_results_size();
}
inline void StreamPCMResponse::clear_results() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.results_.Clear();
}
inline std::string* StreamPCMResponse::add_results() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_results()->Add();
  // @@protoc_insertion_point(field_add_mutable:amd.StreamPCMResponse.results)
  return _s;
}
inline const std::string& StreamPCMResponse::results(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:amd.StreamPCMResponse.results)
  return _internal_results().Get(index);
}
inline std::string* StreamPCMResponse::mutable_results(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:amd.StreamPCMResponse.results)
  return _internal_mutable_results()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void StreamPCMResponse::set_results(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_results()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:amd.StreamPCMResponse.results)
}
template <typename Arg_, typename... Args_>
inline void StreamPCMResponse::add_results(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_results(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:amd.StreamPCMResponse.results)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
StreamPCMResponse::results() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:amd.StreamPCMResponse.results)
  return _internal_results();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
StreamPCMResponse::mutable_results() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:amd.StreamPCMResponse.results)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_results();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
StreamPCMResponse::_internal_results() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.results_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
StreamPCMResponse::_internal_mutable_results() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.results_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace amd


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::amd::UploadStatusCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::amd::UploadStatusCode>() {
  return ::amd::UploadStatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // stream_2eproto_2epb_2eh
