// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: voice.proto
// Protobuf C++ Version: 5.29.0

#ifndef voice_2eproto_2epb_2eh
#define voice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_voice_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_voice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_voice_2eproto;
namespace ai_bots {
class AudioData;
struct AudioDataDefaultTypeInternal;
extern AudioDataDefaultTypeInternal _AudioData_default_instance_;
class AudioRequest;
struct AudioRequestDefaultTypeInternal;
extern AudioRequestDefaultTypeInternal _AudioRequest_default_instance_;
class AudioResponse;
struct AudioResponseDefaultTypeInternal;
extern AudioResponseDefaultTypeInternal _AudioResponse_default_instance_;
class AudioResponse_VariablesEntry_DoNotUse;
struct AudioResponse_VariablesEntry_DoNotUseDefaultTypeInternal;
extern AudioResponse_VariablesEntry_DoNotUseDefaultTypeInternal _AudioResponse_VariablesEntry_DoNotUse_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Metadata_UserDataEntry_DoNotUse;
struct Metadata_UserDataEntry_DoNotUseDefaultTypeInternal;
extern Metadata_UserDataEntry_DoNotUseDefaultTypeInternal _Metadata_UserDataEntry_DoNotUse_default_instance_;
}  // namespace ai_bots
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ai_bots {

// ===================================================================


// -------------------------------------------------------------------

class Metadata_UserDataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Metadata_UserDataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Metadata_UserDataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Metadata_UserDataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Metadata_UserDataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Metadata_UserDataEntry_DoNotUse*>(
        &_Metadata_UserDataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_voice_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AudioResponse_VariablesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AudioResponse_VariablesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioResponse_VariablesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AudioResponse_VariablesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AudioResponse_VariablesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AudioResponse_VariablesEntry_DoNotUse*>(
        &_AudioResponse_VariablesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_voice_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      53, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AudioData final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ai_bots.AudioData) */ {
 public:
  inline AudioData() : AudioData(nullptr) {}
  ~AudioData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AudioData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AudioData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioData(
      ::google::protobuf::internal::ConstantInitialized);

  inline AudioData(const AudioData& from) : AudioData(nullptr, from) {}
  inline AudioData(AudioData&& from) noexcept
      : AudioData(nullptr, std::move(from)) {}
  inline AudioData& operator=(const AudioData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioData& operator=(AudioData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioData* internal_default_instance() {
    return reinterpret_cast<const AudioData*>(
        &_AudioData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AudioData& a, AudioData& b) { a.Swap(&b); }
  inline void Swap(AudioData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AudioData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AudioData& from) { AudioData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AudioData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ai_bots.AudioData"; }

 protected:
  explicit AudioData(::google::protobuf::Arena* arena);
  AudioData(::google::protobuf::Arena* arena, const AudioData& from);
  AudioData(::google::protobuf::Arena* arena, AudioData&& from) noexcept
      : AudioData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConversationIdFieldNumber = 1,
    kAudioBytesFieldNumber = 2,
  };
  // string conversation_id = 1;
  void clear_conversation_id() ;
  const std::string& conversation_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conversation_id(Arg_&& arg, Args_... args);
  std::string* mutable_conversation_id();
  PROTOBUF_NODISCARD std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* value);

  private:
  const std::string& _internal_conversation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(
      const std::string& value);
  std::string* _internal_mutable_conversation_id();

  public:
  // bytes audio_bytes = 2;
  void clear_audio_bytes() ;
  const std::string& audio_bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_audio_bytes();
  PROTOBUF_NODISCARD std::string* release_audio_bytes();
  void set_allocated_audio_bytes(std::string* value);

  private:
  const std::string& _internal_audio_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_bytes(
      const std::string& value);
  std::string* _internal_mutable_audio_bytes();

  public:
  // @@protoc_insertion_point(class_scope:ai_bots.AudioData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AudioData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr conversation_id_;
    ::google::protobuf::internal::ArenaStringPtr audio_bytes_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_voice_2eproto;
};
// -------------------------------------------------------------------

class Metadata final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ai_bots.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Metadata* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Metadata));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Metadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline Metadata(const Metadata& from) : Metadata(nullptr, from) {}
  inline Metadata(Metadata&& from) noexcept
      : Metadata(nullptr, std::move(from)) {}
  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
        &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Metadata& a, Metadata& b) { a.Swap(&b); }
  inline void Swap(Metadata* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Metadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Metadata& from) { Metadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Metadata* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ai_bots.Metadata"; }

 protected:
  explicit Metadata(::google::protobuf::Arena* arena);
  Metadata(::google::protobuf::Arena* arena, const Metadata& from);
  Metadata(::google::protobuf::Arena* arena, Metadata&& from) noexcept
      : Metadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserDataFieldNumber = 3,
    kConversationIdFieldNumber = 1,
    kInitialAiMessageFieldNumber = 2,
    kRateFieldNumber = 4,
  };
  // map<string, string> user_data = 3;
  int user_data_size() const;
  private:
  int _internal_user_data_size() const;

  public:
  void clear_user_data() ;
  const ::google::protobuf::Map<std::string, std::string>& user_data() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_user_data();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_user_data() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_user_data();

  public:
  // string conversation_id = 1;
  void clear_conversation_id() ;
  const std::string& conversation_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conversation_id(Arg_&& arg, Args_... args);
  std::string* mutable_conversation_id();
  PROTOBUF_NODISCARD std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* value);

  private:
  const std::string& _internal_conversation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(
      const std::string& value);
  std::string* _internal_mutable_conversation_id();

  public:
  // string initial_ai_message = 2;
  void clear_initial_ai_message() ;
  const std::string& initial_ai_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_initial_ai_message(Arg_&& arg, Args_... args);
  std::string* mutable_initial_ai_message();
  PROTOBUF_NODISCARD std::string* release_initial_ai_message();
  void set_allocated_initial_ai_message(std::string* value);

  private:
  const std::string& _internal_initial_ai_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initial_ai_message(
      const std::string& value);
  std::string* _internal_mutable_initial_ai_message();

  public:
  // string rate = 4;
  void clear_rate() ;
  const std::string& rate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rate(Arg_&& arg, Args_... args);
  std::string* mutable_rate();
  PROTOBUF_NODISCARD std::string* release_rate();
  void set_allocated_rate(std::string* value);

  private:
  const std::string& _internal_rate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rate(
      const std::string& value);
  std::string* _internal_mutable_rate();

  public:
  // @@protoc_insertion_point(class_scope:ai_bots.Metadata)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      71, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Metadata& from_msg);
    ::google::protobuf::internal::MapField<Metadata_UserDataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        user_data_;
    ::google::protobuf::internal::ArenaStringPtr conversation_id_;
    ::google::protobuf::internal::ArenaStringPtr initial_ai_message_;
    ::google::protobuf::internal::ArenaStringPtr rate_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_voice_2eproto;
};
// -------------------------------------------------------------------

class AudioResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ai_bots.AudioResponse) */ {
 public:
  inline AudioResponse() : AudioResponse(nullptr) {}
  ~AudioResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AudioResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AudioResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline AudioResponse(const AudioResponse& from) : AudioResponse(nullptr, from) {}
  inline AudioResponse(AudioResponse&& from) noexcept
      : AudioResponse(nullptr, std::move(from)) {}
  inline AudioResponse& operator=(const AudioResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioResponse& operator=(AudioResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioResponse* internal_default_instance() {
    return reinterpret_cast<const AudioResponse*>(
        &_AudioResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(AudioResponse& a, AudioResponse& b) { a.Swap(&b); }
  inline void Swap(AudioResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AudioResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AudioResponse& from) { AudioResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AudioResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ai_bots.AudioResponse"; }

 protected:
  explicit AudioResponse(::google::protobuf::Arena* arena);
  AudioResponse(::google::protobuf::Arena* arena, const AudioResponse& from);
  AudioResponse(::google::protobuf::Arena* arena, AudioResponse&& from) noexcept
      : AudioResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVariablesFieldNumber = 5,
    kConversationIdFieldNumber = 1,
    kAudioDataFieldNumber = 2,
    kStopTalkFieldNumber = 3,
    kEndConversationFieldNumber = 4,
  };
  // map<string, string> variables = 5;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  const ::google::protobuf::Map<std::string, std::string>& variables() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_variables();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_variables() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_variables();

  public:
  // string conversation_id = 1;
  void clear_conversation_id() ;
  const std::string& conversation_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conversation_id(Arg_&& arg, Args_... args);
  std::string* mutable_conversation_id();
  PROTOBUF_NODISCARD std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* value);

  private:
  const std::string& _internal_conversation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(
      const std::string& value);
  std::string* _internal_mutable_conversation_id();

  public:
  // bytes audio_data = 2;
  void clear_audio_data() ;
  const std::string& audio_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio_data(Arg_&& arg, Args_... args);
  std::string* mutable_audio_data();
  PROTOBUF_NODISCARD std::string* release_audio_data();
  void set_allocated_audio_data(std::string* value);

  private:
  const std::string& _internal_audio_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_data(
      const std::string& value);
  std::string* _internal_mutable_audio_data();

  public:
  // bool stop_talk = 3;
  void clear_stop_talk() ;
  bool stop_talk() const;
  void set_stop_talk(bool value);

  private:
  bool _internal_stop_talk() const;
  void _internal_set_stop_talk(bool value);

  public:
  // bool end_conversation = 4;
  void clear_end_conversation() ;
  bool end_conversation() const;
  void set_end_conversation(bool value);

  private:
  bool _internal_end_conversation() const;
  void _internal_set_end_conversation(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ai_bots.AudioResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 1,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AudioResponse& from_msg);
    ::google::protobuf::internal::MapField<AudioResponse_VariablesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        variables_;
    ::google::protobuf::internal::ArenaStringPtr conversation_id_;
    ::google::protobuf::internal::ArenaStringPtr audio_data_;
    bool stop_talk_;
    bool end_conversation_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_voice_2eproto;
};
// -------------------------------------------------------------------

class AudioRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ai_bots.AudioRequest) */ {
 public:
  inline AudioRequest() : AudioRequest(nullptr) {}
  ~AudioRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AudioRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AudioRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AudioRequest(const AudioRequest& from) : AudioRequest(nullptr, from) {}
  inline AudioRequest(AudioRequest&& from) noexcept
      : AudioRequest(nullptr, std::move(from)) {}
  inline AudioRequest& operator=(const AudioRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioRequest& operator=(AudioRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kMetadata = 1,
    kAudiodata = 2,
    DATA_NOT_SET = 0,
  };
  static inline const AudioRequest* internal_default_instance() {
    return reinterpret_cast<const AudioRequest*>(
        &_AudioRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AudioRequest& a, AudioRequest& b) { a.Swap(&b); }
  inline void Swap(AudioRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AudioRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AudioRequest& from) { AudioRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AudioRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ai_bots.AudioRequest"; }

 protected:
  explicit AudioRequest(::google::protobuf::Arena* arena);
  AudioRequest(::google::protobuf::Arena* arena, const AudioRequest& from);
  AudioRequest(::google::protobuf::Arena* arena, AudioRequest&& from) noexcept
      : AudioRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 1,
    kAudiodataFieldNumber = 2,
  };
  // .ai_bots.Metadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;

  public:
  void clear_metadata() ;
  const ::ai_bots::Metadata& metadata() const;
  PROTOBUF_NODISCARD ::ai_bots::Metadata* release_metadata();
  ::ai_bots::Metadata* mutable_metadata();
  void set_allocated_metadata(::ai_bots::Metadata* value);
  void unsafe_arena_set_allocated_metadata(::ai_bots::Metadata* value);
  ::ai_bots::Metadata* unsafe_arena_release_metadata();

  private:
  const ::ai_bots::Metadata& _internal_metadata() const;
  ::ai_bots::Metadata* _internal_mutable_metadata();

  public:
  // .ai_bots.AudioData audiodata = 2;
  bool has_audiodata() const;
  private:
  bool _internal_has_audiodata() const;

  public:
  void clear_audiodata() ;
  const ::ai_bots::AudioData& audiodata() const;
  PROTOBUF_NODISCARD ::ai_bots::AudioData* release_audiodata();
  ::ai_bots::AudioData* mutable_audiodata();
  void set_allocated_audiodata(::ai_bots::AudioData* value);
  void unsafe_arena_set_allocated_audiodata(::ai_bots::AudioData* value);
  ::ai_bots::AudioData* unsafe_arena_release_audiodata();

  private:
  const ::ai_bots::AudioData& _internal_audiodata() const;
  ::ai_bots::AudioData* _internal_mutable_audiodata();

  public:
  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:ai_bots.AudioRequest)
 private:
  class _Internal;
  void set_has_metadata();
  void set_has_audiodata();
  inline bool has_data() const;
  inline void clear_has_data();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AudioRequest& from_msg);
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::ai_bots::Metadata* metadata_;
      ::ai_bots::AudioData* audiodata_;
    } data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_voice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Metadata

// string conversation_id = 1;
inline void Metadata::clear_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.ClearToEmpty();
}
inline const std::string& Metadata::conversation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.Metadata.conversation_id)
  return _internal_conversation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_conversation_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai_bots.Metadata.conversation_id)
}
inline std::string* Metadata::mutable_conversation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:ai_bots.Metadata.conversation_id)
  return _s;
}
inline const std::string& Metadata::_internal_conversation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conversation_id_.Get();
}
inline void Metadata::_internal_set_conversation_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.conversation_id_.Mutable( GetArena());
}
inline std::string* Metadata::release_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ai_bots.Metadata.conversation_id)
  return _impl_.conversation_id_.Release();
}
inline void Metadata::set_allocated_conversation_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ai_bots.Metadata.conversation_id)
}

// string initial_ai_message = 2;
inline void Metadata::clear_initial_ai_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initial_ai_message_.ClearToEmpty();
}
inline const std::string& Metadata::initial_ai_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.Metadata.initial_ai_message)
  return _internal_initial_ai_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_initial_ai_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initial_ai_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai_bots.Metadata.initial_ai_message)
}
inline std::string* Metadata::mutable_initial_ai_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_initial_ai_message();
  // @@protoc_insertion_point(field_mutable:ai_bots.Metadata.initial_ai_message)
  return _s;
}
inline const std::string& Metadata::_internal_initial_ai_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.initial_ai_message_.Get();
}
inline void Metadata::_internal_set_initial_ai_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initial_ai_message_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_initial_ai_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.initial_ai_message_.Mutable( GetArena());
}
inline std::string* Metadata::release_initial_ai_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ai_bots.Metadata.initial_ai_message)
  return _impl_.initial_ai_message_.Release();
}
inline void Metadata::set_allocated_initial_ai_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initial_ai_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.initial_ai_message_.IsDefault()) {
    _impl_.initial_ai_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ai_bots.Metadata.initial_ai_message)
}

// map<string, string> user_data = 3;
inline int Metadata::_internal_user_data_size() const {
  return _internal_user_data().size();
}
inline int Metadata::user_data_size() const {
  return _internal_user_data_size();
}
inline void Metadata::clear_user_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_data_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Metadata::_internal_user_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_data_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Metadata::user_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:ai_bots.Metadata.user_data)
  return _internal_user_data();
}
inline ::google::protobuf::Map<std::string, std::string>* Metadata::_internal_mutable_user_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_data_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Metadata::mutable_user_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:ai_bots.Metadata.user_data)
  return _internal_mutable_user_data();
}

// string rate = 4;
inline void Metadata::clear_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_.ClearToEmpty();
}
inline const std::string& Metadata::rate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.Metadata.rate)
  return _internal_rate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_rate(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai_bots.Metadata.rate)
}
inline std::string* Metadata::mutable_rate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rate();
  // @@protoc_insertion_point(field_mutable:ai_bots.Metadata.rate)
  return _s;
}
inline const std::string& Metadata::_internal_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rate_.Get();
}
inline void Metadata::_internal_set_rate(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_.Set(value, GetArena());
}
inline std::string* Metadata::_internal_mutable_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rate_.Mutable( GetArena());
}
inline std::string* Metadata::release_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ai_bots.Metadata.rate)
  return _impl_.rate_.Release();
}
inline void Metadata::set_allocated_rate(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.rate_.IsDefault()) {
    _impl_.rate_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ai_bots.Metadata.rate)
}

// -------------------------------------------------------------------

// AudioData

// string conversation_id = 1;
inline void AudioData::clear_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.ClearToEmpty();
}
inline const std::string& AudioData::conversation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.AudioData.conversation_id)
  return _internal_conversation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AudioData::set_conversation_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai_bots.AudioData.conversation_id)
}
inline std::string* AudioData::mutable_conversation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:ai_bots.AudioData.conversation_id)
  return _s;
}
inline const std::string& AudioData::_internal_conversation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conversation_id_.Get();
}
inline void AudioData::_internal_set_conversation_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(value, GetArena());
}
inline std::string* AudioData::_internal_mutable_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.conversation_id_.Mutable( GetArena());
}
inline std::string* AudioData::release_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ai_bots.AudioData.conversation_id)
  return _impl_.conversation_id_.Release();
}
inline void AudioData::set_allocated_conversation_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ai_bots.AudioData.conversation_id)
}

// bytes audio_bytes = 2;
inline void AudioData::clear_audio_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_bytes_.ClearToEmpty();
}
inline const std::string& AudioData::audio_bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.AudioData.audio_bytes)
  return _internal_audio_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AudioData::set_audio_bytes(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai_bots.AudioData.audio_bytes)
}
inline std::string* AudioData::mutable_audio_bytes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audio_bytes();
  // @@protoc_insertion_point(field_mutable:ai_bots.AudioData.audio_bytes)
  return _s;
}
inline const std::string& AudioData::_internal_audio_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.audio_bytes_.Get();
}
inline void AudioData::_internal_set_audio_bytes(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_bytes_.Set(value, GetArena());
}
inline std::string* AudioData::_internal_mutable_audio_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.audio_bytes_.Mutable( GetArena());
}
inline std::string* AudioData::release_audio_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ai_bots.AudioData.audio_bytes)
  return _impl_.audio_bytes_.Release();
}
inline void AudioData::set_allocated_audio_bytes(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_bytes_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.audio_bytes_.IsDefault()) {
    _impl_.audio_bytes_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ai_bots.AudioData.audio_bytes)
}

// -------------------------------------------------------------------

// AudioRequest

// .ai_bots.Metadata metadata = 1;
inline bool AudioRequest::has_metadata() const {
  return data_case() == kMetadata;
}
inline bool AudioRequest::_internal_has_metadata() const {
  return data_case() == kMetadata;
}
inline void AudioRequest::set_has_metadata() {
  _impl_._oneof_case_[0] = kMetadata;
}
inline void AudioRequest::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() == kMetadata) {
    if (GetArena() == nullptr) {
      delete _impl_.data_.metadata_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.metadata_);
    }
    clear_has_data();
  }
}
inline ::ai_bots::Metadata* AudioRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:ai_bots.AudioRequest.metadata)
  if (data_case() == kMetadata) {
    clear_has_data();
    auto* temp = _impl_.data_.metadata_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ai_bots::Metadata& AudioRequest::_internal_metadata() const {
  return data_case() == kMetadata ? *_impl_.data_.metadata_ : reinterpret_cast<::ai_bots::Metadata&>(::ai_bots::_Metadata_default_instance_);
}
inline const ::ai_bots::Metadata& AudioRequest::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.AudioRequest.metadata)
  return _internal_metadata();
}
inline ::ai_bots::Metadata* AudioRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ai_bots.AudioRequest.metadata)
  if (data_case() == kMetadata) {
    clear_has_data();
    auto* temp = _impl_.data_.metadata_;
    _impl_.data_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AudioRequest::unsafe_arena_set_allocated_metadata(::ai_bots::Metadata* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_data();
  if (value) {
    set_has_metadata();
    _impl_.data_.metadata_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai_bots.AudioRequest.metadata)
}
inline ::ai_bots::Metadata* AudioRequest::_internal_mutable_metadata() {
  if (data_case() != kMetadata) {
    clear_data();
    set_has_metadata();
    _impl_.data_.metadata_ =
        ::google::protobuf::Message::DefaultConstruct<::ai_bots::Metadata>(GetArena());
  }
  return _impl_.data_.metadata_;
}
inline ::ai_bots::Metadata* AudioRequest::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai_bots::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:ai_bots.AudioRequest.metadata)
  return _msg;
}

// .ai_bots.AudioData audiodata = 2;
inline bool AudioRequest::has_audiodata() const {
  return data_case() == kAudiodata;
}
inline bool AudioRequest::_internal_has_audiodata() const {
  return data_case() == kAudiodata;
}
inline void AudioRequest::set_has_audiodata() {
  _impl_._oneof_case_[0] = kAudiodata;
}
inline void AudioRequest::clear_audiodata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() == kAudiodata) {
    if (GetArena() == nullptr) {
      delete _impl_.data_.audiodata_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.audiodata_);
    }
    clear_has_data();
  }
}
inline ::ai_bots::AudioData* AudioRequest::release_audiodata() {
  // @@protoc_insertion_point(field_release:ai_bots.AudioRequest.audiodata)
  if (data_case() == kAudiodata) {
    clear_has_data();
    auto* temp = _impl_.data_.audiodata_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.audiodata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ai_bots::AudioData& AudioRequest::_internal_audiodata() const {
  return data_case() == kAudiodata ? *_impl_.data_.audiodata_ : reinterpret_cast<::ai_bots::AudioData&>(::ai_bots::_AudioData_default_instance_);
}
inline const ::ai_bots::AudioData& AudioRequest::audiodata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.AudioRequest.audiodata)
  return _internal_audiodata();
}
inline ::ai_bots::AudioData* AudioRequest::unsafe_arena_release_audiodata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ai_bots.AudioRequest.audiodata)
  if (data_case() == kAudiodata) {
    clear_has_data();
    auto* temp = _impl_.data_.audiodata_;
    _impl_.data_.audiodata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AudioRequest::unsafe_arena_set_allocated_audiodata(::ai_bots::AudioData* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_data();
  if (value) {
    set_has_audiodata();
    _impl_.data_.audiodata_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai_bots.AudioRequest.audiodata)
}
inline ::ai_bots::AudioData* AudioRequest::_internal_mutable_audiodata() {
  if (data_case() != kAudiodata) {
    clear_data();
    set_has_audiodata();
    _impl_.data_.audiodata_ =
        ::google::protobuf::Message::DefaultConstruct<::ai_bots::AudioData>(GetArena());
  }
  return _impl_.data_.audiodata_;
}
inline ::ai_bots::AudioData* AudioRequest::mutable_audiodata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ai_bots::AudioData* _msg = _internal_mutable_audiodata();
  // @@protoc_insertion_point(field_mutable:ai_bots.AudioRequest.audiodata)
  return _msg;
}

inline bool AudioRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void AudioRequest::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline AudioRequest::DataCase AudioRequest::data_case() const {
  return AudioRequest::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AudioResponse

// string conversation_id = 1;
inline void AudioResponse::clear_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.ClearToEmpty();
}
inline const std::string& AudioResponse::conversation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.AudioResponse.conversation_id)
  return _internal_conversation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AudioResponse::set_conversation_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai_bots.AudioResponse.conversation_id)
}
inline std::string* AudioResponse::mutable_conversation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:ai_bots.AudioResponse.conversation_id)
  return _s;
}
inline const std::string& AudioResponse::_internal_conversation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conversation_id_.Get();
}
inline void AudioResponse::_internal_set_conversation_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(value, GetArena());
}
inline std::string* AudioResponse::_internal_mutable_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.conversation_id_.Mutable( GetArena());
}
inline std::string* AudioResponse::release_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ai_bots.AudioResponse.conversation_id)
  return _impl_.conversation_id_.Release();
}
inline void AudioResponse::set_allocated_conversation_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ai_bots.AudioResponse.conversation_id)
}

// bytes audio_data = 2;
inline void AudioResponse::clear_audio_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_data_.ClearToEmpty();
}
inline const std::string& AudioResponse::audio_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ai_bots.AudioResponse.audio_data)
  return _internal_audio_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AudioResponse::set_audio_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ai_bots.AudioResponse.audio_data)
}
inline std::string* AudioResponse::mutable_audio_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audio_data();
  // @@protoc_insertion_point(field_mutable:ai_bots.AudioResponse.audio_data)
  return _s;
}
inline const std::string& AudioResponse::_internal_audio_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.audio_data_.Get();
}
inline void AudioResponse::_internal_set_audio_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_data_.Set(value, GetArena());
}
inline std::string* AudioResponse::_internal_mutable_audio_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.audio_data_.Mutable( GetArena());
}
inline std::string* AudioResponse::release_audio_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ai_bots.AudioResponse.audio_data)
  return _impl_.audio_data_.Release();
}
inline void AudioResponse::set_allocated_audio_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.audio_data_.IsDefault()) {
    _impl_.audio_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ai_bots.AudioResponse.audio_data)
}

// bool stop_talk = 3;
inline void AudioResponse::clear_stop_talk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stop_talk_ = false;
}
inline bool AudioResponse::stop_talk() const {
  // @@protoc_insertion_point(field_get:ai_bots.AudioResponse.stop_talk)
  return _internal_stop_talk();
}
inline void AudioResponse::set_stop_talk(bool value) {
  _internal_set_stop_talk(value);
  // @@protoc_insertion_point(field_set:ai_bots.AudioResponse.stop_talk)
}
inline bool AudioResponse::_internal_stop_talk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stop_talk_;
}
inline void AudioResponse::_internal_set_stop_talk(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stop_talk_ = value;
}

// bool end_conversation = 4;
inline void AudioResponse::clear_end_conversation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_conversation_ = false;
}
inline bool AudioResponse::end_conversation() const {
  // @@protoc_insertion_point(field_get:ai_bots.AudioResponse.end_conversation)
  return _internal_end_conversation();
}
inline void AudioResponse::set_end_conversation(bool value) {
  _internal_set_end_conversation(value);
  // @@protoc_insertion_point(field_set:ai_bots.AudioResponse.end_conversation)
}
inline bool AudioResponse::_internal_end_conversation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.end_conversation_;
}
inline void AudioResponse::_internal_set_end_conversation(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_conversation_ = value;
}

// map<string, string> variables = 5;
inline int AudioResponse::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int AudioResponse::variables_size() const {
  return _internal_variables_size();
}
inline void AudioResponse::clear_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.variables_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AudioResponse::_internal_variables() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.variables_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AudioResponse::variables() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:ai_bots.AudioResponse.variables)
  return _internal_variables();
}
inline ::google::protobuf::Map<std::string, std::string>* AudioResponse::_internal_mutable_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.variables_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AudioResponse::mutable_variables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:ai_bots.AudioResponse.variables)
  return _internal_mutable_variables();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ai_bots


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // voice_2eproto_2epb_2eh
