// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: fs.proto
// Protobuf C++ Version: 5.29.0

#ifndef fs_2eproto_2epb_2eh
#define fs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_fs_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_fs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_fs_2eproto;
namespace fs {
class BlindTransferRequest;
struct BlindTransferRequestDefaultTypeInternal;
extern BlindTransferRequestDefaultTypeInternal _BlindTransferRequest_default_instance_;
class BlindTransferRequest_VariablesEntry_DoNotUse;
struct BlindTransferRequest_VariablesEntry_DoNotUseDefaultTypeInternal;
extern BlindTransferRequest_VariablesEntry_DoNotUseDefaultTypeInternal _BlindTransferRequest_VariablesEntry_DoNotUse_default_instance_;
class BlindTransferResponse;
struct BlindTransferResponseDefaultTypeInternal;
extern BlindTransferResponseDefaultTypeInternal _BlindTransferResponse_default_instance_;
class BreakParkRequest;
struct BreakParkRequestDefaultTypeInternal;
extern BreakParkRequestDefaultTypeInternal _BreakParkRequest_default_instance_;
class BreakParkRequest_VariablesEntry_DoNotUse;
struct BreakParkRequest_VariablesEntry_DoNotUseDefaultTypeInternal;
extern BreakParkRequest_VariablesEntry_DoNotUseDefaultTypeInternal _BreakParkRequest_VariablesEntry_DoNotUse_default_instance_;
class BreakParkResponse;
struct BreakParkResponseDefaultTypeInternal;
extern BreakParkResponseDefaultTypeInternal _BreakParkResponse_default_instance_;
class BridgeCallRequest;
struct BridgeCallRequestDefaultTypeInternal;
extern BridgeCallRequestDefaultTypeInternal _BridgeCallRequest_default_instance_;
class BridgeCallRequest_VariablesEntry_DoNotUse;
struct BridgeCallRequest_VariablesEntry_DoNotUseDefaultTypeInternal;
extern BridgeCallRequest_VariablesEntry_DoNotUseDefaultTypeInternal _BridgeCallRequest_VariablesEntry_DoNotUse_default_instance_;
class BridgeCallResponse;
struct BridgeCallResponseDefaultTypeInternal;
extern BridgeCallResponseDefaultTypeInternal _BridgeCallResponse_default_instance_;
class BridgeRequest;
struct BridgeRequestDefaultTypeInternal;
extern BridgeRequestDefaultTypeInternal _BridgeRequest_default_instance_;
class BridgeResponse;
struct BridgeResponseDefaultTypeInternal;
extern BridgeResponseDefaultTypeInternal _BridgeResponse_default_instance_;
class BroadcastRequest;
struct BroadcastRequestDefaultTypeInternal;
extern BroadcastRequestDefaultTypeInternal _BroadcastRequest_default_instance_;
class BroadcastResponse;
struct BroadcastResponseDefaultTypeInternal;
extern BroadcastResponseDefaultTypeInternal _BroadcastResponse_default_instance_;
class ConfirmPushRequest;
struct ConfirmPushRequestDefaultTypeInternal;
extern ConfirmPushRequestDefaultTypeInternal _ConfirmPushRequest_default_instance_;
class ConfirmPushResponse;
struct ConfirmPushResponseDefaultTypeInternal;
extern ConfirmPushResponseDefaultTypeInternal _ConfirmPushResponse_default_instance_;
class ErrorExecute;
struct ErrorExecuteDefaultTypeInternal;
extern ErrorExecuteDefaultTypeInternal _ErrorExecute_default_instance_;
class ExecuteRequest;
struct ExecuteRequestDefaultTypeInternal;
extern ExecuteRequestDefaultTypeInternal _ExecuteRequest_default_instance_;
class ExecuteResponse;
struct ExecuteResponseDefaultTypeInternal;
extern ExecuteResponseDefaultTypeInternal _ExecuteResponse_default_instance_;
class HangupManyRequest;
struct HangupManyRequestDefaultTypeInternal;
extern HangupManyRequestDefaultTypeInternal _HangupManyRequest_default_instance_;
class HangupManyResponse;
struct HangupManyResponseDefaultTypeInternal;
extern HangupManyResponseDefaultTypeInternal _HangupManyResponse_default_instance_;
class HangupMatchingVarsReqeust;
struct HangupMatchingVarsReqeustDefaultTypeInternal;
extern HangupMatchingVarsReqeustDefaultTypeInternal _HangupMatchingVarsReqeust_default_instance_;
class HangupMatchingVarsReqeust_VariablesEntry_DoNotUse;
struct HangupMatchingVarsReqeust_VariablesEntry_DoNotUseDefaultTypeInternal;
extern HangupMatchingVarsReqeust_VariablesEntry_DoNotUseDefaultTypeInternal _HangupMatchingVarsReqeust_VariablesEntry_DoNotUse_default_instance_;
class HangupMatchingVarsResponse;
struct HangupMatchingVarsResponseDefaultTypeInternal;
extern HangupMatchingVarsResponseDefaultTypeInternal _HangupMatchingVarsResponse_default_instance_;
class HangupRequest;
struct HangupRequestDefaultTypeInternal;
extern HangupRequestDefaultTypeInternal _HangupRequest_default_instance_;
class HangupRequest_VariablesEntry_DoNotUse;
struct HangupRequest_VariablesEntry_DoNotUseDefaultTypeInternal;
extern HangupRequest_VariablesEntry_DoNotUseDefaultTypeInternal _HangupRequest_VariablesEntry_DoNotUse_default_instance_;
class HangupResponse;
struct HangupResponseDefaultTypeInternal;
extern HangupResponseDefaultTypeInternal _HangupResponse_default_instance_;
class HoldRequest;
struct HoldRequestDefaultTypeInternal;
extern HoldRequestDefaultTypeInternal _HoldRequest_default_instance_;
class HoldResponse;
struct HoldResponseDefaultTypeInternal;
extern HoldResponseDefaultTypeInternal _HoldResponse_default_instance_;
class OriginateRequest;
struct OriginateRequestDefaultTypeInternal;
extern OriginateRequestDefaultTypeInternal _OriginateRequest_default_instance_;
class OriginateRequest_Extension;
struct OriginateRequest_ExtensionDefaultTypeInternal;
extern OriginateRequest_ExtensionDefaultTypeInternal _OriginateRequest_Extension_default_instance_;
class OriginateRequest_VariablesEntry_DoNotUse;
struct OriginateRequest_VariablesEntry_DoNotUseDefaultTypeInternal;
extern OriginateRequest_VariablesEntry_DoNotUseDefaultTypeInternal _OriginateRequest_VariablesEntry_DoNotUse_default_instance_;
class OriginateResponse;
struct OriginateResponseDefaultTypeInternal;
extern OriginateResponseDefaultTypeInternal _OriginateResponse_default_instance_;
class QueueRequest;
struct QueueRequestDefaultTypeInternal;
extern QueueRequestDefaultTypeInternal _QueueRequest_default_instance_;
class QueueRequest_VariablesEntry_DoNotUse;
struct QueueRequest_VariablesEntry_DoNotUseDefaultTypeInternal;
extern QueueRequest_VariablesEntry_DoNotUseDefaultTypeInternal _QueueRequest_VariablesEntry_DoNotUse_default_instance_;
class QueueResponse;
struct QueueResponseDefaultTypeInternal;
extern QueueResponseDefaultTypeInternal _QueueResponse_default_instance_;
class SetEavesdropStateRequest;
struct SetEavesdropStateRequestDefaultTypeInternal;
extern SetEavesdropStateRequestDefaultTypeInternal _SetEavesdropStateRequest_default_instance_;
class SetEavesdropStateResponse;
struct SetEavesdropStateResponseDefaultTypeInternal;
extern SetEavesdropStateResponseDefaultTypeInternal _SetEavesdropStateResponse_default_instance_;
class SetProfileVarRequest;
struct SetProfileVarRequestDefaultTypeInternal;
extern SetProfileVarRequestDefaultTypeInternal _SetProfileVarRequest_default_instance_;
class SetProfileVarRequest_VariablesEntry_DoNotUse;
struct SetProfileVarRequest_VariablesEntry_DoNotUseDefaultTypeInternal;
extern SetProfileVarRequest_VariablesEntry_DoNotUseDefaultTypeInternal _SetProfileVarRequest_VariablesEntry_DoNotUse_default_instance_;
class SetProfileVarResponse;
struct SetProfileVarResponseDefaultTypeInternal;
extern SetProfileVarResponseDefaultTypeInternal _SetProfileVarResponse_default_instance_;
class SetVariablesRequest;
struct SetVariablesRequestDefaultTypeInternal;
extern SetVariablesRequestDefaultTypeInternal _SetVariablesRequest_default_instance_;
class SetVariablesRequest_VariablesEntry_DoNotUse;
struct SetVariablesRequest_VariablesEntry_DoNotUseDefaultTypeInternal;
extern SetVariablesRequest_VariablesEntry_DoNotUseDefaultTypeInternal _SetVariablesRequest_VariablesEntry_DoNotUse_default_instance_;
class SetVariablesResponse;
struct SetVariablesResponseDefaultTypeInternal;
extern SetVariablesResponseDefaultTypeInternal _SetVariablesResponse_default_instance_;
class StopPlaybackRequest;
struct StopPlaybackRequestDefaultTypeInternal;
extern StopPlaybackRequestDefaultTypeInternal _StopPlaybackRequest_default_instance_;
class StopPlaybackResponse;
struct StopPlaybackResponseDefaultTypeInternal;
extern StopPlaybackResponseDefaultTypeInternal _StopPlaybackResponse_default_instance_;
class UnHoldRequest;
struct UnHoldRequestDefaultTypeInternal;
extern UnHoldRequestDefaultTypeInternal _UnHoldRequest_default_instance_;
class UnHoldResponse;
struct UnHoldResponseDefaultTypeInternal;
extern UnHoldResponseDefaultTypeInternal _UnHoldResponse_default_instance_;
}  // namespace fs
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace fs {
enum ErrorExecute_Type : int {
  ErrorExecute_Type_ERROR = 0,
  ErrorExecute_Type_USAGE = 1,
  ErrorExecute_Type_ErrorExecute_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ErrorExecute_Type_ErrorExecute_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ErrorExecute_Type_IsValid(int value);
extern const uint32_t ErrorExecute_Type_internal_data_[];
constexpr ErrorExecute_Type ErrorExecute_Type_Type_MIN = static_cast<ErrorExecute_Type>(0);
constexpr ErrorExecute_Type ErrorExecute_Type_Type_MAX = static_cast<ErrorExecute_Type>(1);
constexpr int ErrorExecute_Type_Type_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
ErrorExecute_Type_descriptor();
template <typename T>
const std::string& ErrorExecute_Type_Name(T value) {
  static_assert(std::is_same<T, ErrorExecute_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return ErrorExecute_Type_Name(static_cast<ErrorExecute_Type>(value));
}
template <>
inline const std::string& ErrorExecute_Type_Name(ErrorExecute_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ErrorExecute_Type_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool ErrorExecute_Type_Parse(absl::string_view name, ErrorExecute_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorExecute_Type>(
      ErrorExecute_Type_descriptor(), name, value);
}
enum OriginateRequest_Strategy : int {
  OriginateRequest_Strategy_FAILOVER = 0,
  OriginateRequest_Strategy_MULTIPLE = 1,
  OriginateRequest_Strategy_OriginateRequest_Strategy_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OriginateRequest_Strategy_OriginateRequest_Strategy_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OriginateRequest_Strategy_IsValid(int value);
extern const uint32_t OriginateRequest_Strategy_internal_data_[];
constexpr OriginateRequest_Strategy OriginateRequest_Strategy_Strategy_MIN = static_cast<OriginateRequest_Strategy>(0);
constexpr OriginateRequest_Strategy OriginateRequest_Strategy_Strategy_MAX = static_cast<OriginateRequest_Strategy>(1);
constexpr int OriginateRequest_Strategy_Strategy_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
OriginateRequest_Strategy_descriptor();
template <typename T>
const std::string& OriginateRequest_Strategy_Name(T value) {
  static_assert(std::is_same<T, OriginateRequest_Strategy>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Strategy_Name().");
  return OriginateRequest_Strategy_Name(static_cast<OriginateRequest_Strategy>(value));
}
template <>
inline const std::string& OriginateRequest_Strategy_Name(OriginateRequest_Strategy value) {
  return ::google::protobuf::internal::NameOfDenseEnum<OriginateRequest_Strategy_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool OriginateRequest_Strategy_Parse(absl::string_view name, OriginateRequest_Strategy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OriginateRequest_Strategy>(
      OriginateRequest_Strategy_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UnHoldResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.UnHoldResponse) */ {
 public:
  inline UnHoldResponse() : UnHoldResponse(nullptr) {}
  ~UnHoldResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UnHoldResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UnHoldResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UnHoldResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UnHoldResponse(const UnHoldResponse& from) : UnHoldResponse(nullptr, from) {}
  inline UnHoldResponse(UnHoldResponse&& from) noexcept
      : UnHoldResponse(nullptr, std::move(from)) {}
  inline UnHoldResponse& operator=(const UnHoldResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnHoldResponse& operator=(UnHoldResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnHoldResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnHoldResponse* internal_default_instance() {
    return reinterpret_cast<const UnHoldResponse*>(
        &_UnHoldResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(UnHoldResponse& a, UnHoldResponse& b) { a.Swap(&b); }
  inline void Swap(UnHoldResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnHoldResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnHoldResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UnHoldResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UnHoldResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UnHoldResponse& from) { UnHoldResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UnHoldResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.UnHoldResponse"; }

 protected:
  explicit UnHoldResponse(::google::protobuf::Arena* arena);
  UnHoldResponse(::google::protobuf::Arena* arena, const UnHoldResponse& from);
  UnHoldResponse(::google::protobuf::Arena* arena, UnHoldResponse&& from) noexcept
      : UnHoldResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // repeated string id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;

  public:
  void clear_id() ;
  const std::string& id(int index) const;
  std::string* mutable_id(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(int index, Arg_&& value, Args_... args);
  std::string* add_id();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_id(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_id();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:fs.UnHoldResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      28, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UnHoldResponse& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class UnHoldRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.UnHoldRequest) */ {
 public:
  inline UnHoldRequest() : UnHoldRequest(nullptr) {}
  ~UnHoldRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UnHoldRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UnHoldRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UnHoldRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UnHoldRequest(const UnHoldRequest& from) : UnHoldRequest(nullptr, from) {}
  inline UnHoldRequest(UnHoldRequest&& from) noexcept
      : UnHoldRequest(nullptr, std::move(from)) {}
  inline UnHoldRequest& operator=(const UnHoldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnHoldRequest& operator=(UnHoldRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnHoldRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnHoldRequest* internal_default_instance() {
    return reinterpret_cast<const UnHoldRequest*>(
        &_UnHoldRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(UnHoldRequest& a, UnHoldRequest& b) { a.Swap(&b); }
  inline void Swap(UnHoldRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnHoldRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnHoldRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UnHoldRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UnHoldRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UnHoldRequest& from) { UnHoldRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UnHoldRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.UnHoldRequest"; }

 protected:
  explicit UnHoldRequest(::google::protobuf::Arena* arena);
  UnHoldRequest(::google::protobuf::Arena* arena, const UnHoldRequest& from);
  UnHoldRequest(::google::protobuf::Arena* arena, UnHoldRequest&& from) noexcept
      : UnHoldRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // repeated string id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;

  public:
  void clear_id() ;
  const std::string& id(int index) const;
  std::string* mutable_id(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(int index, Arg_&& value, Args_... args);
  std::string* add_id();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_id(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_id();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:fs.UnHoldRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      27, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UnHoldRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class StopPlaybackResponse final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:fs.StopPlaybackResponse) */ {
 public:
  inline StopPlaybackResponse() : StopPlaybackResponse(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StopPlaybackResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StopPlaybackResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StopPlaybackResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline StopPlaybackResponse(const StopPlaybackResponse& from) : StopPlaybackResponse(nullptr, from) {}
  inline StopPlaybackResponse(StopPlaybackResponse&& from) noexcept
      : StopPlaybackResponse(nullptr, std::move(from)) {}
  inline StopPlaybackResponse& operator=(const StopPlaybackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopPlaybackResponse& operator=(StopPlaybackResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopPlaybackResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopPlaybackResponse* internal_default_instance() {
    return reinterpret_cast<const StopPlaybackResponse*>(
        &_StopPlaybackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(StopPlaybackResponse& a, StopPlaybackResponse& b) { a.Swap(&b); }
  inline void Swap(StopPlaybackResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopPlaybackResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopPlaybackResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<StopPlaybackResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StopPlaybackResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StopPlaybackResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.StopPlaybackResponse"; }

 protected:
  explicit StopPlaybackResponse(::google::protobuf::Arena* arena);
  StopPlaybackResponse(::google::protobuf::Arena* arena, const StopPlaybackResponse& from);
  StopPlaybackResponse(::google::protobuf::Arena* arena, StopPlaybackResponse&& from) noexcept
      : StopPlaybackResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:fs.StopPlaybackResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StopPlaybackResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class StopPlaybackRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.StopPlaybackRequest) */ {
 public:
  inline StopPlaybackRequest() : StopPlaybackRequest(nullptr) {}
  ~StopPlaybackRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StopPlaybackRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StopPlaybackRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StopPlaybackRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline StopPlaybackRequest(const StopPlaybackRequest& from) : StopPlaybackRequest(nullptr, from) {}
  inline StopPlaybackRequest(StopPlaybackRequest&& from) noexcept
      : StopPlaybackRequest(nullptr, std::move(from)) {}
  inline StopPlaybackRequest& operator=(const StopPlaybackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopPlaybackRequest& operator=(StopPlaybackRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopPlaybackRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopPlaybackRequest* internal_default_instance() {
    return reinterpret_cast<const StopPlaybackRequest*>(
        &_StopPlaybackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(StopPlaybackRequest& a, StopPlaybackRequest& b) { a.Swap(&b); }
  inline void Swap(StopPlaybackRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopPlaybackRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopPlaybackRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StopPlaybackRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StopPlaybackRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StopPlaybackRequest& from) { StopPlaybackRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StopPlaybackRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.StopPlaybackRequest"; }

 protected:
  explicit StopPlaybackRequest(::google::protobuf::Arena* arena);
  StopPlaybackRequest(::google::protobuf::Arena* arena, const StopPlaybackRequest& from);
  StopPlaybackRequest(::google::protobuf::Arena* arena, StopPlaybackRequest&& from) noexcept
      : StopPlaybackRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:fs.StopPlaybackRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      33, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StopPlaybackRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class SetVariablesRequest_VariablesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  SetVariablesRequest_VariablesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetVariablesRequest_VariablesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit SetVariablesRequest_VariablesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const SetVariablesRequest_VariablesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const SetVariablesRequest_VariablesEntry_DoNotUse*>(
        &_SetVariablesRequest_VariablesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_fs_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      54, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class SetProfileVarResponse final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:fs.SetProfileVarResponse) */ {
 public:
  inline SetProfileVarResponse() : SetProfileVarResponse(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetProfileVarResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetProfileVarResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetProfileVarResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetProfileVarResponse(const SetProfileVarResponse& from) : SetProfileVarResponse(nullptr, from) {}
  inline SetProfileVarResponse(SetProfileVarResponse&& from) noexcept
      : SetProfileVarResponse(nullptr, std::move(from)) {}
  inline SetProfileVarResponse& operator=(const SetProfileVarResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetProfileVarResponse& operator=(SetProfileVarResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetProfileVarResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetProfileVarResponse* internal_default_instance() {
    return reinterpret_cast<const SetProfileVarResponse*>(
        &_SetProfileVarResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(SetProfileVarResponse& a, SetProfileVarResponse& b) { a.Swap(&b); }
  inline void Swap(SetProfileVarResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetProfileVarResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetProfileVarResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<SetProfileVarResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetProfileVarResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetProfileVarResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.SetProfileVarResponse"; }

 protected:
  explicit SetProfileVarResponse(::google::protobuf::Arena* arena);
  SetProfileVarResponse(::google::protobuf::Arena* arena, const SetProfileVarResponse& from);
  SetProfileVarResponse(::google::protobuf::Arena* arena, SetProfileVarResponse&& from) noexcept
      : SetProfileVarResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:fs.SetProfileVarResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetProfileVarResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class SetProfileVarRequest_VariablesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  SetProfileVarRequest_VariablesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetProfileVarRequest_VariablesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit SetProfileVarRequest_VariablesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const SetProfileVarRequest_VariablesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const SetProfileVarRequest_VariablesEntry_DoNotUse*>(
        &_SetProfileVarRequest_VariablesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_fs_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      55, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class SetEavesdropStateRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.SetEavesdropStateRequest) */ {
 public:
  inline SetEavesdropStateRequest() : SetEavesdropStateRequest(nullptr) {}
  ~SetEavesdropStateRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetEavesdropStateRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetEavesdropStateRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetEavesdropStateRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetEavesdropStateRequest(const SetEavesdropStateRequest& from) : SetEavesdropStateRequest(nullptr, from) {}
  inline SetEavesdropStateRequest(SetEavesdropStateRequest&& from) noexcept
      : SetEavesdropStateRequest(nullptr, std::move(from)) {}
  inline SetEavesdropStateRequest& operator=(const SetEavesdropStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEavesdropStateRequest& operator=(SetEavesdropStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetEavesdropStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetEavesdropStateRequest* internal_default_instance() {
    return reinterpret_cast<const SetEavesdropStateRequest*>(
        &_SetEavesdropStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(SetEavesdropStateRequest& a, SetEavesdropStateRequest& b) { a.Swap(&b); }
  inline void Swap(SetEavesdropStateRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetEavesdropStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetEavesdropStateRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetEavesdropStateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetEavesdropStateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetEavesdropStateRequest& from) { SetEavesdropStateRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetEavesdropStateRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.SetEavesdropStateRequest"; }

 protected:
  explicit SetEavesdropStateRequest(::google::protobuf::Arena* arena);
  SetEavesdropStateRequest(::google::protobuf::Arena* arena, const SetEavesdropStateRequest& from);
  SetEavesdropStateRequest(::google::protobuf::Arena* arena, SetEavesdropStateRequest&& from) noexcept
      : SetEavesdropStateRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string state = 2;
  void clear_state() ;
  const std::string& state() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* value);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // @@protoc_insertion_point(class_scope:fs.SetEavesdropStateRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetEavesdropStateRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr state_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class QueueRequest_VariablesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  QueueRequest_VariablesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueueRequest_VariablesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit QueueRequest_VariablesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const QueueRequest_VariablesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const QueueRequest_VariablesEntry_DoNotUse*>(
        &_QueueRequest_VariablesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_fs_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class OriginateRequest_VariablesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  OriginateRequest_VariablesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OriginateRequest_VariablesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit OriginateRequest_VariablesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const OriginateRequest_VariablesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const OriginateRequest_VariablesEntry_DoNotUse*>(
        &_OriginateRequest_VariablesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_fs_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class OriginateRequest_Extension final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.OriginateRequest.Extension) */ {
 public:
  inline OriginateRequest_Extension() : OriginateRequest_Extension(nullptr) {}
  ~OriginateRequest_Extension() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OriginateRequest_Extension* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OriginateRequest_Extension));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OriginateRequest_Extension(
      ::google::protobuf::internal::ConstantInitialized);

  inline OriginateRequest_Extension(const OriginateRequest_Extension& from) : OriginateRequest_Extension(nullptr, from) {}
  inline OriginateRequest_Extension(OriginateRequest_Extension&& from) noexcept
      : OriginateRequest_Extension(nullptr, std::move(from)) {}
  inline OriginateRequest_Extension& operator=(const OriginateRequest_Extension& from) {
    CopyFrom(from);
    return *this;
  }
  inline OriginateRequest_Extension& operator=(OriginateRequest_Extension&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OriginateRequest_Extension& default_instance() {
    return *internal_default_instance();
  }
  static inline const OriginateRequest_Extension* internal_default_instance() {
    return reinterpret_cast<const OriginateRequest_Extension*>(
        &_OriginateRequest_Extension_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 35;
  friend void swap(OriginateRequest_Extension& a, OriginateRequest_Extension& b) { a.Swap(&b); }
  inline void Swap(OriginateRequest_Extension* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OriginateRequest_Extension* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OriginateRequest_Extension* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OriginateRequest_Extension>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OriginateRequest_Extension& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OriginateRequest_Extension& from) { OriginateRequest_Extension::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OriginateRequest_Extension* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.OriginateRequest.Extension"; }

 protected:
  explicit OriginateRequest_Extension(::google::protobuf::Arena* arena);
  OriginateRequest_Extension(::google::protobuf::Arena* arena, const OriginateRequest_Extension& from);
  OriginateRequest_Extension(::google::protobuf::Arena* arena, OriginateRequest_Extension&& from) noexcept
      : OriginateRequest_Extension(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAppNameFieldNumber = 1,
    kArgsFieldNumber = 2,
  };
  // string appName = 1;
  void clear_appname() ;
  const std::string& appname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_appname(Arg_&& arg, Args_... args);
  std::string* mutable_appname();
  PROTOBUF_NODISCARD std::string* release_appname();
  void set_allocated_appname(std::string* value);

  private:
  const std::string& _internal_appname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appname(
      const std::string& value);
  std::string* _internal_mutable_appname();

  public:
  // string args = 2;
  void clear_args() ;
  const std::string& args() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_args(Arg_&& arg, Args_... args);
  std::string* mutable_args();
  PROTOBUF_NODISCARD std::string* release_args();
  void set_allocated_args(std::string* value);

  private:
  const std::string& _internal_args() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_args(
      const std::string& value);
  std::string* _internal_mutable_args();

  public:
  // @@protoc_insertion_point(class_scope:fs.OriginateRequest.Extension)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OriginateRequest_Extension& from_msg);
    ::google::protobuf::internal::ArenaStringPtr appname_;
    ::google::protobuf::internal::ArenaStringPtr args_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class HoldResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.HoldResponse) */ {
 public:
  inline HoldResponse() : HoldResponse(nullptr) {}
  ~HoldResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HoldResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HoldResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HoldResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline HoldResponse(const HoldResponse& from) : HoldResponse(nullptr, from) {}
  inline HoldResponse(HoldResponse&& from) noexcept
      : HoldResponse(nullptr, std::move(from)) {}
  inline HoldResponse& operator=(const HoldResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HoldResponse& operator=(HoldResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HoldResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HoldResponse* internal_default_instance() {
    return reinterpret_cast<const HoldResponse*>(
        &_HoldResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(HoldResponse& a, HoldResponse& b) { a.Swap(&b); }
  inline void Swap(HoldResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HoldResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HoldResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HoldResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HoldResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HoldResponse& from) { HoldResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HoldResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.HoldResponse"; }

 protected:
  explicit HoldResponse(::google::protobuf::Arena* arena);
  HoldResponse(::google::protobuf::Arena* arena, const HoldResponse& from);
  HoldResponse(::google::protobuf::Arena* arena, HoldResponse&& from) noexcept
      : HoldResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // repeated string id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;

  public:
  void clear_id() ;
  const std::string& id(int index) const;
  std::string* mutable_id(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(int index, Arg_&& value, Args_... args);
  std::string* add_id();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_id(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_id();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:fs.HoldResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      26, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HoldResponse& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class HoldRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.HoldRequest) */ {
 public:
  inline HoldRequest() : HoldRequest(nullptr) {}
  ~HoldRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HoldRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HoldRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HoldRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline HoldRequest(const HoldRequest& from) : HoldRequest(nullptr, from) {}
  inline HoldRequest(HoldRequest&& from) noexcept
      : HoldRequest(nullptr, std::move(from)) {}
  inline HoldRequest& operator=(const HoldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HoldRequest& operator=(HoldRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HoldRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HoldRequest* internal_default_instance() {
    return reinterpret_cast<const HoldRequest*>(
        &_HoldRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(HoldRequest& a, HoldRequest& b) { a.Swap(&b); }
  inline void Swap(HoldRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HoldRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HoldRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HoldRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HoldRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HoldRequest& from) { HoldRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HoldRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.HoldRequest"; }

 protected:
  explicit HoldRequest(::google::protobuf::Arena* arena);
  HoldRequest(::google::protobuf::Arena* arena, const HoldRequest& from);
  HoldRequest(::google::protobuf::Arena* arena, HoldRequest&& from) noexcept
      : HoldRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // repeated string id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;

  public:
  void clear_id() ;
  const std::string& id(int index) const;
  std::string* mutable_id(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(int index, Arg_&& value, Args_... args);
  std::string* add_id();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_id(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_id();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:fs.HoldRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      25, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HoldRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class HangupRequest_VariablesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  HangupRequest_VariablesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HangupRequest_VariablesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit HangupRequest_VariablesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const HangupRequest_VariablesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const HangupRequest_VariablesEntry_DoNotUse*>(
        &_HangupRequest_VariablesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_fs_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      48, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class HangupMatchingVarsResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.HangupMatchingVarsResponse) */ {
 public:
  inline HangupMatchingVarsResponse() : HangupMatchingVarsResponse(nullptr) {}
  ~HangupMatchingVarsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HangupMatchingVarsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HangupMatchingVarsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HangupMatchingVarsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline HangupMatchingVarsResponse(const HangupMatchingVarsResponse& from) : HangupMatchingVarsResponse(nullptr, from) {}
  inline HangupMatchingVarsResponse(HangupMatchingVarsResponse&& from) noexcept
      : HangupMatchingVarsResponse(nullptr, std::move(from)) {}
  inline HangupMatchingVarsResponse& operator=(const HangupMatchingVarsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HangupMatchingVarsResponse& operator=(HangupMatchingVarsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HangupMatchingVarsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HangupMatchingVarsResponse* internal_default_instance() {
    return reinterpret_cast<const HangupMatchingVarsResponse*>(
        &_HangupMatchingVarsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 46;
  friend void swap(HangupMatchingVarsResponse& a, HangupMatchingVarsResponse& b) { a.Swap(&b); }
  inline void Swap(HangupMatchingVarsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HangupMatchingVarsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HangupMatchingVarsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HangupMatchingVarsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HangupMatchingVarsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HangupMatchingVarsResponse& from) { HangupMatchingVarsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HangupMatchingVarsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.HangupMatchingVarsResponse"; }

 protected:
  explicit HangupMatchingVarsResponse(::google::protobuf::Arena* arena);
  HangupMatchingVarsResponse(::google::protobuf::Arena* arena, const HangupMatchingVarsResponse& from);
  HangupMatchingVarsResponse(::google::protobuf::Arena* arena, HangupMatchingVarsResponse&& from) noexcept
      : HangupMatchingVarsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCountFieldNumber = 1,
  };
  // int32 count = 1;
  void clear_count() ;
  ::int32_t count() const;
  void set_count(::int32_t value);

  private:
  ::int32_t _internal_count() const;
  void _internal_set_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fs.HangupMatchingVarsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HangupMatchingVarsResponse& from_msg);
    ::int32_t count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class HangupMatchingVarsReqeust_VariablesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  HangupMatchingVarsReqeust_VariablesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HangupMatchingVarsReqeust_VariablesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit HangupMatchingVarsReqeust_VariablesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const HangupMatchingVarsReqeust_VariablesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const HangupMatchingVarsReqeust_VariablesEntry_DoNotUse*>(
        &_HangupMatchingVarsReqeust_VariablesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_fs_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      60, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class HangupManyResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.HangupManyResponse) */ {
 public:
  inline HangupManyResponse() : HangupManyResponse(nullptr) {}
  ~HangupManyResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HangupManyResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HangupManyResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HangupManyResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline HangupManyResponse(const HangupManyResponse& from) : HangupManyResponse(nullptr, from) {}
  inline HangupManyResponse(HangupManyResponse&& from) noexcept
      : HangupManyResponse(nullptr, std::move(from)) {}
  inline HangupManyResponse& operator=(const HangupManyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HangupManyResponse& operator=(HangupManyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HangupManyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HangupManyResponse* internal_default_instance() {
    return reinterpret_cast<const HangupManyResponse*>(
        &_HangupManyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(HangupManyResponse& a, HangupManyResponse& b) { a.Swap(&b); }
  inline void Swap(HangupManyResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HangupManyResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HangupManyResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HangupManyResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HangupManyResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HangupManyResponse& from) { HangupManyResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HangupManyResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.HangupManyResponse"; }

 protected:
  explicit HangupManyResponse(::google::protobuf::Arena* arena);
  HangupManyResponse(::google::protobuf::Arena* arena, const HangupManyResponse& from);
  HangupManyResponse(::google::protobuf::Arena* arena, HangupManyResponse&& from) noexcept
      : HangupManyResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // repeated string id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;

  public:
  void clear_id() ;
  const std::string& id(int index) const;
  std::string* mutable_id(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(int index, Arg_&& value, Args_... args);
  std::string* add_id();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_id(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_id();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:fs.HangupManyResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      32, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HangupManyResponse& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class HangupManyRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.HangupManyRequest) */ {
 public:
  inline HangupManyRequest() : HangupManyRequest(nullptr) {}
  ~HangupManyRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HangupManyRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HangupManyRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HangupManyRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline HangupManyRequest(const HangupManyRequest& from) : HangupManyRequest(nullptr, from) {}
  inline HangupManyRequest(HangupManyRequest&& from) noexcept
      : HangupManyRequest(nullptr, std::move(from)) {}
  inline HangupManyRequest& operator=(const HangupManyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HangupManyRequest& operator=(HangupManyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HangupManyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HangupManyRequest* internal_default_instance() {
    return reinterpret_cast<const HangupManyRequest*>(
        &_HangupManyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(HangupManyRequest& a, HangupManyRequest& b) { a.Swap(&b); }
  inline void Swap(HangupManyRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HangupManyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HangupManyRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HangupManyRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HangupManyRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HangupManyRequest& from) { HangupManyRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HangupManyRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.HangupManyRequest"; }

 protected:
  explicit HangupManyRequest(::google::protobuf::Arena* arena);
  HangupManyRequest(::google::protobuf::Arena* arena, const HangupManyRequest& from);
  HangupManyRequest(::google::protobuf::Arena* arena, HangupManyRequest&& from) noexcept
      : HangupManyRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kCauseFieldNumber = 2,
  };
  // repeated string id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;

  public:
  void clear_id() ;
  const std::string& id(int index) const;
  std::string* mutable_id(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(int index, Arg_&& value, Args_... args);
  std::string* add_id();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_id(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_id();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_id();

  public:
  // string cause = 2;
  void clear_cause() ;
  const std::string& cause() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cause(Arg_&& arg, Args_... args);
  std::string* mutable_cause();
  PROTOBUF_NODISCARD std::string* release_cause();
  void set_allocated_cause(std::string* value);

  private:
  const std::string& _internal_cause() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cause(
      const std::string& value);
  std::string* _internal_mutable_cause();

  public:
  // @@protoc_insertion_point(class_scope:fs.HangupManyRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      36, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HangupManyRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> id_;
    ::google::protobuf::internal::ArenaStringPtr cause_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class ExecuteRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.ExecuteRequest) */ {
 public:
  inline ExecuteRequest() : ExecuteRequest(nullptr) {}
  ~ExecuteRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ExecuteRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ExecuteRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ExecuteRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ExecuteRequest(const ExecuteRequest& from) : ExecuteRequest(nullptr, from) {}
  inline ExecuteRequest(ExecuteRequest&& from) noexcept
      : ExecuteRequest(nullptr, std::move(from)) {}
  inline ExecuteRequest& operator=(const ExecuteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteRequest& operator=(ExecuteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecuteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteRequest*>(
        &_ExecuteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 30;
  friend void swap(ExecuteRequest& a, ExecuteRequest& b) { a.Swap(&b); }
  inline void Swap(ExecuteRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecuteRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ExecuteRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExecuteRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ExecuteRequest& from) { ExecuteRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ExecuteRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.ExecuteRequest"; }

 protected:
  explicit ExecuteRequest(::google::protobuf::Arena* arena);
  ExecuteRequest(::google::protobuf::Arena* arena, const ExecuteRequest& from);
  ExecuteRequest(::google::protobuf::Arena* arena, ExecuteRequest&& from) noexcept
      : ExecuteRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCommandFieldNumber = 1,
    kArgsFieldNumber = 2,
  };
  // string command = 1;
  void clear_command() ;
  const std::string& command() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_command(Arg_&& arg, Args_... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* value);

  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(
      const std::string& value);
  std::string* _internal_mutable_command();

  public:
  // string args = 2;
  void clear_args() ;
  const std::string& args() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_args(Arg_&& arg, Args_... args);
  std::string* mutable_args();
  PROTOBUF_NODISCARD std::string* release_args();
  void set_allocated_args(std::string* value);

  private:
  const std::string& _internal_args() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_args(
      const std::string& value);
  std::string* _internal_mutable_args();

  public:
  // @@protoc_insertion_point(class_scope:fs.ExecuteRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ExecuteRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr command_;
    ::google::protobuf::internal::ArenaStringPtr args_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class ErrorExecute final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.ErrorExecute) */ {
 public:
  inline ErrorExecute() : ErrorExecute(nullptr) {}
  ~ErrorExecute() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ErrorExecute* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ErrorExecute));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ErrorExecute(
      ::google::protobuf::internal::ConstantInitialized);

  inline ErrorExecute(const ErrorExecute& from) : ErrorExecute(nullptr, from) {}
  inline ErrorExecute(ErrorExecute&& from) noexcept
      : ErrorExecute(nullptr, std::move(from)) {}
  inline ErrorExecute& operator=(const ErrorExecute& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorExecute& operator=(ErrorExecute&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorExecute& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorExecute* internal_default_instance() {
    return reinterpret_cast<const ErrorExecute*>(
        &_ErrorExecute_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 29;
  friend void swap(ErrorExecute& a, ErrorExecute& b) { a.Swap(&b); }
  inline void Swap(ErrorExecute* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorExecute* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ErrorExecute* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ErrorExecute>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ErrorExecute& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ErrorExecute& from) { ErrorExecute::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ErrorExecute* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.ErrorExecute"; }

 protected:
  explicit ErrorExecute(::google::protobuf::Arena* arena);
  ErrorExecute(::google::protobuf::Arena* arena, const ErrorExecute& from);
  ErrorExecute(::google::protobuf::Arena* arena, ErrorExecute&& from) noexcept
      : ErrorExecute(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = ErrorExecute_Type;
  static constexpr Type ERROR = ErrorExecute_Type_ERROR;
  static constexpr Type USAGE = ErrorExecute_Type_USAGE;
  static inline bool Type_IsValid(int value) {
    return ErrorExecute_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = ErrorExecute_Type_Type_MIN;
  static constexpr Type Type_MAX = ErrorExecute_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = ErrorExecute_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return ErrorExecute_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return ErrorExecute_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return ErrorExecute_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string message = 1;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .fs.ErrorExecute.Type type = 2;
  void clear_type() ;
  ::fs::ErrorExecute_Type type() const;
  void set_type(::fs::ErrorExecute_Type value);

  private:
  ::fs::ErrorExecute_Type _internal_type() const;
  void _internal_set_type(::fs::ErrorExecute_Type value);

  public:
  // @@protoc_insertion_point(class_scope:fs.ErrorExecute)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      31, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ErrorExecute& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class ConfirmPushRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.ConfirmPushRequest) */ {
 public:
  inline ConfirmPushRequest() : ConfirmPushRequest(nullptr) {}
  ~ConfirmPushRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfirmPushRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfirmPushRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfirmPushRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConfirmPushRequest(const ConfirmPushRequest& from) : ConfirmPushRequest(nullptr, from) {}
  inline ConfirmPushRequest(ConfirmPushRequest&& from) noexcept
      : ConfirmPushRequest(nullptr, std::move(from)) {}
  inline ConfirmPushRequest& operator=(const ConfirmPushRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfirmPushRequest& operator=(ConfirmPushRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfirmPushRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfirmPushRequest* internal_default_instance() {
    return reinterpret_cast<const ConfirmPushRequest*>(
        &_ConfirmPushRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(ConfirmPushRequest& a, ConfirmPushRequest& b) { a.Swap(&b); }
  inline void Swap(ConfirmPushRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfirmPushRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfirmPushRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfirmPushRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfirmPushRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfirmPushRequest& from) { ConfirmPushRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfirmPushRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.ConfirmPushRequest"; }

 protected:
  explicit ConfirmPushRequest(::google::protobuf::Arena* arena);
  ConfirmPushRequest(::google::protobuf::Arena* arena, const ConfirmPushRequest& from);
  ConfirmPushRequest(::google::protobuf::Arena* arena, ConfirmPushRequest&& from) noexcept
      : ConfirmPushRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:fs.ConfirmPushRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      32, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConfirmPushRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class BroadcastRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.BroadcastRequest) */ {
 public:
  inline BroadcastRequest() : BroadcastRequest(nullptr) {}
  ~BroadcastRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BroadcastRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BroadcastRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BroadcastRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline BroadcastRequest(const BroadcastRequest& from) : BroadcastRequest(nullptr, from) {}
  inline BroadcastRequest(BroadcastRequest&& from) noexcept
      : BroadcastRequest(nullptr, std::move(from)) {}
  inline BroadcastRequest& operator=(const BroadcastRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastRequest& operator=(BroadcastRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastRequest* internal_default_instance() {
    return reinterpret_cast<const BroadcastRequest*>(
        &_BroadcastRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(BroadcastRequest& a, BroadcastRequest& b) { a.Swap(&b); }
  inline void Swap(BroadcastRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BroadcastRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BroadcastRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BroadcastRequest& from) { BroadcastRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BroadcastRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.BroadcastRequest"; }

 protected:
  explicit BroadcastRequest(::google::protobuf::Arena* arena);
  BroadcastRequest(::google::protobuf::Arena* arena, const BroadcastRequest& from);
  BroadcastRequest(::google::protobuf::Arena* arena, BroadcastRequest&& from) noexcept
      : BroadcastRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kArgsFieldNumber = 2,
    kLegFieldNumber = 4,
    kWaitForAnswerFieldNumber = 3,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string args = 2;
  void clear_args() ;
  const std::string& args() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_args(Arg_&& arg, Args_... args);
  std::string* mutable_args();
  PROTOBUF_NODISCARD std::string* release_args();
  void set_allocated_args(std::string* value);

  private:
  const std::string& _internal_args() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_args(
      const std::string& value);
  std::string* _internal_mutable_args();

  public:
  // string leg = 4;
  void clear_leg() ;
  const std::string& leg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_leg(Arg_&& arg, Args_... args);
  std::string* mutable_leg();
  PROTOBUF_NODISCARD std::string* release_leg();
  void set_allocated_leg(std::string* value);

  private:
  const std::string& _internal_leg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leg(
      const std::string& value);
  std::string* _internal_mutable_leg();

  public:
  // bool wait_for_answer = 3;
  void clear_wait_for_answer() ;
  bool wait_for_answer() const;
  void set_wait_for_answer(bool value);

  private:
  bool _internal_wait_for_answer() const;
  void _internal_set_wait_for_answer(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fs.BroadcastRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BroadcastRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr args_;
    ::google::protobuf::internal::ArenaStringPtr leg_;
    bool wait_for_answer_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class BridgeRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.BridgeRequest) */ {
 public:
  inline BridgeRequest() : BridgeRequest(nullptr) {}
  ~BridgeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BridgeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BridgeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BridgeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline BridgeRequest(const BridgeRequest& from) : BridgeRequest(nullptr, from) {}
  inline BridgeRequest(BridgeRequest&& from) noexcept
      : BridgeRequest(nullptr, std::move(from)) {}
  inline BridgeRequest& operator=(const BridgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BridgeRequest& operator=(BridgeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BridgeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BridgeRequest* internal_default_instance() {
    return reinterpret_cast<const BridgeRequest*>(
        &_BridgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 39;
  friend void swap(BridgeRequest& a, BridgeRequest& b) { a.Swap(&b); }
  inline void Swap(BridgeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BridgeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BridgeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BridgeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BridgeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BridgeRequest& from) { BridgeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BridgeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.BridgeRequest"; }

 protected:
  explicit BridgeRequest(::google::protobuf::Arena* arena);
  BridgeRequest(::google::protobuf::Arena* arena, const BridgeRequest& from);
  BridgeRequest(::google::protobuf::Arena* arena, BridgeRequest&& from) noexcept
      : BridgeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLegAIdFieldNumber = 1,
    kLegBIdFieldNumber = 2,
    kLegBReserveIdFieldNumber = 3,
  };
  // string leg_a_id = 1;
  void clear_leg_a_id() ;
  const std::string& leg_a_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_leg_a_id(Arg_&& arg, Args_... args);
  std::string* mutable_leg_a_id();
  PROTOBUF_NODISCARD std::string* release_leg_a_id();
  void set_allocated_leg_a_id(std::string* value);

  private:
  const std::string& _internal_leg_a_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leg_a_id(
      const std::string& value);
  std::string* _internal_mutable_leg_a_id();

  public:
  // string leg_b_id = 2;
  void clear_leg_b_id() ;
  const std::string& leg_b_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_leg_b_id(Arg_&& arg, Args_... args);
  std::string* mutable_leg_b_id();
  PROTOBUF_NODISCARD std::string* release_leg_b_id();
  void set_allocated_leg_b_id(std::string* value);

  private:
  const std::string& _internal_leg_b_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leg_b_id(
      const std::string& value);
  std::string* _internal_mutable_leg_b_id();

  public:
  // string leg_b_reserve_id = 3;
  void clear_leg_b_reserve_id() ;
  const std::string& leg_b_reserve_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_leg_b_reserve_id(Arg_&& arg, Args_... args);
  std::string* mutable_leg_b_reserve_id();
  PROTOBUF_NODISCARD std::string* release_leg_b_reserve_id();
  void set_allocated_leg_b_reserve_id(std::string* value);

  private:
  const std::string& _internal_leg_b_reserve_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leg_b_reserve_id(
      const std::string& value);
  std::string* _internal_mutable_leg_b_reserve_id();

  public:
  // @@protoc_insertion_point(class_scope:fs.BridgeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BridgeRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr leg_a_id_;
    ::google::protobuf::internal::ArenaStringPtr leg_b_id_;
    ::google::protobuf::internal::ArenaStringPtr leg_b_reserve_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class BridgeCallRequest_VariablesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  BridgeCallRequest_VariablesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BridgeCallRequest_VariablesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit BridgeCallRequest_VariablesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const BridgeCallRequest_VariablesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const BridgeCallRequest_VariablesEntry_DoNotUse*>(
        &_BridgeCallRequest_VariablesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_fs_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      52, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class BreakParkResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.BreakParkResponse) */ {
 public:
  inline BreakParkResponse() : BreakParkResponse(nullptr) {}
  ~BreakParkResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BreakParkResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BreakParkResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BreakParkResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline BreakParkResponse(const BreakParkResponse& from) : BreakParkResponse(nullptr, from) {}
  inline BreakParkResponse(BreakParkResponse&& from) noexcept
      : BreakParkResponse(nullptr, std::move(from)) {}
  inline BreakParkResponse& operator=(const BreakParkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BreakParkResponse& operator=(BreakParkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BreakParkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BreakParkResponse* internal_default_instance() {
    return reinterpret_cast<const BreakParkResponse*>(
        &_BreakParkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(BreakParkResponse& a, BreakParkResponse& b) { a.Swap(&b); }
  inline void Swap(BreakParkResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BreakParkResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BreakParkResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BreakParkResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BreakParkResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BreakParkResponse& from) { BreakParkResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BreakParkResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.BreakParkResponse"; }

 protected:
  explicit BreakParkResponse(::google::protobuf::Arena* arena);
  BreakParkResponse(::google::protobuf::Arena* arena, const BreakParkResponse& from);
  BreakParkResponse(::google::protobuf::Arena* arena, BreakParkResponse&& from) noexcept
      : BreakParkResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOkFieldNumber = 1,
  };
  // bool ok = 1;
  void clear_ok() ;
  bool ok() const;
  void set_ok(bool value);

  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fs.BreakParkResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BreakParkResponse& from_msg);
    bool ok_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class BreakParkRequest_VariablesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  BreakParkRequest_VariablesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BreakParkRequest_VariablesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit BreakParkRequest_VariablesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const BreakParkRequest_VariablesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const BreakParkRequest_VariablesEntry_DoNotUse*>(
        &_BreakParkRequest_VariablesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_fs_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class BlindTransferRequest_VariablesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  BlindTransferRequest_VariablesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BlindTransferRequest_VariablesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit BlindTransferRequest_VariablesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const BlindTransferRequest_VariablesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const BlindTransferRequest_VariablesEntry_DoNotUse*>(
        &_BlindTransferRequest_VariablesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_fs_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      55, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class SetVariablesResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.SetVariablesResponse) */ {
 public:
  inline SetVariablesResponse() : SetVariablesResponse(nullptr) {}
  ~SetVariablesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetVariablesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetVariablesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetVariablesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetVariablesResponse(const SetVariablesResponse& from) : SetVariablesResponse(nullptr, from) {}
  inline SetVariablesResponse(SetVariablesResponse&& from) noexcept
      : SetVariablesResponse(nullptr, std::move(from)) {}
  inline SetVariablesResponse& operator=(const SetVariablesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVariablesResponse& operator=(SetVariablesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetVariablesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVariablesResponse* internal_default_instance() {
    return reinterpret_cast<const SetVariablesResponse*>(
        &_SetVariablesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 43;
  friend void swap(SetVariablesResponse& a, SetVariablesResponse& b) { a.Swap(&b); }
  inline void Swap(SetVariablesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVariablesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVariablesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetVariablesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetVariablesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetVariablesResponse& from) { SetVariablesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetVariablesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.SetVariablesResponse"; }

 protected:
  explicit SetVariablesResponse(::google::protobuf::Arena* arena);
  SetVariablesResponse(::google::protobuf::Arena* arena, const SetVariablesResponse& from);
  SetVariablesResponse(::google::protobuf::Arena* arena, SetVariablesResponse&& from) noexcept
      : SetVariablesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorFieldNumber = 1,
  };
  // .fs.ErrorExecute error = 1;
  bool has_error() const;
  void clear_error() ;
  const ::fs::ErrorExecute& error() const;
  PROTOBUF_NODISCARD ::fs::ErrorExecute* release_error();
  ::fs::ErrorExecute* mutable_error();
  void set_allocated_error(::fs::ErrorExecute* value);
  void unsafe_arena_set_allocated_error(::fs::ErrorExecute* value);
  ::fs::ErrorExecute* unsafe_arena_release_error();

  private:
  const ::fs::ErrorExecute& _internal_error() const;
  ::fs::ErrorExecute* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:fs.SetVariablesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetVariablesResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::fs::ErrorExecute* error_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class SetVariablesRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.SetVariablesRequest) */ {
 public:
  inline SetVariablesRequest() : SetVariablesRequest(nullptr) {}
  ~SetVariablesRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetVariablesRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetVariablesRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetVariablesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetVariablesRequest(const SetVariablesRequest& from) : SetVariablesRequest(nullptr, from) {}
  inline SetVariablesRequest(SetVariablesRequest&& from) noexcept
      : SetVariablesRequest(nullptr, std::move(from)) {}
  inline SetVariablesRequest& operator=(const SetVariablesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVariablesRequest& operator=(SetVariablesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetVariablesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVariablesRequest* internal_default_instance() {
    return reinterpret_cast<const SetVariablesRequest*>(
        &_SetVariablesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 42;
  friend void swap(SetVariablesRequest& a, SetVariablesRequest& b) { a.Swap(&b); }
  inline void Swap(SetVariablesRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVariablesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVariablesRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetVariablesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetVariablesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetVariablesRequest& from) { SetVariablesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetVariablesRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.SetVariablesRequest"; }

 protected:
  explicit SetVariablesRequest(::google::protobuf::Arena* arena);
  SetVariablesRequest(::google::protobuf::Arena* arena, const SetVariablesRequest& from);
  SetVariablesRequest(::google::protobuf::Arena* arena, SetVariablesRequest&& from) noexcept
      : SetVariablesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVariablesFieldNumber = 2,
    kUuidFieldNumber = 1,
  };
  // map<string, string> variables = 2;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  const ::google::protobuf::Map<std::string, std::string>& variables() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_variables();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_variables() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_variables();

  public:
  // string uuid = 1;
  void clear_uuid() ;
  const std::string& uuid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uuid(Arg_&& arg, Args_... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* value);

  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(
      const std::string& value);
  std::string* _internal_mutable_uuid();

  public:
  // @@protoc_insertion_point(class_scope:fs.SetVariablesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetVariablesRequest& from_msg);
    ::google::protobuf::internal::MapField<SetVariablesRequest_VariablesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        variables_;
    ::google::protobuf::internal::ArenaStringPtr uuid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class SetProfileVarRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.SetProfileVarRequest) */ {
 public:
  inline SetProfileVarRequest() : SetProfileVarRequest(nullptr) {}
  ~SetProfileVarRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetProfileVarRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetProfileVarRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetProfileVarRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetProfileVarRequest(const SetProfileVarRequest& from) : SetProfileVarRequest(nullptr, from) {}
  inline SetProfileVarRequest(SetProfileVarRequest&& from) noexcept
      : SetProfileVarRequest(nullptr, std::move(from)) {}
  inline SetProfileVarRequest& operator=(const SetProfileVarRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetProfileVarRequest& operator=(SetProfileVarRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetProfileVarRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetProfileVarRequest* internal_default_instance() {
    return reinterpret_cast<const SetProfileVarRequest*>(
        &_SetProfileVarRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(SetProfileVarRequest& a, SetProfileVarRequest& b) { a.Swap(&b); }
  inline void Swap(SetProfileVarRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetProfileVarRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetProfileVarRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetProfileVarRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetProfileVarRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetProfileVarRequest& from) { SetProfileVarRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetProfileVarRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.SetProfileVarRequest"; }

 protected:
  explicit SetProfileVarRequest(::google::protobuf::Arena* arena);
  SetProfileVarRequest(::google::protobuf::Arena* arena, const SetProfileVarRequest& from);
  SetProfileVarRequest(::google::protobuf::Arena* arena, SetProfileVarRequest&& from) noexcept
      : SetProfileVarRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVariablesFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // map<string, string> variables = 2;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  const ::google::protobuf::Map<std::string, std::string>& variables() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_variables();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_variables() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_variables();

  public:
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:fs.SetProfileVarRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetProfileVarRequest& from_msg);
    ::google::protobuf::internal::MapField<SetProfileVarRequest_VariablesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        variables_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class SetEavesdropStateResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.SetEavesdropStateResponse) */ {
 public:
  inline SetEavesdropStateResponse() : SetEavesdropStateResponse(nullptr) {}
  ~SetEavesdropStateResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetEavesdropStateResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetEavesdropStateResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetEavesdropStateResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetEavesdropStateResponse(const SetEavesdropStateResponse& from) : SetEavesdropStateResponse(nullptr, from) {}
  inline SetEavesdropStateResponse(SetEavesdropStateResponse&& from) noexcept
      : SetEavesdropStateResponse(nullptr, std::move(from)) {}
  inline SetEavesdropStateResponse& operator=(const SetEavesdropStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEavesdropStateResponse& operator=(SetEavesdropStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetEavesdropStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetEavesdropStateResponse* internal_default_instance() {
    return reinterpret_cast<const SetEavesdropStateResponse*>(
        &_SetEavesdropStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(SetEavesdropStateResponse& a, SetEavesdropStateResponse& b) { a.Swap(&b); }
  inline void Swap(SetEavesdropStateResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetEavesdropStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetEavesdropStateResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetEavesdropStateResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetEavesdropStateResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetEavesdropStateResponse& from) { SetEavesdropStateResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetEavesdropStateResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.SetEavesdropStateResponse"; }

 protected:
  explicit SetEavesdropStateResponse(::google::protobuf::Arena* arena);
  SetEavesdropStateResponse(::google::protobuf::Arena* arena, const SetEavesdropStateResponse& from);
  SetEavesdropStateResponse(::google::protobuf::Arena* arena, SetEavesdropStateResponse&& from) noexcept
      : SetEavesdropStateResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorFieldNumber = 1,
  };
  // .fs.ErrorExecute error = 1;
  bool has_error() const;
  void clear_error() ;
  const ::fs::ErrorExecute& error() const;
  PROTOBUF_NODISCARD ::fs::ErrorExecute* release_error();
  ::fs::ErrorExecute* mutable_error();
  void set_allocated_error(::fs::ErrorExecute* value);
  void unsafe_arena_set_allocated_error(::fs::ErrorExecute* value);
  ::fs::ErrorExecute* unsafe_arena_release_error();

  private:
  const ::fs::ErrorExecute& _internal_error() const;
  ::fs::ErrorExecute* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:fs.SetEavesdropStateResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetEavesdropStateResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::fs::ErrorExecute* error_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class QueueResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.QueueResponse) */ {
 public:
  inline QueueResponse() : QueueResponse(nullptr) {}
  ~QueueResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueueResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueueResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueueResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueueResponse(const QueueResponse& from) : QueueResponse(nullptr, from) {}
  inline QueueResponse(QueueResponse&& from) noexcept
      : QueueResponse(nullptr, std::move(from)) {}
  inline QueueResponse& operator=(const QueueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueueResponse& operator=(QueueResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueueResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueueResponse* internal_default_instance() {
    return reinterpret_cast<const QueueResponse*>(
        &_QueueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;
  friend void swap(QueueResponse& a, QueueResponse& b) { a.Swap(&b); }
  inline void Swap(QueueResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueueResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueueResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueueResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueueResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueueResponse& from) { QueueResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueueResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.QueueResponse"; }

 protected:
  explicit QueueResponse(::google::protobuf::Arena* arena);
  QueueResponse(::google::protobuf::Arena* arena, const QueueResponse& from);
  QueueResponse(::google::protobuf::Arena* arena, QueueResponse&& from) noexcept
      : QueueResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorFieldNumber = 1,
  };
  // .fs.ErrorExecute error = 1;
  bool has_error() const;
  void clear_error() ;
  const ::fs::ErrorExecute& error() const;
  PROTOBUF_NODISCARD ::fs::ErrorExecute* release_error();
  ::fs::ErrorExecute* mutable_error();
  void set_allocated_error(::fs::ErrorExecute* value);
  void unsafe_arena_set_allocated_error(::fs::ErrorExecute* value);
  ::fs::ErrorExecute* unsafe_arena_release_error();

  private:
  const ::fs::ErrorExecute& _internal_error() const;
  ::fs::ErrorExecute* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:fs.QueueResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueueResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::fs::ErrorExecute* error_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class QueueRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.QueueRequest) */ {
 public:
  inline QueueRequest() : QueueRequest(nullptr) {}
  ~QueueRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueueRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueueRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueueRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueueRequest(const QueueRequest& from) : QueueRequest(nullptr, from) {}
  inline QueueRequest(QueueRequest&& from) noexcept
      : QueueRequest(nullptr, std::move(from)) {}
  inline QueueRequest& operator=(const QueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueueRequest& operator=(QueueRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueueRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueueRequest* internal_default_instance() {
    return reinterpret_cast<const QueueRequest*>(
        &_QueueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(QueueRequest& a, QueueRequest& b) { a.Swap(&b); }
  inline void Swap(QueueRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueueRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueueRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueueRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueueRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueueRequest& from) { QueueRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueueRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.QueueRequest"; }

 protected:
  explicit QueueRequest(::google::protobuf::Arena* arena);
  QueueRequest(::google::protobuf::Arena* arena, const QueueRequest& from);
  QueueRequest(::google::protobuf::Arena* arena, QueueRequest&& from) noexcept
      : QueueRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVariablesFieldNumber = 2,
    kIdFieldNumber = 1,
    kPlaybackFileFieldNumber = 3,
    kPlaybackArgsFieldNumber = 4,
  };
  // map<string, string> variables = 2;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  const ::google::protobuf::Map<std::string, std::string>& variables() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_variables();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_variables() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_variables();

  public:
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string playback_file = 3;
  void clear_playback_file() ;
  const std::string& playback_file() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_playback_file(Arg_&& arg, Args_... args);
  std::string* mutable_playback_file();
  PROTOBUF_NODISCARD std::string* release_playback_file();
  void set_allocated_playback_file(std::string* value);

  private:
  const std::string& _internal_playback_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playback_file(
      const std::string& value);
  std::string* _internal_mutable_playback_file();

  public:
  // int32 playback_args = 4;
  void clear_playback_args() ;
  ::int32_t playback_args() const;
  void set_playback_args(::int32_t value);

  private:
  ::int32_t _internal_playback_args() const;
  void _internal_set_playback_args(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fs.QueueRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueueRequest& from_msg);
    ::google::protobuf::internal::MapField<QueueRequest_VariablesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        variables_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr playback_file_;
    ::int32_t playback_args_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class OriginateResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.OriginateResponse) */ {
 public:
  inline OriginateResponse() : OriginateResponse(nullptr) {}
  ~OriginateResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OriginateResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OriginateResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OriginateResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline OriginateResponse(const OriginateResponse& from) : OriginateResponse(nullptr, from) {}
  inline OriginateResponse(OriginateResponse&& from) noexcept
      : OriginateResponse(nullptr, std::move(from)) {}
  inline OriginateResponse& operator=(const OriginateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OriginateResponse& operator=(OriginateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OriginateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OriginateResponse* internal_default_instance() {
    return reinterpret_cast<const OriginateResponse*>(
        &_OriginateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 38;
  friend void swap(OriginateResponse& a, OriginateResponse& b) { a.Swap(&b); }
  inline void Swap(OriginateResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OriginateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OriginateResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OriginateResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OriginateResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OriginateResponse& from) { OriginateResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OriginateResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.OriginateResponse"; }

 protected:
  explicit OriginateResponse(::google::protobuf::Arena* arena);
  OriginateResponse(::google::protobuf::Arena* arena, const OriginateResponse& from);
  OriginateResponse(::google::protobuf::Arena* arena, OriginateResponse&& from) noexcept
      : OriginateResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUuidFieldNumber = 1,
    kErrorFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
  };
  // string uuid = 1;
  void clear_uuid() ;
  const std::string& uuid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uuid(Arg_&& arg, Args_... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* value);

  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(
      const std::string& value);
  std::string* _internal_mutable_uuid();

  public:
  // .fs.ErrorExecute error = 2;
  bool has_error() const;
  void clear_error() ;
  const ::fs::ErrorExecute& error() const;
  PROTOBUF_NODISCARD ::fs::ErrorExecute* release_error();
  ::fs::ErrorExecute* mutable_error();
  void set_allocated_error(::fs::ErrorExecute* value);
  void unsafe_arena_set_allocated_error(::fs::ErrorExecute* value);
  ::fs::ErrorExecute* unsafe_arena_release_error();

  private:
  const ::fs::ErrorExecute& _internal_error() const;
  ::fs::ErrorExecute* _internal_mutable_error();

  public:
  // int32 error_code = 3;
  void clear_error_code() ;
  ::int32_t error_code() const;
  void set_error_code(::int32_t value);

  private:
  ::int32_t _internal_error_code() const;
  void _internal_set_error_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fs.OriginateResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      33, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OriginateResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr uuid_;
    ::fs::ErrorExecute* error_;
    ::int32_t error_code_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class OriginateRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.OriginateRequest) */ {
 public:
  inline OriginateRequest() : OriginateRequest(nullptr) {}
  ~OriginateRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OriginateRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OriginateRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OriginateRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline OriginateRequest(const OriginateRequest& from) : OriginateRequest(nullptr, from) {}
  inline OriginateRequest(OriginateRequest&& from) noexcept
      : OriginateRequest(nullptr, std::move(from)) {}
  inline OriginateRequest& operator=(const OriginateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OriginateRequest& operator=(OriginateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OriginateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OriginateRequest* internal_default_instance() {
    return reinterpret_cast<const OriginateRequest*>(
        &_OriginateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 37;
  friend void swap(OriginateRequest& a, OriginateRequest& b) { a.Swap(&b); }
  inline void Swap(OriginateRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OriginateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OriginateRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OriginateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OriginateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OriginateRequest& from) { OriginateRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OriginateRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.OriginateRequest"; }

 protected:
  explicit OriginateRequest(::google::protobuf::Arena* arena);
  OriginateRequest(::google::protobuf::Arena* arena, const OriginateRequest& from);
  OriginateRequest(::google::protobuf::Arena* arena, OriginateRequest&& from) noexcept
      : OriginateRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Extension = OriginateRequest_Extension;
  using Strategy = OriginateRequest_Strategy;
  static constexpr Strategy FAILOVER = OriginateRequest_Strategy_FAILOVER;
  static constexpr Strategy MULTIPLE = OriginateRequest_Strategy_MULTIPLE;
  static inline bool Strategy_IsValid(int value) {
    return OriginateRequest_Strategy_IsValid(value);
  }
  static constexpr Strategy Strategy_MIN = OriginateRequest_Strategy_Strategy_MIN;
  static constexpr Strategy Strategy_MAX = OriginateRequest_Strategy_Strategy_MAX;
  static constexpr int Strategy_ARRAYSIZE = OriginateRequest_Strategy_Strategy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Strategy_descriptor() {
    return OriginateRequest_Strategy_descriptor();
  }
  template <typename T>
  static inline const std::string& Strategy_Name(T value) {
    return OriginateRequest_Strategy_Name(value);
  }
  static inline bool Strategy_Parse(absl::string_view name, Strategy* value) {
    return OriginateRequest_Strategy_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kVariablesFieldNumber = 1,
    kEndpointsFieldNumber = 2,
    kExtensionsFieldNumber = 10,
    kDestinationFieldNumber = 4,
    kCallerNumberFieldNumber = 6,
    kCallerNameFieldNumber = 7,
    kContextFieldNumber = 8,
    kDialplanFieldNumber = 9,
    kCheckIdFieldNumber = 11,
    kStrategyFieldNumber = 3,
    kTimeoutFieldNumber = 5,
  };
  // map<string, string> variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  const ::google::protobuf::Map<std::string, std::string>& variables() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_variables();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_variables() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_variables();

  public:
  // repeated string endpoints = 2;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;

  public:
  void clear_endpoints() ;
  const std::string& endpoints(int index) const;
  std::string* mutable_endpoints(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_endpoints(int index, Arg_&& value, Args_... args);
  std::string* add_endpoints();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_endpoints(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& endpoints() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_endpoints();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_endpoints() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_endpoints();

  public:
  // repeated .fs.OriginateRequest.Extension extensions = 10;
  int extensions_size() const;
  private:
  int _internal_extensions_size() const;

  public:
  void clear_extensions() ;
  ::fs::OriginateRequest_Extension* mutable_extensions(int index);
  ::google::protobuf::RepeatedPtrField<::fs::OriginateRequest_Extension>* mutable_extensions();

  private:
  const ::google::protobuf::RepeatedPtrField<::fs::OriginateRequest_Extension>& _internal_extensions() const;
  ::google::protobuf::RepeatedPtrField<::fs::OriginateRequest_Extension>* _internal_mutable_extensions();
  public:
  const ::fs::OriginateRequest_Extension& extensions(int index) const;
  ::fs::OriginateRequest_Extension* add_extensions();
  const ::google::protobuf::RepeatedPtrField<::fs::OriginateRequest_Extension>& extensions() const;
  // string destination = 4;
  void clear_destination() ;
  const std::string& destination() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_destination(Arg_&& arg, Args_... args);
  std::string* mutable_destination();
  PROTOBUF_NODISCARD std::string* release_destination();
  void set_allocated_destination(std::string* value);

  private:
  const std::string& _internal_destination() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination(
      const std::string& value);
  std::string* _internal_mutable_destination();

  public:
  // string callerNumber = 6;
  void clear_callernumber() ;
  const std::string& callernumber() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_callernumber(Arg_&& arg, Args_... args);
  std::string* mutable_callernumber();
  PROTOBUF_NODISCARD std::string* release_callernumber();
  void set_allocated_callernumber(std::string* value);

  private:
  const std::string& _internal_callernumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callernumber(
      const std::string& value);
  std::string* _internal_mutable_callernumber();

  public:
  // string callerName = 7;
  void clear_callername() ;
  const std::string& callername() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_callername(Arg_&& arg, Args_... args);
  std::string* mutable_callername();
  PROTOBUF_NODISCARD std::string* release_callername();
  void set_allocated_callername(std::string* value);

  private:
  const std::string& _internal_callername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callername(
      const std::string& value);
  std::string* _internal_mutable_callername();

  public:
  // string context = 8;
  void clear_context() ;
  const std::string& context() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_context(Arg_&& arg, Args_... args);
  std::string* mutable_context();
  PROTOBUF_NODISCARD std::string* release_context();
  void set_allocated_context(std::string* value);

  private:
  const std::string& _internal_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_context(
      const std::string& value);
  std::string* _internal_mutable_context();

  public:
  // string dialplan = 9;
  void clear_dialplan() ;
  const std::string& dialplan() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dialplan(Arg_&& arg, Args_... args);
  std::string* mutable_dialplan();
  PROTOBUF_NODISCARD std::string* release_dialplan();
  void set_allocated_dialplan(std::string* value);

  private:
  const std::string& _internal_dialplan() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dialplan(
      const std::string& value);
  std::string* _internal_mutable_dialplan();

  public:
  // string check_id = 11;
  void clear_check_id() ;
  const std::string& check_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_check_id(Arg_&& arg, Args_... args);
  std::string* mutable_check_id();
  PROTOBUF_NODISCARD std::string* release_check_id();
  void set_allocated_check_id(std::string* value);

  private:
  const std::string& _internal_check_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_check_id(
      const std::string& value);
  std::string* _internal_mutable_check_id();

  public:
  // .fs.OriginateRequest.Strategy strategy = 3;
  void clear_strategy() ;
  ::fs::OriginateRequest_Strategy strategy() const;
  void set_strategy(::fs::OriginateRequest_Strategy value);

  private:
  ::fs::OriginateRequest_Strategy _internal_strategy() const;
  void _internal_set_strategy(::fs::OriginateRequest_Strategy value);

  public:
  // int32 timeout = 5;
  void clear_timeout() ;
  ::int32_t timeout() const;
  void set_timeout(::int32_t value);

  private:
  ::int32_t _internal_timeout() const;
  void _internal_set_timeout(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fs.OriginateRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 2,
      110, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OriginateRequest& from_msg);
    ::google::protobuf::internal::MapField<OriginateRequest_VariablesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        variables_;
    ::google::protobuf::RepeatedPtrField<std::string> endpoints_;
    ::google::protobuf::RepeatedPtrField< ::fs::OriginateRequest_Extension > extensions_;
    ::google::protobuf::internal::ArenaStringPtr destination_;
    ::google::protobuf::internal::ArenaStringPtr callernumber_;
    ::google::protobuf::internal::ArenaStringPtr callername_;
    ::google::protobuf::internal::ArenaStringPtr context_;
    ::google::protobuf::internal::ArenaStringPtr dialplan_;
    ::google::protobuf::internal::ArenaStringPtr check_id_;
    int strategy_;
    ::int32_t timeout_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class HangupResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.HangupResponse) */ {
 public:
  inline HangupResponse() : HangupResponse(nullptr) {}
  ~HangupResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HangupResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HangupResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HangupResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline HangupResponse(const HangupResponse& from) : HangupResponse(nullptr, from) {}
  inline HangupResponse(HangupResponse&& from) noexcept
      : HangupResponse(nullptr, std::move(from)) {}
  inline HangupResponse& operator=(const HangupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HangupResponse& operator=(HangupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HangupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HangupResponse* internal_default_instance() {
    return reinterpret_cast<const HangupResponse*>(
        &_HangupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 34;
  friend void swap(HangupResponse& a, HangupResponse& b) { a.Swap(&b); }
  inline void Swap(HangupResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HangupResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HangupResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HangupResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HangupResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HangupResponse& from) { HangupResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HangupResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.HangupResponse"; }

 protected:
  explicit HangupResponse(::google::protobuf::Arena* arena);
  HangupResponse(::google::protobuf::Arena* arena, const HangupResponse& from);
  HangupResponse(::google::protobuf::Arena* arena, HangupResponse&& from) noexcept
      : HangupResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorFieldNumber = 1,
  };
  // .fs.ErrorExecute error = 1;
  bool has_error() const;
  void clear_error() ;
  const ::fs::ErrorExecute& error() const;
  PROTOBUF_NODISCARD ::fs::ErrorExecute* release_error();
  ::fs::ErrorExecute* mutable_error();
  void set_allocated_error(::fs::ErrorExecute* value);
  void unsafe_arena_set_allocated_error(::fs::ErrorExecute* value);
  ::fs::ErrorExecute* unsafe_arena_release_error();

  private:
  const ::fs::ErrorExecute& _internal_error() const;
  ::fs::ErrorExecute* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:fs.HangupResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HangupResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::fs::ErrorExecute* error_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class HangupRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.HangupRequest) */ {
 public:
  inline HangupRequest() : HangupRequest(nullptr) {}
  ~HangupRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HangupRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HangupRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HangupRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline HangupRequest(const HangupRequest& from) : HangupRequest(nullptr, from) {}
  inline HangupRequest(HangupRequest&& from) noexcept
      : HangupRequest(nullptr, std::move(from)) {}
  inline HangupRequest& operator=(const HangupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HangupRequest& operator=(HangupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HangupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HangupRequest* internal_default_instance() {
    return reinterpret_cast<const HangupRequest*>(
        &_HangupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 33;
  friend void swap(HangupRequest& a, HangupRequest& b) { a.Swap(&b); }
  inline void Swap(HangupRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HangupRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HangupRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HangupRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HangupRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HangupRequest& from) { HangupRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HangupRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.HangupRequest"; }

 protected:
  explicit HangupRequest(::google::protobuf::Arena* arena);
  HangupRequest(::google::protobuf::Arena* arena, const HangupRequest& from);
  HangupRequest(::google::protobuf::Arena* arena, HangupRequest&& from) noexcept
      : HangupRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVariablesFieldNumber = 4,
    kUuidFieldNumber = 1,
    kCauseFieldNumber = 2,
    kReportingFieldNumber = 3,
  };
  // map<string, string> variables = 4;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  const ::google::protobuf::Map<std::string, std::string>& variables() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_variables();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_variables() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_variables();

  public:
  // string uuid = 1;
  void clear_uuid() ;
  const std::string& uuid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uuid(Arg_&& arg, Args_... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* value);

  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(
      const std::string& value);
  std::string* _internal_mutable_uuid();

  public:
  // string cause = 2;
  void clear_cause() ;
  const std::string& cause() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cause(Arg_&& arg, Args_... args);
  std::string* mutable_cause();
  PROTOBUF_NODISCARD std::string* release_cause();
  void set_allocated_cause(std::string* value);

  private:
  const std::string& _internal_cause() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cause(
      const std::string& value);
  std::string* _internal_mutable_cause();

  public:
  // bool reporting = 3;
  void clear_reporting() ;
  bool reporting() const;
  void set_reporting(bool value);

  private:
  bool _internal_reporting() const;
  void _internal_set_reporting(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fs.HangupRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HangupRequest& from_msg);
    ::google::protobuf::internal::MapField<HangupRequest_VariablesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        variables_;
    ::google::protobuf::internal::ArenaStringPtr uuid_;
    ::google::protobuf::internal::ArenaStringPtr cause_;
    bool reporting_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class HangupMatchingVarsReqeust final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.HangupMatchingVarsReqeust) */ {
 public:
  inline HangupMatchingVarsReqeust() : HangupMatchingVarsReqeust(nullptr) {}
  ~HangupMatchingVarsReqeust() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HangupMatchingVarsReqeust* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HangupMatchingVarsReqeust));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HangupMatchingVarsReqeust(
      ::google::protobuf::internal::ConstantInitialized);

  inline HangupMatchingVarsReqeust(const HangupMatchingVarsReqeust& from) : HangupMatchingVarsReqeust(nullptr, from) {}
  inline HangupMatchingVarsReqeust(HangupMatchingVarsReqeust&& from) noexcept
      : HangupMatchingVarsReqeust(nullptr, std::move(from)) {}
  inline HangupMatchingVarsReqeust& operator=(const HangupMatchingVarsReqeust& from) {
    CopyFrom(from);
    return *this;
  }
  inline HangupMatchingVarsReqeust& operator=(HangupMatchingVarsReqeust&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HangupMatchingVarsReqeust& default_instance() {
    return *internal_default_instance();
  }
  static inline const HangupMatchingVarsReqeust* internal_default_instance() {
    return reinterpret_cast<const HangupMatchingVarsReqeust*>(
        &_HangupMatchingVarsReqeust_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 45;
  friend void swap(HangupMatchingVarsReqeust& a, HangupMatchingVarsReqeust& b) { a.Swap(&b); }
  inline void Swap(HangupMatchingVarsReqeust* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HangupMatchingVarsReqeust* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HangupMatchingVarsReqeust* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HangupMatchingVarsReqeust>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HangupMatchingVarsReqeust& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HangupMatchingVarsReqeust& from) { HangupMatchingVarsReqeust::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HangupMatchingVarsReqeust* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.HangupMatchingVarsReqeust"; }

 protected:
  explicit HangupMatchingVarsReqeust(::google::protobuf::Arena* arena);
  HangupMatchingVarsReqeust(::google::protobuf::Arena* arena, const HangupMatchingVarsReqeust& from);
  HangupMatchingVarsReqeust(::google::protobuf::Arena* arena, HangupMatchingVarsReqeust&& from) noexcept
      : HangupMatchingVarsReqeust(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVariablesFieldNumber = 2,
    kCauseFieldNumber = 1,
  };
  // map<string, string> variables = 2;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  const ::google::protobuf::Map<std::string, std::string>& variables() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_variables();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_variables() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_variables();

  public:
  // string cause = 1;
  void clear_cause() ;
  const std::string& cause() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cause(Arg_&& arg, Args_... args);
  std::string* mutable_cause();
  PROTOBUF_NODISCARD std::string* release_cause();
  void set_allocated_cause(std::string* value);

  private:
  const std::string& _internal_cause() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cause(
      const std::string& value);
  std::string* _internal_mutable_cause();

  public:
  // @@protoc_insertion_point(class_scope:fs.HangupMatchingVarsReqeust)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HangupMatchingVarsReqeust& from_msg);
    ::google::protobuf::internal::MapField<HangupMatchingVarsReqeust_VariablesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        variables_;
    ::google::protobuf::internal::ArenaStringPtr cause_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class ExecuteResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.ExecuteResponse) */ {
 public:
  inline ExecuteResponse() : ExecuteResponse(nullptr) {}
  ~ExecuteResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ExecuteResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ExecuteResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ExecuteResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ExecuteResponse(const ExecuteResponse& from) : ExecuteResponse(nullptr, from) {}
  inline ExecuteResponse(ExecuteResponse&& from) noexcept
      : ExecuteResponse(nullptr, std::move(from)) {}
  inline ExecuteResponse& operator=(const ExecuteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteResponse& operator=(ExecuteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecuteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteResponse* internal_default_instance() {
    return reinterpret_cast<const ExecuteResponse*>(
        &_ExecuteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 31;
  friend void swap(ExecuteResponse& a, ExecuteResponse& b) { a.Swap(&b); }
  inline void Swap(ExecuteResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecuteResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ExecuteResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExecuteResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ExecuteResponse& from) { ExecuteResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ExecuteResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.ExecuteResponse"; }

 protected:
  explicit ExecuteResponse(::google::protobuf::Arena* arena);
  ExecuteResponse(::google::protobuf::Arena* arena, const ExecuteResponse& from);
  ExecuteResponse(::google::protobuf::Arena* arena, ExecuteResponse&& from) noexcept
      : ExecuteResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string data = 1;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // .fs.ErrorExecute error = 2;
  bool has_error() const;
  void clear_error() ;
  const ::fs::ErrorExecute& error() const;
  PROTOBUF_NODISCARD ::fs::ErrorExecute* release_error();
  ::fs::ErrorExecute* mutable_error();
  void set_allocated_error(::fs::ErrorExecute* value);
  void unsafe_arena_set_allocated_error(::fs::ErrorExecute* value);
  ::fs::ErrorExecute* unsafe_arena_release_error();

  private:
  const ::fs::ErrorExecute& _internal_error() const;
  ::fs::ErrorExecute* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:fs.ExecuteResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      31, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ExecuteResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::fs::ErrorExecute* error_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class ConfirmPushResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.ConfirmPushResponse) */ {
 public:
  inline ConfirmPushResponse() : ConfirmPushResponse(nullptr) {}
  ~ConfirmPushResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConfirmPushResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConfirmPushResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfirmPushResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConfirmPushResponse(const ConfirmPushResponse& from) : ConfirmPushResponse(nullptr, from) {}
  inline ConfirmPushResponse(ConfirmPushResponse&& from) noexcept
      : ConfirmPushResponse(nullptr, std::move(from)) {}
  inline ConfirmPushResponse& operator=(const ConfirmPushResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfirmPushResponse& operator=(ConfirmPushResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfirmPushResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfirmPushResponse* internal_default_instance() {
    return reinterpret_cast<const ConfirmPushResponse*>(
        &_ConfirmPushResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(ConfirmPushResponse& a, ConfirmPushResponse& b) { a.Swap(&b); }
  inline void Swap(ConfirmPushResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfirmPushResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfirmPushResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConfirmPushResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfirmPushResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfirmPushResponse& from) { ConfirmPushResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConfirmPushResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.ConfirmPushResponse"; }

 protected:
  explicit ConfirmPushResponse(::google::protobuf::Arena* arena);
  ConfirmPushResponse(::google::protobuf::Arena* arena, const ConfirmPushResponse& from);
  ConfirmPushResponse(::google::protobuf::Arena* arena, ConfirmPushResponse&& from) noexcept
      : ConfirmPushResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorFieldNumber = 1,
  };
  // .fs.ErrorExecute error = 1;
  bool has_error() const;
  void clear_error() ;
  const ::fs::ErrorExecute& error() const;
  PROTOBUF_NODISCARD ::fs::ErrorExecute* release_error();
  ::fs::ErrorExecute* mutable_error();
  void set_allocated_error(::fs::ErrorExecute* value);
  void unsafe_arena_set_allocated_error(::fs::ErrorExecute* value);
  ::fs::ErrorExecute* unsafe_arena_release_error();

  private:
  const ::fs::ErrorExecute& _internal_error() const;
  ::fs::ErrorExecute* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:fs.ConfirmPushResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConfirmPushResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::fs::ErrorExecute* error_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class BroadcastResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.BroadcastResponse) */ {
 public:
  inline BroadcastResponse() : BroadcastResponse(nullptr) {}
  ~BroadcastResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BroadcastResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BroadcastResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BroadcastResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline BroadcastResponse(const BroadcastResponse& from) : BroadcastResponse(nullptr, from) {}
  inline BroadcastResponse(BroadcastResponse&& from) noexcept
      : BroadcastResponse(nullptr, std::move(from)) {}
  inline BroadcastResponse& operator=(const BroadcastResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastResponse& operator=(BroadcastResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastResponse* internal_default_instance() {
    return reinterpret_cast<const BroadcastResponse*>(
        &_BroadcastResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(BroadcastResponse& a, BroadcastResponse& b) { a.Swap(&b); }
  inline void Swap(BroadcastResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BroadcastResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BroadcastResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BroadcastResponse& from) { BroadcastResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BroadcastResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.BroadcastResponse"; }

 protected:
  explicit BroadcastResponse(::google::protobuf::Arena* arena);
  BroadcastResponse(::google::protobuf::Arena* arena, const BroadcastResponse& from);
  BroadcastResponse(::google::protobuf::Arena* arena, BroadcastResponse&& from) noexcept
      : BroadcastResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string data = 1;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // .fs.ErrorExecute error = 2;
  bool has_error() const;
  void clear_error() ;
  const ::fs::ErrorExecute& error() const;
  PROTOBUF_NODISCARD ::fs::ErrorExecute* release_error();
  ::fs::ErrorExecute* mutable_error();
  void set_allocated_error(::fs::ErrorExecute* value);
  void unsafe_arena_set_allocated_error(::fs::ErrorExecute* value);
  ::fs::ErrorExecute* unsafe_arena_release_error();

  private:
  const ::fs::ErrorExecute& _internal_error() const;
  ::fs::ErrorExecute* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:fs.BroadcastResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      33, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BroadcastResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::fs::ErrorExecute* error_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class BridgeResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.BridgeResponse) */ {
 public:
  inline BridgeResponse() : BridgeResponse(nullptr) {}
  ~BridgeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BridgeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BridgeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BridgeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline BridgeResponse(const BridgeResponse& from) : BridgeResponse(nullptr, from) {}
  inline BridgeResponse(BridgeResponse&& from) noexcept
      : BridgeResponse(nullptr, std::move(from)) {}
  inline BridgeResponse& operator=(const BridgeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BridgeResponse& operator=(BridgeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BridgeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BridgeResponse* internal_default_instance() {
    return reinterpret_cast<const BridgeResponse*>(
        &_BridgeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 40;
  friend void swap(BridgeResponse& a, BridgeResponse& b) { a.Swap(&b); }
  inline void Swap(BridgeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BridgeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BridgeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BridgeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BridgeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BridgeResponse& from) { BridgeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BridgeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.BridgeResponse"; }

 protected:
  explicit BridgeResponse(::google::protobuf::Arena* arena);
  BridgeResponse(::google::protobuf::Arena* arena, const BridgeResponse& from);
  BridgeResponse(::google::protobuf::Arena* arena, BridgeResponse&& from) noexcept
      : BridgeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUuidFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string uuid = 1;
  void clear_uuid() ;
  const std::string& uuid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uuid(Arg_&& arg, Args_... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* value);

  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(
      const std::string& value);
  std::string* _internal_mutable_uuid();

  public:
  // .fs.ErrorExecute error = 2;
  bool has_error() const;
  void clear_error() ;
  const ::fs::ErrorExecute& error() const;
  PROTOBUF_NODISCARD ::fs::ErrorExecute* release_error();
  ::fs::ErrorExecute* mutable_error();
  void set_allocated_error(::fs::ErrorExecute* value);
  void unsafe_arena_set_allocated_error(::fs::ErrorExecute* value);
  ::fs::ErrorExecute* unsafe_arena_release_error();

  private:
  const ::fs::ErrorExecute& _internal_error() const;
  ::fs::ErrorExecute* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:fs.BridgeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      30, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BridgeResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr uuid_;
    ::fs::ErrorExecute* error_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class BridgeCallResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.BridgeCallResponse) */ {
 public:
  inline BridgeCallResponse() : BridgeCallResponse(nullptr) {}
  ~BridgeCallResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BridgeCallResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BridgeCallResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BridgeCallResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline BridgeCallResponse(const BridgeCallResponse& from) : BridgeCallResponse(nullptr, from) {}
  inline BridgeCallResponse(BridgeCallResponse&& from) noexcept
      : BridgeCallResponse(nullptr, std::move(from)) {}
  inline BridgeCallResponse& operator=(const BridgeCallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BridgeCallResponse& operator=(BridgeCallResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BridgeCallResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BridgeCallResponse* internal_default_instance() {
    return reinterpret_cast<const BridgeCallResponse*>(
        &_BridgeCallResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(BridgeCallResponse& a, BridgeCallResponse& b) { a.Swap(&b); }
  inline void Swap(BridgeCallResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BridgeCallResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BridgeCallResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BridgeCallResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BridgeCallResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BridgeCallResponse& from) { BridgeCallResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BridgeCallResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.BridgeCallResponse"; }

 protected:
  explicit BridgeCallResponse(::google::protobuf::Arena* arena);
  BridgeCallResponse(::google::protobuf::Arena* arena, const BridgeCallResponse& from);
  BridgeCallResponse(::google::protobuf::Arena* arena, BridgeCallResponse&& from) noexcept
      : BridgeCallResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUuidFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string uuid = 1;
  void clear_uuid() ;
  const std::string& uuid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uuid(Arg_&& arg, Args_... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* value);

  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(
      const std::string& value);
  std::string* _internal_mutable_uuid();

  public:
  // .fs.ErrorExecute error = 2;
  bool has_error() const;
  void clear_error() ;
  const ::fs::ErrorExecute& error() const;
  PROTOBUF_NODISCARD ::fs::ErrorExecute* release_error();
  ::fs::ErrorExecute* mutable_error();
  void set_allocated_error(::fs::ErrorExecute* value);
  void unsafe_arena_set_allocated_error(::fs::ErrorExecute* value);
  ::fs::ErrorExecute* unsafe_arena_release_error();

  private:
  const ::fs::ErrorExecute& _internal_error() const;
  ::fs::ErrorExecute* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:fs.BridgeCallResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BridgeCallResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr uuid_;
    ::fs::ErrorExecute* error_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class BridgeCallRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.BridgeCallRequest) */ {
 public:
  inline BridgeCallRequest() : BridgeCallRequest(nullptr) {}
  ~BridgeCallRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BridgeCallRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BridgeCallRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BridgeCallRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline BridgeCallRequest(const BridgeCallRequest& from) : BridgeCallRequest(nullptr, from) {}
  inline BridgeCallRequest(BridgeCallRequest&& from) noexcept
      : BridgeCallRequest(nullptr, std::move(from)) {}
  inline BridgeCallRequest& operator=(const BridgeCallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BridgeCallRequest& operator=(BridgeCallRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BridgeCallRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BridgeCallRequest* internal_default_instance() {
    return reinterpret_cast<const BridgeCallRequest*>(
        &_BridgeCallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(BridgeCallRequest& a, BridgeCallRequest& b) { a.Swap(&b); }
  inline void Swap(BridgeCallRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BridgeCallRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BridgeCallRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BridgeCallRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BridgeCallRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BridgeCallRequest& from) { BridgeCallRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BridgeCallRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.BridgeCallRequest"; }

 protected:
  explicit BridgeCallRequest(::google::protobuf::Arena* arena);
  BridgeCallRequest(::google::protobuf::Arena* arena, const BridgeCallRequest& from);
  BridgeCallRequest(::google::protobuf::Arena* arena, BridgeCallRequest&& from) noexcept
      : BridgeCallRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVariablesFieldNumber = 3,
    kLegAIdFieldNumber = 1,
    kLegBIdFieldNumber = 2,
  };
  // map<string, string> variables = 3;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  const ::google::protobuf::Map<std::string, std::string>& variables() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_variables();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_variables() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_variables();

  public:
  // string leg_a_id = 1;
  void clear_leg_a_id() ;
  const std::string& leg_a_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_leg_a_id(Arg_&& arg, Args_... args);
  std::string* mutable_leg_a_id();
  PROTOBUF_NODISCARD std::string* release_leg_a_id();
  void set_allocated_leg_a_id(std::string* value);

  private:
  const std::string& _internal_leg_a_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leg_a_id(
      const std::string& value);
  std::string* _internal_mutable_leg_a_id();

  public:
  // string leg_b_id = 2;
  void clear_leg_b_id() ;
  const std::string& leg_b_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_leg_b_id(Arg_&& arg, Args_... args);
  std::string* mutable_leg_b_id();
  PROTOBUF_NODISCARD std::string* release_leg_b_id();
  void set_allocated_leg_b_id(std::string* value);

  private:
  const std::string& _internal_leg_b_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leg_b_id(
      const std::string& value);
  std::string* _internal_mutable_leg_b_id();

  public:
  // @@protoc_insertion_point(class_scope:fs.BridgeCallRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 1,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BridgeCallRequest& from_msg);
    ::google::protobuf::internal::MapField<BridgeCallRequest_VariablesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        variables_;
    ::google::protobuf::internal::ArenaStringPtr leg_a_id_;
    ::google::protobuf::internal::ArenaStringPtr leg_b_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class BreakParkRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.BreakParkRequest) */ {
 public:
  inline BreakParkRequest() : BreakParkRequest(nullptr) {}
  ~BreakParkRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BreakParkRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BreakParkRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BreakParkRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline BreakParkRequest(const BreakParkRequest& from) : BreakParkRequest(nullptr, from) {}
  inline BreakParkRequest(BreakParkRequest&& from) noexcept
      : BreakParkRequest(nullptr, std::move(from)) {}
  inline BreakParkRequest& operator=(const BreakParkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BreakParkRequest& operator=(BreakParkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BreakParkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BreakParkRequest* internal_default_instance() {
    return reinterpret_cast<const BreakParkRequest*>(
        &_BreakParkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(BreakParkRequest& a, BreakParkRequest& b) { a.Swap(&b); }
  inline void Swap(BreakParkRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BreakParkRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BreakParkRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BreakParkRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BreakParkRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BreakParkRequest& from) { BreakParkRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BreakParkRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.BreakParkRequest"; }

 protected:
  explicit BreakParkRequest(::google::protobuf::Arena* arena);
  BreakParkRequest(::google::protobuf::Arena* arena, const BreakParkRequest& from);
  BreakParkRequest(::google::protobuf::Arena* arena, BreakParkRequest&& from) noexcept
      : BreakParkRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVariablesFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // map<string, string> variables = 2;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  const ::google::protobuf::Map<std::string, std::string>& variables() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_variables();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_variables() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_variables();

  public:
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:fs.BreakParkRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BreakParkRequest& from_msg);
    ::google::protobuf::internal::MapField<BreakParkRequest_VariablesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        variables_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class BlindTransferResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.BlindTransferResponse) */ {
 public:
  inline BlindTransferResponse() : BlindTransferResponse(nullptr) {}
  ~BlindTransferResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BlindTransferResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BlindTransferResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BlindTransferResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline BlindTransferResponse(const BlindTransferResponse& from) : BlindTransferResponse(nullptr, from) {}
  inline BlindTransferResponse(BlindTransferResponse&& from) noexcept
      : BlindTransferResponse(nullptr, std::move(from)) {}
  inline BlindTransferResponse& operator=(const BlindTransferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlindTransferResponse& operator=(BlindTransferResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlindTransferResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlindTransferResponse* internal_default_instance() {
    return reinterpret_cast<const BlindTransferResponse*>(
        &_BlindTransferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(BlindTransferResponse& a, BlindTransferResponse& b) { a.Swap(&b); }
  inline void Swap(BlindTransferResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlindTransferResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlindTransferResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BlindTransferResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlindTransferResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BlindTransferResponse& from) { BlindTransferResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BlindTransferResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.BlindTransferResponse"; }

 protected:
  explicit BlindTransferResponse(::google::protobuf::Arena* arena);
  BlindTransferResponse(::google::protobuf::Arena* arena, const BlindTransferResponse& from);
  BlindTransferResponse(::google::protobuf::Arena* arena, BlindTransferResponse&& from) noexcept
      : BlindTransferResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorFieldNumber = 1,
  };
  // .fs.ErrorExecute error = 1;
  bool has_error() const;
  void clear_error() ;
  const ::fs::ErrorExecute& error() const;
  PROTOBUF_NODISCARD ::fs::ErrorExecute* release_error();
  ::fs::ErrorExecute* mutable_error();
  void set_allocated_error(::fs::ErrorExecute* value);
  void unsafe_arena_set_allocated_error(::fs::ErrorExecute* value);
  ::fs::ErrorExecute* unsafe_arena_release_error();

  private:
  const ::fs::ErrorExecute& _internal_error() const;
  ::fs::ErrorExecute* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:fs.BlindTransferResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BlindTransferResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::fs::ErrorExecute* error_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};
// -------------------------------------------------------------------

class BlindTransferRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fs.BlindTransferRequest) */ {
 public:
  inline BlindTransferRequest() : BlindTransferRequest(nullptr) {}
  ~BlindTransferRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BlindTransferRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BlindTransferRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BlindTransferRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline BlindTransferRequest(const BlindTransferRequest& from) : BlindTransferRequest(nullptr, from) {}
  inline BlindTransferRequest(BlindTransferRequest&& from) noexcept
      : BlindTransferRequest(nullptr, std::move(from)) {}
  inline BlindTransferRequest& operator=(const BlindTransferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlindTransferRequest& operator=(BlindTransferRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlindTransferRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlindTransferRequest* internal_default_instance() {
    return reinterpret_cast<const BlindTransferRequest*>(
        &_BlindTransferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(BlindTransferRequest& a, BlindTransferRequest& b) { a.Swap(&b); }
  inline void Swap(BlindTransferRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlindTransferRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlindTransferRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BlindTransferRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlindTransferRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BlindTransferRequest& from) { BlindTransferRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BlindTransferRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "fs.BlindTransferRequest"; }

 protected:
  explicit BlindTransferRequest(::google::protobuf::Arena* arena);
  BlindTransferRequest(::google::protobuf::Arena* arena, const BlindTransferRequest& from);
  BlindTransferRequest(::google::protobuf::Arena* arena, BlindTransferRequest&& from) noexcept
      : BlindTransferRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVariablesFieldNumber = 3,
    kIdFieldNumber = 1,
    kDestinationFieldNumber = 2,
    kDialplanFieldNumber = 4,
    kContextFieldNumber = 5,
  };
  // map<string, string> variables = 3;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  const ::google::protobuf::Map<std::string, std::string>& variables() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_variables();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_variables() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_variables();

  public:
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string destination = 2;
  void clear_destination() ;
  const std::string& destination() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_destination(Arg_&& arg, Args_... args);
  std::string* mutable_destination();
  PROTOBUF_NODISCARD std::string* release_destination();
  void set_allocated_destination(std::string* value);

  private:
  const std::string& _internal_destination() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination(
      const std::string& value);
  std::string* _internal_mutable_destination();

  public:
  // string dialplan = 4;
  void clear_dialplan() ;
  const std::string& dialplan() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dialplan(Arg_&& arg, Args_... args);
  std::string* mutable_dialplan();
  PROTOBUF_NODISCARD std::string* release_dialplan();
  void set_allocated_dialplan(std::string* value);

  private:
  const std::string& _internal_dialplan() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dialplan(
      const std::string& value);
  std::string* _internal_mutable_dialplan();

  public:
  // string context = 5;
  void clear_context() ;
  const std::string& context() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_context(Arg_&& arg, Args_... args);
  std::string* mutable_context();
  PROTOBUF_NODISCARD std::string* release_context();
  void set_allocated_context(std::string* value);

  private:
  const std::string& _internal_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_context(
      const std::string& value);
  std::string* _internal_mutable_context();

  public:
  // @@protoc_insertion_point(class_scope:fs.BlindTransferRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      69, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BlindTransferRequest& from_msg);
    ::google::protobuf::internal::MapField<BlindTransferRequest_VariablesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        variables_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr destination_;
    ::google::protobuf::internal::ArenaStringPtr dialplan_;
    ::google::protobuf::internal::ArenaStringPtr context_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BreakParkRequest

// string id = 1;
inline void BreakParkRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BreakParkRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BreakParkRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BreakParkRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.BreakParkRequest.id)
}
inline std::string* BreakParkRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:fs.BreakParkRequest.id)
  return _s;
}
inline const std::string& BreakParkRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void BreakParkRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* BreakParkRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* BreakParkRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BreakParkRequest.id)
  return _impl_.id_.Release();
}
inline void BreakParkRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.BreakParkRequest.id)
}

// map<string, string> variables = 2;
inline int BreakParkRequest::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int BreakParkRequest::variables_size() const {
  return _internal_variables_size();
}
inline void BreakParkRequest::clear_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.variables_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& BreakParkRequest::_internal_variables() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.variables_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& BreakParkRequest::variables() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:fs.BreakParkRequest.variables)
  return _internal_variables();
}
inline ::google::protobuf::Map<std::string, std::string>* BreakParkRequest::_internal_mutable_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.variables_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* BreakParkRequest::mutable_variables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:fs.BreakParkRequest.variables)
  return _internal_mutable_variables();
}

// -------------------------------------------------------------------

// BreakParkResponse

// bool ok = 1;
inline void BreakParkResponse::clear_ok() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ok_ = false;
}
inline bool BreakParkResponse::ok() const {
  // @@protoc_insertion_point(field_get:fs.BreakParkResponse.ok)
  return _internal_ok();
}
inline void BreakParkResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:fs.BreakParkResponse.ok)
}
inline bool BreakParkResponse::_internal_ok() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ok_;
}
inline void BreakParkResponse::_internal_set_ok(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ok_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BlindTransferRequest

// string id = 1;
inline void BlindTransferRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BlindTransferRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BlindTransferRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlindTransferRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.BlindTransferRequest.id)
}
inline std::string* BlindTransferRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:fs.BlindTransferRequest.id)
  return _s;
}
inline const std::string& BlindTransferRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void BlindTransferRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* BlindTransferRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* BlindTransferRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BlindTransferRequest.id)
  return _impl_.id_.Release();
}
inline void BlindTransferRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.BlindTransferRequest.id)
}

// string destination = 2;
inline void BlindTransferRequest::clear_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_.ClearToEmpty();
}
inline const std::string& BlindTransferRequest::destination() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BlindTransferRequest.destination)
  return _internal_destination();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlindTransferRequest::set_destination(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.BlindTransferRequest.destination)
}
inline std::string* BlindTransferRequest::mutable_destination() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:fs.BlindTransferRequest.destination)
  return _s;
}
inline const std::string& BlindTransferRequest::_internal_destination() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.destination_.Get();
}
inline void BlindTransferRequest::_internal_set_destination(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_.Set(value, GetArena());
}
inline std::string* BlindTransferRequest::_internal_mutable_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.destination_.Mutable( GetArena());
}
inline std::string* BlindTransferRequest::release_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BlindTransferRequest.destination)
  return _impl_.destination_.Release();
}
inline void BlindTransferRequest::set_allocated_destination(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.destination_.IsDefault()) {
    _impl_.destination_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.BlindTransferRequest.destination)
}

// map<string, string> variables = 3;
inline int BlindTransferRequest::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int BlindTransferRequest::variables_size() const {
  return _internal_variables_size();
}
inline void BlindTransferRequest::clear_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.variables_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& BlindTransferRequest::_internal_variables() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.variables_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& BlindTransferRequest::variables() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:fs.BlindTransferRequest.variables)
  return _internal_variables();
}
inline ::google::protobuf::Map<std::string, std::string>* BlindTransferRequest::_internal_mutable_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.variables_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* BlindTransferRequest::mutable_variables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:fs.BlindTransferRequest.variables)
  return _internal_mutable_variables();
}

// string dialplan = 4;
inline void BlindTransferRequest::clear_dialplan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dialplan_.ClearToEmpty();
}
inline const std::string& BlindTransferRequest::dialplan() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BlindTransferRequest.dialplan)
  return _internal_dialplan();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlindTransferRequest::set_dialplan(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dialplan_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.BlindTransferRequest.dialplan)
}
inline std::string* BlindTransferRequest::mutable_dialplan() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dialplan();
  // @@protoc_insertion_point(field_mutable:fs.BlindTransferRequest.dialplan)
  return _s;
}
inline const std::string& BlindTransferRequest::_internal_dialplan() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dialplan_.Get();
}
inline void BlindTransferRequest::_internal_set_dialplan(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dialplan_.Set(value, GetArena());
}
inline std::string* BlindTransferRequest::_internal_mutable_dialplan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dialplan_.Mutable( GetArena());
}
inline std::string* BlindTransferRequest::release_dialplan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BlindTransferRequest.dialplan)
  return _impl_.dialplan_.Release();
}
inline void BlindTransferRequest::set_allocated_dialplan(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dialplan_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.dialplan_.IsDefault()) {
    _impl_.dialplan_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.BlindTransferRequest.dialplan)
}

// string context = 5;
inline void BlindTransferRequest::clear_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.ClearToEmpty();
}
inline const std::string& BlindTransferRequest::context() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BlindTransferRequest.context)
  return _internal_context();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlindTransferRequest::set_context(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.BlindTransferRequest.context)
}
inline std::string* BlindTransferRequest::mutable_context() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:fs.BlindTransferRequest.context)
  return _s;
}
inline const std::string& BlindTransferRequest::_internal_context() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.context_.Get();
}
inline void BlindTransferRequest::_internal_set_context(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.Set(value, GetArena());
}
inline std::string* BlindTransferRequest::_internal_mutable_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.context_.Mutable( GetArena());
}
inline std::string* BlindTransferRequest::release_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BlindTransferRequest.context)
  return _impl_.context_.Release();
}
inline void BlindTransferRequest::set_allocated_context(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.BlindTransferRequest.context)
}

// -------------------------------------------------------------------

// BlindTransferResponse

// .fs.ErrorExecute error = 1;
inline bool BlindTransferResponse::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void BlindTransferResponse::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fs::ErrorExecute& BlindTransferResponse::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fs::ErrorExecute* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::fs::ErrorExecute&>(::fs::_ErrorExecute_default_instance_);
}
inline const ::fs::ErrorExecute& BlindTransferResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BlindTransferResponse.error)
  return _internal_error();
}
inline void BlindTransferResponse::unsafe_arena_set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.BlindTransferResponse.error)
}
inline ::fs::ErrorExecute* BlindTransferResponse::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* released = _impl_.error_;
  _impl_.error_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::fs::ErrorExecute* BlindTransferResponse::unsafe_arena_release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BlindTransferResponse.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::fs::ErrorExecute* BlindTransferResponse::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fs::ErrorExecute>(GetArena());
    _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(p);
  }
  return _impl_.error_;
}
inline ::fs::ErrorExecute* BlindTransferResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fs::ErrorExecute* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.BlindTransferResponse.error)
  return _msg;
}
inline void BlindTransferResponse::set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  // @@protoc_insertion_point(field_set_allocated:fs.BlindTransferResponse.error)
}

// -------------------------------------------------------------------

// SetEavesdropStateRequest

// string id = 1;
inline void SetEavesdropStateRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& SetEavesdropStateRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.SetEavesdropStateRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetEavesdropStateRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.SetEavesdropStateRequest.id)
}
inline std::string* SetEavesdropStateRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:fs.SetEavesdropStateRequest.id)
  return _s;
}
inline const std::string& SetEavesdropStateRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void SetEavesdropStateRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* SetEavesdropStateRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* SetEavesdropStateRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.SetEavesdropStateRequest.id)
  return _impl_.id_.Release();
}
inline void SetEavesdropStateRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.SetEavesdropStateRequest.id)
}

// string state = 2;
inline void SetEavesdropStateRequest::clear_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_.ClearToEmpty();
}
inline const std::string& SetEavesdropStateRequest::state() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.SetEavesdropStateRequest.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetEavesdropStateRequest::set_state(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.SetEavesdropStateRequest.state)
}
inline std::string* SetEavesdropStateRequest::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:fs.SetEavesdropStateRequest.state)
  return _s;
}
inline const std::string& SetEavesdropStateRequest::_internal_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.state_.Get();
}
inline void SetEavesdropStateRequest::_internal_set_state(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_.Set(value, GetArena());
}
inline std::string* SetEavesdropStateRequest::_internal_mutable_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.state_.Mutable( GetArena());
}
inline std::string* SetEavesdropStateRequest::release_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.SetEavesdropStateRequest.state)
  return _impl_.state_.Release();
}
inline void SetEavesdropStateRequest::set_allocated_state(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.SetEavesdropStateRequest.state)
}

// -------------------------------------------------------------------

// SetEavesdropStateResponse

// .fs.ErrorExecute error = 1;
inline bool SetEavesdropStateResponse::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void SetEavesdropStateResponse::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fs::ErrorExecute& SetEavesdropStateResponse::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fs::ErrorExecute* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::fs::ErrorExecute&>(::fs::_ErrorExecute_default_instance_);
}
inline const ::fs::ErrorExecute& SetEavesdropStateResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.SetEavesdropStateResponse.error)
  return _internal_error();
}
inline void SetEavesdropStateResponse::unsafe_arena_set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.SetEavesdropStateResponse.error)
}
inline ::fs::ErrorExecute* SetEavesdropStateResponse::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* released = _impl_.error_;
  _impl_.error_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::fs::ErrorExecute* SetEavesdropStateResponse::unsafe_arena_release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.SetEavesdropStateResponse.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::fs::ErrorExecute* SetEavesdropStateResponse::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fs::ErrorExecute>(GetArena());
    _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(p);
  }
  return _impl_.error_;
}
inline ::fs::ErrorExecute* SetEavesdropStateResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fs::ErrorExecute* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.SetEavesdropStateResponse.error)
  return _msg;
}
inline void SetEavesdropStateResponse::set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  // @@protoc_insertion_point(field_set_allocated:fs.SetEavesdropStateResponse.error)
}

// -------------------------------------------------------------------

// BroadcastRequest

// string id = 1;
inline void BroadcastRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BroadcastRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BroadcastRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BroadcastRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.BroadcastRequest.id)
}
inline std::string* BroadcastRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:fs.BroadcastRequest.id)
  return _s;
}
inline const std::string& BroadcastRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void BroadcastRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* BroadcastRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* BroadcastRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BroadcastRequest.id)
  return _impl_.id_.Release();
}
inline void BroadcastRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.BroadcastRequest.id)
}

// string args = 2;
inline void BroadcastRequest::clear_args() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.args_.ClearToEmpty();
}
inline const std::string& BroadcastRequest::args() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BroadcastRequest.args)
  return _internal_args();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BroadcastRequest::set_args(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.args_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.BroadcastRequest.args)
}
inline std::string* BroadcastRequest::mutable_args() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_args();
  // @@protoc_insertion_point(field_mutable:fs.BroadcastRequest.args)
  return _s;
}
inline const std::string& BroadcastRequest::_internal_args() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.args_.Get();
}
inline void BroadcastRequest::_internal_set_args(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.args_.Set(value, GetArena());
}
inline std::string* BroadcastRequest::_internal_mutable_args() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.args_.Mutable( GetArena());
}
inline std::string* BroadcastRequest::release_args() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BroadcastRequest.args)
  return _impl_.args_.Release();
}
inline void BroadcastRequest::set_allocated_args(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.args_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.args_.IsDefault()) {
    _impl_.args_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.BroadcastRequest.args)
}

// bool wait_for_answer = 3;
inline void BroadcastRequest::clear_wait_for_answer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wait_for_answer_ = false;
}
inline bool BroadcastRequest::wait_for_answer() const {
  // @@protoc_insertion_point(field_get:fs.BroadcastRequest.wait_for_answer)
  return _internal_wait_for_answer();
}
inline void BroadcastRequest::set_wait_for_answer(bool value) {
  _internal_set_wait_for_answer(value);
  // @@protoc_insertion_point(field_set:fs.BroadcastRequest.wait_for_answer)
}
inline bool BroadcastRequest::_internal_wait_for_answer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.wait_for_answer_;
}
inline void BroadcastRequest::_internal_set_wait_for_answer(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.wait_for_answer_ = value;
}

// string leg = 4;
inline void BroadcastRequest::clear_leg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_.ClearToEmpty();
}
inline const std::string& BroadcastRequest::leg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BroadcastRequest.leg)
  return _internal_leg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BroadcastRequest::set_leg(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.BroadcastRequest.leg)
}
inline std::string* BroadcastRequest::mutable_leg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_leg();
  // @@protoc_insertion_point(field_mutable:fs.BroadcastRequest.leg)
  return _s;
}
inline const std::string& BroadcastRequest::_internal_leg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leg_.Get();
}
inline void BroadcastRequest::_internal_set_leg(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_.Set(value, GetArena());
}
inline std::string* BroadcastRequest::_internal_mutable_leg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.leg_.Mutable( GetArena());
}
inline std::string* BroadcastRequest::release_leg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BroadcastRequest.leg)
  return _impl_.leg_.Release();
}
inline void BroadcastRequest::set_allocated_leg(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.leg_.IsDefault()) {
    _impl_.leg_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.BroadcastRequest.leg)
}

// -------------------------------------------------------------------

// BroadcastResponse

// string data = 1;
inline void BroadcastResponse::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& BroadcastResponse::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BroadcastResponse.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BroadcastResponse::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.BroadcastResponse.data)
}
inline std::string* BroadcastResponse::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:fs.BroadcastResponse.data)
  return _s;
}
inline const std::string& BroadcastResponse::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void BroadcastResponse::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* BroadcastResponse::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* BroadcastResponse::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BroadcastResponse.data)
  return _impl_.data_.Release();
}
inline void BroadcastResponse::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.BroadcastResponse.data)
}

// .fs.ErrorExecute error = 2;
inline bool BroadcastResponse::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void BroadcastResponse::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fs::ErrorExecute& BroadcastResponse::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fs::ErrorExecute* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::fs::ErrorExecute&>(::fs::_ErrorExecute_default_instance_);
}
inline const ::fs::ErrorExecute& BroadcastResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BroadcastResponse.error)
  return _internal_error();
}
inline void BroadcastResponse::unsafe_arena_set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.BroadcastResponse.error)
}
inline ::fs::ErrorExecute* BroadcastResponse::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* released = _impl_.error_;
  _impl_.error_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::fs::ErrorExecute* BroadcastResponse::unsafe_arena_release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BroadcastResponse.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::fs::ErrorExecute* BroadcastResponse::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fs::ErrorExecute>(GetArena());
    _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(p);
  }
  return _impl_.error_;
}
inline ::fs::ErrorExecute* BroadcastResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fs::ErrorExecute* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.BroadcastResponse.error)
  return _msg;
}
inline void BroadcastResponse::set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  // @@protoc_insertion_point(field_set_allocated:fs.BroadcastResponse.error)
}

// -------------------------------------------------------------------

// ConfirmPushRequest

// string id = 1;
inline void ConfirmPushRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ConfirmPushRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.ConfirmPushRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConfirmPushRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.ConfirmPushRequest.id)
}
inline std::string* ConfirmPushRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:fs.ConfirmPushRequest.id)
  return _s;
}
inline const std::string& ConfirmPushRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void ConfirmPushRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* ConfirmPushRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* ConfirmPushRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.ConfirmPushRequest.id)
  return _impl_.id_.Release();
}
inline void ConfirmPushRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.ConfirmPushRequest.id)
}

// -------------------------------------------------------------------

// ConfirmPushResponse

// .fs.ErrorExecute error = 1;
inline bool ConfirmPushResponse::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void ConfirmPushResponse::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fs::ErrorExecute& ConfirmPushResponse::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fs::ErrorExecute* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::fs::ErrorExecute&>(::fs::_ErrorExecute_default_instance_);
}
inline const ::fs::ErrorExecute& ConfirmPushResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.ConfirmPushResponse.error)
  return _internal_error();
}
inline void ConfirmPushResponse::unsafe_arena_set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.ConfirmPushResponse.error)
}
inline ::fs::ErrorExecute* ConfirmPushResponse::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* released = _impl_.error_;
  _impl_.error_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::fs::ErrorExecute* ConfirmPushResponse::unsafe_arena_release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.ConfirmPushResponse.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::fs::ErrorExecute* ConfirmPushResponse::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fs::ErrorExecute>(GetArena());
    _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(p);
  }
  return _impl_.error_;
}
inline ::fs::ErrorExecute* ConfirmPushResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fs::ErrorExecute* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.ConfirmPushResponse.error)
  return _msg;
}
inline void ConfirmPushResponse::set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  // @@protoc_insertion_point(field_set_allocated:fs.ConfirmPushResponse.error)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SetProfileVarRequest

// string id = 1;
inline void SetProfileVarRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& SetProfileVarRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.SetProfileVarRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetProfileVarRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.SetProfileVarRequest.id)
}
inline std::string* SetProfileVarRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:fs.SetProfileVarRequest.id)
  return _s;
}
inline const std::string& SetProfileVarRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void SetProfileVarRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* SetProfileVarRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* SetProfileVarRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.SetProfileVarRequest.id)
  return _impl_.id_.Release();
}
inline void SetProfileVarRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.SetProfileVarRequest.id)
}

// map<string, string> variables = 2;
inline int SetProfileVarRequest::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int SetProfileVarRequest::variables_size() const {
  return _internal_variables_size();
}
inline void SetProfileVarRequest::clear_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.variables_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& SetProfileVarRequest::_internal_variables() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.variables_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& SetProfileVarRequest::variables() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:fs.SetProfileVarRequest.variables)
  return _internal_variables();
}
inline ::google::protobuf::Map<std::string, std::string>* SetProfileVarRequest::_internal_mutable_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.variables_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* SetProfileVarRequest::mutable_variables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:fs.SetProfileVarRequest.variables)
  return _internal_mutable_variables();
}

// -------------------------------------------------------------------

// SetProfileVarResponse

// -------------------------------------------------------------------

// StopPlaybackRequest

// string id = 1;
inline void StopPlaybackRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& StopPlaybackRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.StopPlaybackRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StopPlaybackRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.StopPlaybackRequest.id)
}
inline std::string* StopPlaybackRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:fs.StopPlaybackRequest.id)
  return _s;
}
inline const std::string& StopPlaybackRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void StopPlaybackRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* StopPlaybackRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* StopPlaybackRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.StopPlaybackRequest.id)
  return _impl_.id_.Release();
}
inline void StopPlaybackRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.StopPlaybackRequest.id)
}

// -------------------------------------------------------------------

// StopPlaybackResponse

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BridgeCallRequest

// string leg_a_id = 1;
inline void BridgeCallRequest::clear_leg_a_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_a_id_.ClearToEmpty();
}
inline const std::string& BridgeCallRequest::leg_a_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BridgeCallRequest.leg_a_id)
  return _internal_leg_a_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BridgeCallRequest::set_leg_a_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_a_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.BridgeCallRequest.leg_a_id)
}
inline std::string* BridgeCallRequest::mutable_leg_a_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_leg_a_id();
  // @@protoc_insertion_point(field_mutable:fs.BridgeCallRequest.leg_a_id)
  return _s;
}
inline const std::string& BridgeCallRequest::_internal_leg_a_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leg_a_id_.Get();
}
inline void BridgeCallRequest::_internal_set_leg_a_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_a_id_.Set(value, GetArena());
}
inline std::string* BridgeCallRequest::_internal_mutable_leg_a_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.leg_a_id_.Mutable( GetArena());
}
inline std::string* BridgeCallRequest::release_leg_a_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BridgeCallRequest.leg_a_id)
  return _impl_.leg_a_id_.Release();
}
inline void BridgeCallRequest::set_allocated_leg_a_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_a_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.leg_a_id_.IsDefault()) {
    _impl_.leg_a_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.BridgeCallRequest.leg_a_id)
}

// string leg_b_id = 2;
inline void BridgeCallRequest::clear_leg_b_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_b_id_.ClearToEmpty();
}
inline const std::string& BridgeCallRequest::leg_b_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BridgeCallRequest.leg_b_id)
  return _internal_leg_b_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BridgeCallRequest::set_leg_b_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_b_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.BridgeCallRequest.leg_b_id)
}
inline std::string* BridgeCallRequest::mutable_leg_b_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_leg_b_id();
  // @@protoc_insertion_point(field_mutable:fs.BridgeCallRequest.leg_b_id)
  return _s;
}
inline const std::string& BridgeCallRequest::_internal_leg_b_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leg_b_id_.Get();
}
inline void BridgeCallRequest::_internal_set_leg_b_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_b_id_.Set(value, GetArena());
}
inline std::string* BridgeCallRequest::_internal_mutable_leg_b_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.leg_b_id_.Mutable( GetArena());
}
inline std::string* BridgeCallRequest::release_leg_b_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BridgeCallRequest.leg_b_id)
  return _impl_.leg_b_id_.Release();
}
inline void BridgeCallRequest::set_allocated_leg_b_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_b_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.leg_b_id_.IsDefault()) {
    _impl_.leg_b_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.BridgeCallRequest.leg_b_id)
}

// map<string, string> variables = 3;
inline int BridgeCallRequest::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int BridgeCallRequest::variables_size() const {
  return _internal_variables_size();
}
inline void BridgeCallRequest::clear_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.variables_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& BridgeCallRequest::_internal_variables() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.variables_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& BridgeCallRequest::variables() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:fs.BridgeCallRequest.variables)
  return _internal_variables();
}
inline ::google::protobuf::Map<std::string, std::string>* BridgeCallRequest::_internal_mutable_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.variables_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* BridgeCallRequest::mutable_variables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:fs.BridgeCallRequest.variables)
  return _internal_mutable_variables();
}

// -------------------------------------------------------------------

// BridgeCallResponse

// string uuid = 1;
inline void BridgeCallResponse::clear_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& BridgeCallResponse::uuid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BridgeCallResponse.uuid)
  return _internal_uuid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BridgeCallResponse::set_uuid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.BridgeCallResponse.uuid)
}
inline std::string* BridgeCallResponse::mutable_uuid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:fs.BridgeCallResponse.uuid)
  return _s;
}
inline const std::string& BridgeCallResponse::_internal_uuid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uuid_.Get();
}
inline void BridgeCallResponse::_internal_set_uuid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.Set(value, GetArena());
}
inline std::string* BridgeCallResponse::_internal_mutable_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.uuid_.Mutable( GetArena());
}
inline std::string* BridgeCallResponse::release_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BridgeCallResponse.uuid)
  return _impl_.uuid_.Release();
}
inline void BridgeCallResponse::set_allocated_uuid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.BridgeCallResponse.uuid)
}

// .fs.ErrorExecute error = 2;
inline bool BridgeCallResponse::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void BridgeCallResponse::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fs::ErrorExecute& BridgeCallResponse::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fs::ErrorExecute* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::fs::ErrorExecute&>(::fs::_ErrorExecute_default_instance_);
}
inline const ::fs::ErrorExecute& BridgeCallResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BridgeCallResponse.error)
  return _internal_error();
}
inline void BridgeCallResponse::unsafe_arena_set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.BridgeCallResponse.error)
}
inline ::fs::ErrorExecute* BridgeCallResponse::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* released = _impl_.error_;
  _impl_.error_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::fs::ErrorExecute* BridgeCallResponse::unsafe_arena_release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BridgeCallResponse.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::fs::ErrorExecute* BridgeCallResponse::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fs::ErrorExecute>(GetArena());
    _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(p);
  }
  return _impl_.error_;
}
inline ::fs::ErrorExecute* BridgeCallResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fs::ErrorExecute* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.BridgeCallResponse.error)
  return _msg;
}
inline void BridgeCallResponse::set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  // @@protoc_insertion_point(field_set_allocated:fs.BridgeCallResponse.error)
}

// -------------------------------------------------------------------

// HoldRequest

// repeated string id = 1;
inline int HoldRequest::_internal_id_size() const {
  return _internal_id().size();
}
inline int HoldRequest::id_size() const {
  return _internal_id_size();
}
inline void HoldRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Clear();
}
inline std::string* HoldRequest::add_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_id()->Add();
  // @@protoc_insertion_point(field_add_mutable:fs.HoldRequest.id)
  return _s;
}
inline const std::string& HoldRequest::id(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.HoldRequest.id)
  return _internal_id().Get(index);
}
inline std::string* HoldRequest::mutable_id(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fs.HoldRequest.id)
  return _internal_mutable_id()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void HoldRequest::set_id(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_id()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:fs.HoldRequest.id)
}
template <typename Arg_, typename... Args_>
inline void HoldRequest::add_id(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_id(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:fs.HoldRequest.id)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
HoldRequest::id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fs.HoldRequest.id)
  return _internal_id();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
HoldRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fs.HoldRequest.id)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_id();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
HoldRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
HoldRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.id_;
}

// -------------------------------------------------------------------

// HoldResponse

// repeated string id = 1;
inline int HoldResponse::_internal_id_size() const {
  return _internal_id().size();
}
inline int HoldResponse::id_size() const {
  return _internal_id_size();
}
inline void HoldResponse::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Clear();
}
inline std::string* HoldResponse::add_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_id()->Add();
  // @@protoc_insertion_point(field_add_mutable:fs.HoldResponse.id)
  return _s;
}
inline const std::string& HoldResponse::id(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.HoldResponse.id)
  return _internal_id().Get(index);
}
inline std::string* HoldResponse::mutable_id(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fs.HoldResponse.id)
  return _internal_mutable_id()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void HoldResponse::set_id(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_id()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:fs.HoldResponse.id)
}
template <typename Arg_, typename... Args_>
inline void HoldResponse::add_id(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_id(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:fs.HoldResponse.id)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
HoldResponse::id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fs.HoldResponse.id)
  return _internal_id();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
HoldResponse::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fs.HoldResponse.id)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_id();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
HoldResponse::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
HoldResponse::_internal_mutable_id() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.id_;
}

// -------------------------------------------------------------------

// UnHoldRequest

// repeated string id = 1;
inline int UnHoldRequest::_internal_id_size() const {
  return _internal_id().size();
}
inline int UnHoldRequest::id_size() const {
  return _internal_id_size();
}
inline void UnHoldRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Clear();
}
inline std::string* UnHoldRequest::add_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_id()->Add();
  // @@protoc_insertion_point(field_add_mutable:fs.UnHoldRequest.id)
  return _s;
}
inline const std::string& UnHoldRequest::id(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.UnHoldRequest.id)
  return _internal_id().Get(index);
}
inline std::string* UnHoldRequest::mutable_id(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fs.UnHoldRequest.id)
  return _internal_mutable_id()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void UnHoldRequest::set_id(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_id()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:fs.UnHoldRequest.id)
}
template <typename Arg_, typename... Args_>
inline void UnHoldRequest::add_id(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_id(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:fs.UnHoldRequest.id)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UnHoldRequest::id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fs.UnHoldRequest.id)
  return _internal_id();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UnHoldRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fs.UnHoldRequest.id)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_id();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UnHoldRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UnHoldRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.id_;
}

// -------------------------------------------------------------------

// UnHoldResponse

// repeated string id = 1;
inline int UnHoldResponse::_internal_id_size() const {
  return _internal_id().size();
}
inline int UnHoldResponse::id_size() const {
  return _internal_id_size();
}
inline void UnHoldResponse::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Clear();
}
inline std::string* UnHoldResponse::add_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_id()->Add();
  // @@protoc_insertion_point(field_add_mutable:fs.UnHoldResponse.id)
  return _s;
}
inline const std::string& UnHoldResponse::id(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.UnHoldResponse.id)
  return _internal_id().Get(index);
}
inline std::string* UnHoldResponse::mutable_id(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fs.UnHoldResponse.id)
  return _internal_mutable_id()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void UnHoldResponse::set_id(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_id()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:fs.UnHoldResponse.id)
}
template <typename Arg_, typename... Args_>
inline void UnHoldResponse::add_id(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_id(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:fs.UnHoldResponse.id)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UnHoldResponse::id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fs.UnHoldResponse.id)
  return _internal_id();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UnHoldResponse::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fs.UnHoldResponse.id)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_id();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UnHoldResponse::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UnHoldResponse::_internal_mutable_id() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.id_;
}

// -------------------------------------------------------------------

// HangupManyRequest

// repeated string id = 1;
inline int HangupManyRequest::_internal_id_size() const {
  return _internal_id().size();
}
inline int HangupManyRequest::id_size() const {
  return _internal_id_size();
}
inline void HangupManyRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Clear();
}
inline std::string* HangupManyRequest::add_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_id()->Add();
  // @@protoc_insertion_point(field_add_mutable:fs.HangupManyRequest.id)
  return _s;
}
inline const std::string& HangupManyRequest::id(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.HangupManyRequest.id)
  return _internal_id().Get(index);
}
inline std::string* HangupManyRequest::mutable_id(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fs.HangupManyRequest.id)
  return _internal_mutable_id()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void HangupManyRequest::set_id(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_id()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:fs.HangupManyRequest.id)
}
template <typename Arg_, typename... Args_>
inline void HangupManyRequest::add_id(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_id(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:fs.HangupManyRequest.id)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
HangupManyRequest::id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fs.HangupManyRequest.id)
  return _internal_id();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
HangupManyRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fs.HangupManyRequest.id)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_id();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
HangupManyRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
HangupManyRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.id_;
}

// string cause = 2;
inline void HangupManyRequest::clear_cause() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cause_.ClearToEmpty();
}
inline const std::string& HangupManyRequest::cause() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.HangupManyRequest.cause)
  return _internal_cause();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HangupManyRequest::set_cause(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cause_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.HangupManyRequest.cause)
}
inline std::string* HangupManyRequest::mutable_cause() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cause();
  // @@protoc_insertion_point(field_mutable:fs.HangupManyRequest.cause)
  return _s;
}
inline const std::string& HangupManyRequest::_internal_cause() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cause_.Get();
}
inline void HangupManyRequest::_internal_set_cause(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cause_.Set(value, GetArena());
}
inline std::string* HangupManyRequest::_internal_mutable_cause() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cause_.Mutable( GetArena());
}
inline std::string* HangupManyRequest::release_cause() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.HangupManyRequest.cause)
  return _impl_.cause_.Release();
}
inline void HangupManyRequest::set_allocated_cause(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cause_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cause_.IsDefault()) {
    _impl_.cause_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.HangupManyRequest.cause)
}

// -------------------------------------------------------------------

// HangupManyResponse

// repeated string id = 1;
inline int HangupManyResponse::_internal_id_size() const {
  return _internal_id().size();
}
inline int HangupManyResponse::id_size() const {
  return _internal_id_size();
}
inline void HangupManyResponse::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Clear();
}
inline std::string* HangupManyResponse::add_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_id()->Add();
  // @@protoc_insertion_point(field_add_mutable:fs.HangupManyResponse.id)
  return _s;
}
inline const std::string& HangupManyResponse::id(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.HangupManyResponse.id)
  return _internal_id().Get(index);
}
inline std::string* HangupManyResponse::mutable_id(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fs.HangupManyResponse.id)
  return _internal_mutable_id()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void HangupManyResponse::set_id(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_id()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:fs.HangupManyResponse.id)
}
template <typename Arg_, typename... Args_>
inline void HangupManyResponse::add_id(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_id(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:fs.HangupManyResponse.id)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
HangupManyResponse::id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fs.HangupManyResponse.id)
  return _internal_id();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
HangupManyResponse::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fs.HangupManyResponse.id)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_id();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
HangupManyResponse::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
HangupManyResponse::_internal_mutable_id() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.id_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QueueRequest

// string id = 1;
inline void QueueRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& QueueRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.QueueRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueueRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.QueueRequest.id)
}
inline std::string* QueueRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:fs.QueueRequest.id)
  return _s;
}
inline const std::string& QueueRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void QueueRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* QueueRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* QueueRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.QueueRequest.id)
  return _impl_.id_.Release();
}
inline void QueueRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.QueueRequest.id)
}

// map<string, string> variables = 2;
inline int QueueRequest::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int QueueRequest::variables_size() const {
  return _internal_variables_size();
}
inline void QueueRequest::clear_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.variables_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& QueueRequest::_internal_variables() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.variables_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& QueueRequest::variables() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:fs.QueueRequest.variables)
  return _internal_variables();
}
inline ::google::protobuf::Map<std::string, std::string>* QueueRequest::_internal_mutable_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.variables_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* QueueRequest::mutable_variables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:fs.QueueRequest.variables)
  return _internal_mutable_variables();
}

// string playback_file = 3;
inline void QueueRequest::clear_playback_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playback_file_.ClearToEmpty();
}
inline const std::string& QueueRequest::playback_file() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.QueueRequest.playback_file)
  return _internal_playback_file();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueueRequest::set_playback_file(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playback_file_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.QueueRequest.playback_file)
}
inline std::string* QueueRequest::mutable_playback_file() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_playback_file();
  // @@protoc_insertion_point(field_mutable:fs.QueueRequest.playback_file)
  return _s;
}
inline const std::string& QueueRequest::_internal_playback_file() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.playback_file_.Get();
}
inline void QueueRequest::_internal_set_playback_file(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playback_file_.Set(value, GetArena());
}
inline std::string* QueueRequest::_internal_mutable_playback_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.playback_file_.Mutable( GetArena());
}
inline std::string* QueueRequest::release_playback_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.QueueRequest.playback_file)
  return _impl_.playback_file_.Release();
}
inline void QueueRequest::set_allocated_playback_file(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playback_file_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.playback_file_.IsDefault()) {
    _impl_.playback_file_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.QueueRequest.playback_file)
}

// int32 playback_args = 4;
inline void QueueRequest::clear_playback_args() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playback_args_ = 0;
}
inline ::int32_t QueueRequest::playback_args() const {
  // @@protoc_insertion_point(field_get:fs.QueueRequest.playback_args)
  return _internal_playback_args();
}
inline void QueueRequest::set_playback_args(::int32_t value) {
  _internal_set_playback_args(value);
  // @@protoc_insertion_point(field_set:fs.QueueRequest.playback_args)
}
inline ::int32_t QueueRequest::_internal_playback_args() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.playback_args_;
}
inline void QueueRequest::_internal_set_playback_args(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playback_args_ = value;
}

// -------------------------------------------------------------------

// QueueResponse

// .fs.ErrorExecute error = 1;
inline bool QueueResponse::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void QueueResponse::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fs::ErrorExecute& QueueResponse::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fs::ErrorExecute* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::fs::ErrorExecute&>(::fs::_ErrorExecute_default_instance_);
}
inline const ::fs::ErrorExecute& QueueResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.QueueResponse.error)
  return _internal_error();
}
inline void QueueResponse::unsafe_arena_set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.QueueResponse.error)
}
inline ::fs::ErrorExecute* QueueResponse::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* released = _impl_.error_;
  _impl_.error_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::fs::ErrorExecute* QueueResponse::unsafe_arena_release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.QueueResponse.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::fs::ErrorExecute* QueueResponse::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fs::ErrorExecute>(GetArena());
    _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(p);
  }
  return _impl_.error_;
}
inline ::fs::ErrorExecute* QueueResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fs::ErrorExecute* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.QueueResponse.error)
  return _msg;
}
inline void QueueResponse::set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  // @@protoc_insertion_point(field_set_allocated:fs.QueueResponse.error)
}

// -------------------------------------------------------------------

// ErrorExecute

// string message = 1;
inline void ErrorExecute::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ErrorExecute::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.ErrorExecute.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorExecute::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.ErrorExecute.message)
}
inline std::string* ErrorExecute::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:fs.ErrorExecute.message)
  return _s;
}
inline const std::string& ErrorExecute::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void ErrorExecute::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* ErrorExecute::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* ErrorExecute::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.ErrorExecute.message)
  return _impl_.message_.Release();
}
inline void ErrorExecute::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.ErrorExecute.message)
}

// .fs.ErrorExecute.Type type = 2;
inline void ErrorExecute::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::fs::ErrorExecute_Type ErrorExecute::type() const {
  // @@protoc_insertion_point(field_get:fs.ErrorExecute.type)
  return _internal_type();
}
inline void ErrorExecute::set_type(::fs::ErrorExecute_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:fs.ErrorExecute.type)
}
inline ::fs::ErrorExecute_Type ErrorExecute::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fs::ErrorExecute_Type>(_impl_.type_);
}
inline void ErrorExecute::_internal_set_type(::fs::ErrorExecute_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// ExecuteRequest

// string command = 1;
inline void ExecuteRequest::clear_command() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_.ClearToEmpty();
}
inline const std::string& ExecuteRequest::command() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.ExecuteRequest.command)
  return _internal_command();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExecuteRequest::set_command(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.ExecuteRequest.command)
}
inline std::string* ExecuteRequest::mutable_command() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:fs.ExecuteRequest.command)
  return _s;
}
inline const std::string& ExecuteRequest::_internal_command() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.command_.Get();
}
inline void ExecuteRequest::_internal_set_command(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_.Set(value, GetArena());
}
inline std::string* ExecuteRequest::_internal_mutable_command() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.command_.Mutable( GetArena());
}
inline std::string* ExecuteRequest::release_command() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.ExecuteRequest.command)
  return _impl_.command_.Release();
}
inline void ExecuteRequest::set_allocated_command(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.ExecuteRequest.command)
}

// string args = 2;
inline void ExecuteRequest::clear_args() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.args_.ClearToEmpty();
}
inline const std::string& ExecuteRequest::args() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.ExecuteRequest.args)
  return _internal_args();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExecuteRequest::set_args(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.args_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.ExecuteRequest.args)
}
inline std::string* ExecuteRequest::mutable_args() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_args();
  // @@protoc_insertion_point(field_mutable:fs.ExecuteRequest.args)
  return _s;
}
inline const std::string& ExecuteRequest::_internal_args() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.args_.Get();
}
inline void ExecuteRequest::_internal_set_args(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.args_.Set(value, GetArena());
}
inline std::string* ExecuteRequest::_internal_mutable_args() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.args_.Mutable( GetArena());
}
inline std::string* ExecuteRequest::release_args() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.ExecuteRequest.args)
  return _impl_.args_.Release();
}
inline void ExecuteRequest::set_allocated_args(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.args_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.args_.IsDefault()) {
    _impl_.args_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.ExecuteRequest.args)
}

// -------------------------------------------------------------------

// ExecuteResponse

// string data = 1;
inline void ExecuteResponse::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ExecuteResponse::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.ExecuteResponse.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExecuteResponse::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.ExecuteResponse.data)
}
inline std::string* ExecuteResponse::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:fs.ExecuteResponse.data)
  return _s;
}
inline const std::string& ExecuteResponse::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void ExecuteResponse::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* ExecuteResponse::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* ExecuteResponse::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.ExecuteResponse.data)
  return _impl_.data_.Release();
}
inline void ExecuteResponse::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.ExecuteResponse.data)
}

// .fs.ErrorExecute error = 2;
inline bool ExecuteResponse::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void ExecuteResponse::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fs::ErrorExecute& ExecuteResponse::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fs::ErrorExecute* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::fs::ErrorExecute&>(::fs::_ErrorExecute_default_instance_);
}
inline const ::fs::ErrorExecute& ExecuteResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.ExecuteResponse.error)
  return _internal_error();
}
inline void ExecuteResponse::unsafe_arena_set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.ExecuteResponse.error)
}
inline ::fs::ErrorExecute* ExecuteResponse::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* released = _impl_.error_;
  _impl_.error_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::fs::ErrorExecute* ExecuteResponse::unsafe_arena_release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.ExecuteResponse.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::fs::ErrorExecute* ExecuteResponse::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fs::ErrorExecute>(GetArena());
    _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(p);
  }
  return _impl_.error_;
}
inline ::fs::ErrorExecute* ExecuteResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fs::ErrorExecute* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.ExecuteResponse.error)
  return _msg;
}
inline void ExecuteResponse::set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  // @@protoc_insertion_point(field_set_allocated:fs.ExecuteResponse.error)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HangupRequest

// string uuid = 1;
inline void HangupRequest::clear_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& HangupRequest::uuid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.HangupRequest.uuid)
  return _internal_uuid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HangupRequest::set_uuid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.HangupRequest.uuid)
}
inline std::string* HangupRequest::mutable_uuid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:fs.HangupRequest.uuid)
  return _s;
}
inline const std::string& HangupRequest::_internal_uuid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uuid_.Get();
}
inline void HangupRequest::_internal_set_uuid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.Set(value, GetArena());
}
inline std::string* HangupRequest::_internal_mutable_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.uuid_.Mutable( GetArena());
}
inline std::string* HangupRequest::release_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.HangupRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void HangupRequest::set_allocated_uuid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.HangupRequest.uuid)
}

// string cause = 2;
inline void HangupRequest::clear_cause() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cause_.ClearToEmpty();
}
inline const std::string& HangupRequest::cause() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.HangupRequest.cause)
  return _internal_cause();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HangupRequest::set_cause(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cause_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.HangupRequest.cause)
}
inline std::string* HangupRequest::mutable_cause() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cause();
  // @@protoc_insertion_point(field_mutable:fs.HangupRequest.cause)
  return _s;
}
inline const std::string& HangupRequest::_internal_cause() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cause_.Get();
}
inline void HangupRequest::_internal_set_cause(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cause_.Set(value, GetArena());
}
inline std::string* HangupRequest::_internal_mutable_cause() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cause_.Mutable( GetArena());
}
inline std::string* HangupRequest::release_cause() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.HangupRequest.cause)
  return _impl_.cause_.Release();
}
inline void HangupRequest::set_allocated_cause(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cause_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cause_.IsDefault()) {
    _impl_.cause_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.HangupRequest.cause)
}

// bool reporting = 3;
inline void HangupRequest::clear_reporting() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reporting_ = false;
}
inline bool HangupRequest::reporting() const {
  // @@protoc_insertion_point(field_get:fs.HangupRequest.reporting)
  return _internal_reporting();
}
inline void HangupRequest::set_reporting(bool value) {
  _internal_set_reporting(value);
  // @@protoc_insertion_point(field_set:fs.HangupRequest.reporting)
}
inline bool HangupRequest::_internal_reporting() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reporting_;
}
inline void HangupRequest::_internal_set_reporting(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reporting_ = value;
}

// map<string, string> variables = 4;
inline int HangupRequest::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int HangupRequest::variables_size() const {
  return _internal_variables_size();
}
inline void HangupRequest::clear_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.variables_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& HangupRequest::_internal_variables() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.variables_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& HangupRequest::variables() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:fs.HangupRequest.variables)
  return _internal_variables();
}
inline ::google::protobuf::Map<std::string, std::string>* HangupRequest::_internal_mutable_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.variables_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* HangupRequest::mutable_variables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:fs.HangupRequest.variables)
  return _internal_mutable_variables();
}

// -------------------------------------------------------------------

// HangupResponse

// .fs.ErrorExecute error = 1;
inline bool HangupResponse::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void HangupResponse::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fs::ErrorExecute& HangupResponse::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fs::ErrorExecute* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::fs::ErrorExecute&>(::fs::_ErrorExecute_default_instance_);
}
inline const ::fs::ErrorExecute& HangupResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.HangupResponse.error)
  return _internal_error();
}
inline void HangupResponse::unsafe_arena_set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.HangupResponse.error)
}
inline ::fs::ErrorExecute* HangupResponse::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* released = _impl_.error_;
  _impl_.error_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::fs::ErrorExecute* HangupResponse::unsafe_arena_release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.HangupResponse.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::fs::ErrorExecute* HangupResponse::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fs::ErrorExecute>(GetArena());
    _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(p);
  }
  return _impl_.error_;
}
inline ::fs::ErrorExecute* HangupResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fs::ErrorExecute* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.HangupResponse.error)
  return _msg;
}
inline void HangupResponse::set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  // @@protoc_insertion_point(field_set_allocated:fs.HangupResponse.error)
}

// -------------------------------------------------------------------

// OriginateRequest_Extension

// string appName = 1;
inline void OriginateRequest_Extension::clear_appname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appname_.ClearToEmpty();
}
inline const std::string& OriginateRequest_Extension::appname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.OriginateRequest.Extension.appName)
  return _internal_appname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OriginateRequest_Extension::set_appname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.OriginateRequest.Extension.appName)
}
inline std::string* OriginateRequest_Extension::mutable_appname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_appname();
  // @@protoc_insertion_point(field_mutable:fs.OriginateRequest.Extension.appName)
  return _s;
}
inline const std::string& OriginateRequest_Extension::_internal_appname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.appname_.Get();
}
inline void OriginateRequest_Extension::_internal_set_appname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appname_.Set(value, GetArena());
}
inline std::string* OriginateRequest_Extension::_internal_mutable_appname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.appname_.Mutable( GetArena());
}
inline std::string* OriginateRequest_Extension::release_appname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.OriginateRequest.Extension.appName)
  return _impl_.appname_.Release();
}
inline void OriginateRequest_Extension::set_allocated_appname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.appname_.IsDefault()) {
    _impl_.appname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.OriginateRequest.Extension.appName)
}

// string args = 2;
inline void OriginateRequest_Extension::clear_args() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.args_.ClearToEmpty();
}
inline const std::string& OriginateRequest_Extension::args() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.OriginateRequest.Extension.args)
  return _internal_args();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OriginateRequest_Extension::set_args(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.args_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.OriginateRequest.Extension.args)
}
inline std::string* OriginateRequest_Extension::mutable_args() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_args();
  // @@protoc_insertion_point(field_mutable:fs.OriginateRequest.Extension.args)
  return _s;
}
inline const std::string& OriginateRequest_Extension::_internal_args() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.args_.Get();
}
inline void OriginateRequest_Extension::_internal_set_args(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.args_.Set(value, GetArena());
}
inline std::string* OriginateRequest_Extension::_internal_mutable_args() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.args_.Mutable( GetArena());
}
inline std::string* OriginateRequest_Extension::release_args() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.OriginateRequest.Extension.args)
  return _impl_.args_.Release();
}
inline void OriginateRequest_Extension::set_allocated_args(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.args_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.args_.IsDefault()) {
    _impl_.args_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.OriginateRequest.Extension.args)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OriginateRequest

// map<string, string> variables = 1;
inline int OriginateRequest::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int OriginateRequest::variables_size() const {
  return _internal_variables_size();
}
inline void OriginateRequest::clear_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.variables_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& OriginateRequest::_internal_variables() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.variables_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& OriginateRequest::variables() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:fs.OriginateRequest.variables)
  return _internal_variables();
}
inline ::google::protobuf::Map<std::string, std::string>* OriginateRequest::_internal_mutable_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.variables_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* OriginateRequest::mutable_variables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:fs.OriginateRequest.variables)
  return _internal_mutable_variables();
}

// repeated string endpoints = 2;
inline int OriginateRequest::_internal_endpoints_size() const {
  return _internal_endpoints().size();
}
inline int OriginateRequest::endpoints_size() const {
  return _internal_endpoints_size();
}
inline void OriginateRequest::clear_endpoints() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.endpoints_.Clear();
}
inline std::string* OriginateRequest::add_endpoints() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_endpoints()->Add();
  // @@protoc_insertion_point(field_add_mutable:fs.OriginateRequest.endpoints)
  return _s;
}
inline const std::string& OriginateRequest::endpoints(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.OriginateRequest.endpoints)
  return _internal_endpoints().Get(index);
}
inline std::string* OriginateRequest::mutable_endpoints(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fs.OriginateRequest.endpoints)
  return _internal_mutable_endpoints()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void OriginateRequest::set_endpoints(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_endpoints()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:fs.OriginateRequest.endpoints)
}
template <typename Arg_, typename... Args_>
inline void OriginateRequest::add_endpoints(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_endpoints(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:fs.OriginateRequest.endpoints)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
OriginateRequest::endpoints() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fs.OriginateRequest.endpoints)
  return _internal_endpoints();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
OriginateRequest::mutable_endpoints() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fs.OriginateRequest.endpoints)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_endpoints();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
OriginateRequest::_internal_endpoints() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.endpoints_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
OriginateRequest::_internal_mutable_endpoints() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.endpoints_;
}

// .fs.OriginateRequest.Strategy strategy = 3;
inline void OriginateRequest::clear_strategy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_ = 0;
}
inline ::fs::OriginateRequest_Strategy OriginateRequest::strategy() const {
  // @@protoc_insertion_point(field_get:fs.OriginateRequest.strategy)
  return _internal_strategy();
}
inline void OriginateRequest::set_strategy(::fs::OriginateRequest_Strategy value) {
  _internal_set_strategy(value);
  // @@protoc_insertion_point(field_set:fs.OriginateRequest.strategy)
}
inline ::fs::OriginateRequest_Strategy OriginateRequest::_internal_strategy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fs::OriginateRequest_Strategy>(_impl_.strategy_);
}
inline void OriginateRequest::_internal_set_strategy(::fs::OriginateRequest_Strategy value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_ = value;
}

// string destination = 4;
inline void OriginateRequest::clear_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_.ClearToEmpty();
}
inline const std::string& OriginateRequest::destination() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.OriginateRequest.destination)
  return _internal_destination();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OriginateRequest::set_destination(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.OriginateRequest.destination)
}
inline std::string* OriginateRequest::mutable_destination() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:fs.OriginateRequest.destination)
  return _s;
}
inline const std::string& OriginateRequest::_internal_destination() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.destination_.Get();
}
inline void OriginateRequest::_internal_set_destination(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_.Set(value, GetArena());
}
inline std::string* OriginateRequest::_internal_mutable_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.destination_.Mutable( GetArena());
}
inline std::string* OriginateRequest::release_destination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.OriginateRequest.destination)
  return _impl_.destination_.Release();
}
inline void OriginateRequest::set_allocated_destination(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.destination_.IsDefault()) {
    _impl_.destination_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.OriginateRequest.destination)
}

// int32 timeout = 5;
inline void OriginateRequest::clear_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeout_ = 0;
}
inline ::int32_t OriginateRequest::timeout() const {
  // @@protoc_insertion_point(field_get:fs.OriginateRequest.timeout)
  return _internal_timeout();
}
inline void OriginateRequest::set_timeout(::int32_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:fs.OriginateRequest.timeout)
}
inline ::int32_t OriginateRequest::_internal_timeout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timeout_;
}
inline void OriginateRequest::_internal_set_timeout(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeout_ = value;
}

// string callerNumber = 6;
inline void OriginateRequest::clear_callernumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callernumber_.ClearToEmpty();
}
inline const std::string& OriginateRequest::callernumber() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.OriginateRequest.callerNumber)
  return _internal_callernumber();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OriginateRequest::set_callernumber(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callernumber_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.OriginateRequest.callerNumber)
}
inline std::string* OriginateRequest::mutable_callernumber() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_callernumber();
  // @@protoc_insertion_point(field_mutable:fs.OriginateRequest.callerNumber)
  return _s;
}
inline const std::string& OriginateRequest::_internal_callernumber() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.callernumber_.Get();
}
inline void OriginateRequest::_internal_set_callernumber(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callernumber_.Set(value, GetArena());
}
inline std::string* OriginateRequest::_internal_mutable_callernumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.callernumber_.Mutable( GetArena());
}
inline std::string* OriginateRequest::release_callernumber() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.OriginateRequest.callerNumber)
  return _impl_.callernumber_.Release();
}
inline void OriginateRequest::set_allocated_callernumber(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callernumber_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.callernumber_.IsDefault()) {
    _impl_.callernumber_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.OriginateRequest.callerNumber)
}

// string callerName = 7;
inline void OriginateRequest::clear_callername() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callername_.ClearToEmpty();
}
inline const std::string& OriginateRequest::callername() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.OriginateRequest.callerName)
  return _internal_callername();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OriginateRequest::set_callername(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callername_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.OriginateRequest.callerName)
}
inline std::string* OriginateRequest::mutable_callername() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_callername();
  // @@protoc_insertion_point(field_mutable:fs.OriginateRequest.callerName)
  return _s;
}
inline const std::string& OriginateRequest::_internal_callername() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.callername_.Get();
}
inline void OriginateRequest::_internal_set_callername(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callername_.Set(value, GetArena());
}
inline std::string* OriginateRequest::_internal_mutable_callername() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.callername_.Mutable( GetArena());
}
inline std::string* OriginateRequest::release_callername() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.OriginateRequest.callerName)
  return _impl_.callername_.Release();
}
inline void OriginateRequest::set_allocated_callername(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.callername_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.callername_.IsDefault()) {
    _impl_.callername_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.OriginateRequest.callerName)
}

// string context = 8;
inline void OriginateRequest::clear_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.ClearToEmpty();
}
inline const std::string& OriginateRequest::context() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.OriginateRequest.context)
  return _internal_context();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OriginateRequest::set_context(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.OriginateRequest.context)
}
inline std::string* OriginateRequest::mutable_context() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:fs.OriginateRequest.context)
  return _s;
}
inline const std::string& OriginateRequest::_internal_context() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.context_.Get();
}
inline void OriginateRequest::_internal_set_context(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.Set(value, GetArena());
}
inline std::string* OriginateRequest::_internal_mutable_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.context_.Mutable( GetArena());
}
inline std::string* OriginateRequest::release_context() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.OriginateRequest.context)
  return _impl_.context_.Release();
}
inline void OriginateRequest::set_allocated_context(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.context_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.OriginateRequest.context)
}

// string dialplan = 9;
inline void OriginateRequest::clear_dialplan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dialplan_.ClearToEmpty();
}
inline const std::string& OriginateRequest::dialplan() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.OriginateRequest.dialplan)
  return _internal_dialplan();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OriginateRequest::set_dialplan(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dialplan_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.OriginateRequest.dialplan)
}
inline std::string* OriginateRequest::mutable_dialplan() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dialplan();
  // @@protoc_insertion_point(field_mutable:fs.OriginateRequest.dialplan)
  return _s;
}
inline const std::string& OriginateRequest::_internal_dialplan() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dialplan_.Get();
}
inline void OriginateRequest::_internal_set_dialplan(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dialplan_.Set(value, GetArena());
}
inline std::string* OriginateRequest::_internal_mutable_dialplan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dialplan_.Mutable( GetArena());
}
inline std::string* OriginateRequest::release_dialplan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.OriginateRequest.dialplan)
  return _impl_.dialplan_.Release();
}
inline void OriginateRequest::set_allocated_dialplan(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dialplan_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.dialplan_.IsDefault()) {
    _impl_.dialplan_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.OriginateRequest.dialplan)
}

// repeated .fs.OriginateRequest.Extension extensions = 10;
inline int OriginateRequest::_internal_extensions_size() const {
  return _internal_extensions().size();
}
inline int OriginateRequest::extensions_size() const {
  return _internal_extensions_size();
}
inline void OriginateRequest::clear_extensions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extensions_.Clear();
}
inline ::fs::OriginateRequest_Extension* OriginateRequest::mutable_extensions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fs.OriginateRequest.extensions)
  return _internal_mutable_extensions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fs::OriginateRequest_Extension>* OriginateRequest::mutable_extensions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fs.OriginateRequest.extensions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_extensions();
}
inline const ::fs::OriginateRequest_Extension& OriginateRequest::extensions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.OriginateRequest.extensions)
  return _internal_extensions().Get(index);
}
inline ::fs::OriginateRequest_Extension* OriginateRequest::add_extensions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fs::OriginateRequest_Extension* _add = _internal_mutable_extensions()->Add();
  // @@protoc_insertion_point(field_add:fs.OriginateRequest.extensions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fs::OriginateRequest_Extension>& OriginateRequest::extensions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fs.OriginateRequest.extensions)
  return _internal_extensions();
}
inline const ::google::protobuf::RepeatedPtrField<::fs::OriginateRequest_Extension>&
OriginateRequest::_internal_extensions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extensions_;
}
inline ::google::protobuf::RepeatedPtrField<::fs::OriginateRequest_Extension>*
OriginateRequest::_internal_mutable_extensions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.extensions_;
}

// string check_id = 11;
inline void OriginateRequest::clear_check_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.check_id_.ClearToEmpty();
}
inline const std::string& OriginateRequest::check_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.OriginateRequest.check_id)
  return _internal_check_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OriginateRequest::set_check_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.check_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.OriginateRequest.check_id)
}
inline std::string* OriginateRequest::mutable_check_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_check_id();
  // @@protoc_insertion_point(field_mutable:fs.OriginateRequest.check_id)
  return _s;
}
inline const std::string& OriginateRequest::_internal_check_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.check_id_.Get();
}
inline void OriginateRequest::_internal_set_check_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.check_id_.Set(value, GetArena());
}
inline std::string* OriginateRequest::_internal_mutable_check_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.check_id_.Mutable( GetArena());
}
inline std::string* OriginateRequest::release_check_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.OriginateRequest.check_id)
  return _impl_.check_id_.Release();
}
inline void OriginateRequest::set_allocated_check_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.check_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.check_id_.IsDefault()) {
    _impl_.check_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.OriginateRequest.check_id)
}

// -------------------------------------------------------------------

// OriginateResponse

// string uuid = 1;
inline void OriginateResponse::clear_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& OriginateResponse::uuid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.OriginateResponse.uuid)
  return _internal_uuid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OriginateResponse::set_uuid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.OriginateResponse.uuid)
}
inline std::string* OriginateResponse::mutable_uuid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:fs.OriginateResponse.uuid)
  return _s;
}
inline const std::string& OriginateResponse::_internal_uuid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uuid_.Get();
}
inline void OriginateResponse::_internal_set_uuid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.Set(value, GetArena());
}
inline std::string* OriginateResponse::_internal_mutable_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.uuid_.Mutable( GetArena());
}
inline std::string* OriginateResponse::release_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.OriginateResponse.uuid)
  return _impl_.uuid_.Release();
}
inline void OriginateResponse::set_allocated_uuid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.OriginateResponse.uuid)
}

// .fs.ErrorExecute error = 2;
inline bool OriginateResponse::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void OriginateResponse::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fs::ErrorExecute& OriginateResponse::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fs::ErrorExecute* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::fs::ErrorExecute&>(::fs::_ErrorExecute_default_instance_);
}
inline const ::fs::ErrorExecute& OriginateResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.OriginateResponse.error)
  return _internal_error();
}
inline void OriginateResponse::unsafe_arena_set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.OriginateResponse.error)
}
inline ::fs::ErrorExecute* OriginateResponse::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* released = _impl_.error_;
  _impl_.error_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::fs::ErrorExecute* OriginateResponse::unsafe_arena_release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.OriginateResponse.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::fs::ErrorExecute* OriginateResponse::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fs::ErrorExecute>(GetArena());
    _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(p);
  }
  return _impl_.error_;
}
inline ::fs::ErrorExecute* OriginateResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fs::ErrorExecute* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.OriginateResponse.error)
  return _msg;
}
inline void OriginateResponse::set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  // @@protoc_insertion_point(field_set_allocated:fs.OriginateResponse.error)
}

// int32 error_code = 3;
inline void OriginateResponse::clear_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_ = 0;
}
inline ::int32_t OriginateResponse::error_code() const {
  // @@protoc_insertion_point(field_get:fs.OriginateResponse.error_code)
  return _internal_error_code();
}
inline void OriginateResponse::set_error_code(::int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:fs.OriginateResponse.error_code)
}
inline ::int32_t OriginateResponse::_internal_error_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_code_;
}
inline void OriginateResponse::_internal_set_error_code(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_ = value;
}

// -------------------------------------------------------------------

// BridgeRequest

// string leg_a_id = 1;
inline void BridgeRequest::clear_leg_a_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_a_id_.ClearToEmpty();
}
inline const std::string& BridgeRequest::leg_a_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BridgeRequest.leg_a_id)
  return _internal_leg_a_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BridgeRequest::set_leg_a_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_a_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.BridgeRequest.leg_a_id)
}
inline std::string* BridgeRequest::mutable_leg_a_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_leg_a_id();
  // @@protoc_insertion_point(field_mutable:fs.BridgeRequest.leg_a_id)
  return _s;
}
inline const std::string& BridgeRequest::_internal_leg_a_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leg_a_id_.Get();
}
inline void BridgeRequest::_internal_set_leg_a_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_a_id_.Set(value, GetArena());
}
inline std::string* BridgeRequest::_internal_mutable_leg_a_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.leg_a_id_.Mutable( GetArena());
}
inline std::string* BridgeRequest::release_leg_a_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BridgeRequest.leg_a_id)
  return _impl_.leg_a_id_.Release();
}
inline void BridgeRequest::set_allocated_leg_a_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_a_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.leg_a_id_.IsDefault()) {
    _impl_.leg_a_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.BridgeRequest.leg_a_id)
}

// string leg_b_id = 2;
inline void BridgeRequest::clear_leg_b_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_b_id_.ClearToEmpty();
}
inline const std::string& BridgeRequest::leg_b_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BridgeRequest.leg_b_id)
  return _internal_leg_b_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BridgeRequest::set_leg_b_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_b_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.BridgeRequest.leg_b_id)
}
inline std::string* BridgeRequest::mutable_leg_b_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_leg_b_id();
  // @@protoc_insertion_point(field_mutable:fs.BridgeRequest.leg_b_id)
  return _s;
}
inline const std::string& BridgeRequest::_internal_leg_b_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leg_b_id_.Get();
}
inline void BridgeRequest::_internal_set_leg_b_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_b_id_.Set(value, GetArena());
}
inline std::string* BridgeRequest::_internal_mutable_leg_b_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.leg_b_id_.Mutable( GetArena());
}
inline std::string* BridgeRequest::release_leg_b_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BridgeRequest.leg_b_id)
  return _impl_.leg_b_id_.Release();
}
inline void BridgeRequest::set_allocated_leg_b_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_b_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.leg_b_id_.IsDefault()) {
    _impl_.leg_b_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.BridgeRequest.leg_b_id)
}

// string leg_b_reserve_id = 3;
inline void BridgeRequest::clear_leg_b_reserve_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_b_reserve_id_.ClearToEmpty();
}
inline const std::string& BridgeRequest::leg_b_reserve_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BridgeRequest.leg_b_reserve_id)
  return _internal_leg_b_reserve_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BridgeRequest::set_leg_b_reserve_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_b_reserve_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.BridgeRequest.leg_b_reserve_id)
}
inline std::string* BridgeRequest::mutable_leg_b_reserve_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_leg_b_reserve_id();
  // @@protoc_insertion_point(field_mutable:fs.BridgeRequest.leg_b_reserve_id)
  return _s;
}
inline const std::string& BridgeRequest::_internal_leg_b_reserve_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leg_b_reserve_id_.Get();
}
inline void BridgeRequest::_internal_set_leg_b_reserve_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_b_reserve_id_.Set(value, GetArena());
}
inline std::string* BridgeRequest::_internal_mutable_leg_b_reserve_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.leg_b_reserve_id_.Mutable( GetArena());
}
inline std::string* BridgeRequest::release_leg_b_reserve_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BridgeRequest.leg_b_reserve_id)
  return _impl_.leg_b_reserve_id_.Release();
}
inline void BridgeRequest::set_allocated_leg_b_reserve_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leg_b_reserve_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.leg_b_reserve_id_.IsDefault()) {
    _impl_.leg_b_reserve_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.BridgeRequest.leg_b_reserve_id)
}

// -------------------------------------------------------------------

// BridgeResponse

// string uuid = 1;
inline void BridgeResponse::clear_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& BridgeResponse::uuid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BridgeResponse.uuid)
  return _internal_uuid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BridgeResponse::set_uuid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.BridgeResponse.uuid)
}
inline std::string* BridgeResponse::mutable_uuid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:fs.BridgeResponse.uuid)
  return _s;
}
inline const std::string& BridgeResponse::_internal_uuid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uuid_.Get();
}
inline void BridgeResponse::_internal_set_uuid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.Set(value, GetArena());
}
inline std::string* BridgeResponse::_internal_mutable_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.uuid_.Mutable( GetArena());
}
inline std::string* BridgeResponse::release_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BridgeResponse.uuid)
  return _impl_.uuid_.Release();
}
inline void BridgeResponse::set_allocated_uuid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.BridgeResponse.uuid)
}

// .fs.ErrorExecute error = 2;
inline bool BridgeResponse::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void BridgeResponse::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fs::ErrorExecute& BridgeResponse::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fs::ErrorExecute* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::fs::ErrorExecute&>(::fs::_ErrorExecute_default_instance_);
}
inline const ::fs::ErrorExecute& BridgeResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.BridgeResponse.error)
  return _internal_error();
}
inline void BridgeResponse::unsafe_arena_set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.BridgeResponse.error)
}
inline ::fs::ErrorExecute* BridgeResponse::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* released = _impl_.error_;
  _impl_.error_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::fs::ErrorExecute* BridgeResponse::unsafe_arena_release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.BridgeResponse.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::fs::ErrorExecute* BridgeResponse::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fs::ErrorExecute>(GetArena());
    _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(p);
  }
  return _impl_.error_;
}
inline ::fs::ErrorExecute* BridgeResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fs::ErrorExecute* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.BridgeResponse.error)
  return _msg;
}
inline void BridgeResponse::set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  // @@protoc_insertion_point(field_set_allocated:fs.BridgeResponse.error)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SetVariablesRequest

// string uuid = 1;
inline void SetVariablesRequest::clear_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& SetVariablesRequest::uuid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.SetVariablesRequest.uuid)
  return _internal_uuid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetVariablesRequest::set_uuid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.SetVariablesRequest.uuid)
}
inline std::string* SetVariablesRequest::mutable_uuid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:fs.SetVariablesRequest.uuid)
  return _s;
}
inline const std::string& SetVariablesRequest::_internal_uuid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uuid_.Get();
}
inline void SetVariablesRequest::_internal_set_uuid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.Set(value, GetArena());
}
inline std::string* SetVariablesRequest::_internal_mutable_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.uuid_.Mutable( GetArena());
}
inline std::string* SetVariablesRequest::release_uuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.SetVariablesRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void SetVariablesRequest::set_allocated_uuid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uuid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.SetVariablesRequest.uuid)
}

// map<string, string> variables = 2;
inline int SetVariablesRequest::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int SetVariablesRequest::variables_size() const {
  return _internal_variables_size();
}
inline void SetVariablesRequest::clear_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.variables_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& SetVariablesRequest::_internal_variables() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.variables_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& SetVariablesRequest::variables() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:fs.SetVariablesRequest.variables)
  return _internal_variables();
}
inline ::google::protobuf::Map<std::string, std::string>* SetVariablesRequest::_internal_mutable_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.variables_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* SetVariablesRequest::mutable_variables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:fs.SetVariablesRequest.variables)
  return _internal_mutable_variables();
}

// -------------------------------------------------------------------

// SetVariablesResponse

// .fs.ErrorExecute error = 1;
inline bool SetVariablesResponse::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void SetVariablesResponse::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fs::ErrorExecute& SetVariablesResponse::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fs::ErrorExecute* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::fs::ErrorExecute&>(::fs::_ErrorExecute_default_instance_);
}
inline const ::fs::ErrorExecute& SetVariablesResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.SetVariablesResponse.error)
  return _internal_error();
}
inline void SetVariablesResponse::unsafe_arena_set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fs.SetVariablesResponse.error)
}
inline ::fs::ErrorExecute* SetVariablesResponse::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* released = _impl_.error_;
  _impl_.error_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::fs::ErrorExecute* SetVariablesResponse::unsafe_arena_release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.SetVariablesResponse.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fs::ErrorExecute* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::fs::ErrorExecute* SetVariablesResponse::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fs::ErrorExecute>(GetArena());
    _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(p);
  }
  return _impl_.error_;
}
inline ::fs::ErrorExecute* SetVariablesResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fs::ErrorExecute* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.SetVariablesResponse.error)
  return _msg;
}
inline void SetVariablesResponse::set_allocated_error(::fs::ErrorExecute* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::fs::ErrorExecute*>(value);
  // @@protoc_insertion_point(field_set_allocated:fs.SetVariablesResponse.error)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HangupMatchingVarsReqeust

// string cause = 1;
inline void HangupMatchingVarsReqeust::clear_cause() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cause_.ClearToEmpty();
}
inline const std::string& HangupMatchingVarsReqeust::cause() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fs.HangupMatchingVarsReqeust.cause)
  return _internal_cause();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HangupMatchingVarsReqeust::set_cause(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cause_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fs.HangupMatchingVarsReqeust.cause)
}
inline std::string* HangupMatchingVarsReqeust::mutable_cause() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cause();
  // @@protoc_insertion_point(field_mutable:fs.HangupMatchingVarsReqeust.cause)
  return _s;
}
inline const std::string& HangupMatchingVarsReqeust::_internal_cause() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cause_.Get();
}
inline void HangupMatchingVarsReqeust::_internal_set_cause(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cause_.Set(value, GetArena());
}
inline std::string* HangupMatchingVarsReqeust::_internal_mutable_cause() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cause_.Mutable( GetArena());
}
inline std::string* HangupMatchingVarsReqeust::release_cause() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fs.HangupMatchingVarsReqeust.cause)
  return _impl_.cause_.Release();
}
inline void HangupMatchingVarsReqeust::set_allocated_cause(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cause_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cause_.IsDefault()) {
    _impl_.cause_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:fs.HangupMatchingVarsReqeust.cause)
}

// map<string, string> variables = 2;
inline int HangupMatchingVarsReqeust::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int HangupMatchingVarsReqeust::variables_size() const {
  return _internal_variables_size();
}
inline void HangupMatchingVarsReqeust::clear_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.variables_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& HangupMatchingVarsReqeust::_internal_variables() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.variables_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& HangupMatchingVarsReqeust::variables() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:fs.HangupMatchingVarsReqeust.variables)
  return _internal_variables();
}
inline ::google::protobuf::Map<std::string, std::string>* HangupMatchingVarsReqeust::_internal_mutable_variables() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.variables_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* HangupMatchingVarsReqeust::mutable_variables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:fs.HangupMatchingVarsReqeust.variables)
  return _internal_mutable_variables();
}

// -------------------------------------------------------------------

// HangupMatchingVarsResponse

// int32 count = 1;
inline void HangupMatchingVarsResponse::clear_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = 0;
}
inline ::int32_t HangupMatchingVarsResponse::count() const {
  // @@protoc_insertion_point(field_get:fs.HangupMatchingVarsResponse.count)
  return _internal_count();
}
inline void HangupMatchingVarsResponse::set_count(::int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:fs.HangupMatchingVarsResponse.count)
}
inline ::int32_t HangupMatchingVarsResponse::_internal_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.count_;
}
inline void HangupMatchingVarsResponse::_internal_set_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace fs


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::fs::ErrorExecute_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fs::ErrorExecute_Type>() {
  return ::fs::ErrorExecute_Type_descriptor();
}
template <>
struct is_proto_enum<::fs::OriginateRequest_Strategy> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fs::OriginateRequest_Strategy>() {
  return ::fs::OriginateRequest_Strategy_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // fs_2eproto_2epb_2eh
