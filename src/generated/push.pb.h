// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: push.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_push_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_push_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_push_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_push_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_push_2eproto;
namespace engine {
class SendPushRequest;
struct SendPushRequestDefaultTypeInternal;
extern SendPushRequestDefaultTypeInternal _SendPushRequest_default_instance_;
class SendPushRequest_DataEntry_DoNotUse;
struct SendPushRequest_DataEntry_DoNotUseDefaultTypeInternal;
extern SendPushRequest_DataEntry_DoNotUseDefaultTypeInternal _SendPushRequest_DataEntry_DoNotUse_default_instance_;
class SendPushResponse;
struct SendPushResponseDefaultTypeInternal;
extern SendPushResponseDefaultTypeInternal _SendPushResponse_default_instance_;
}  // namespace engine
PROTOBUF_NAMESPACE_OPEN
template<> ::engine::SendPushRequest* Arena::CreateMaybeMessage<::engine::SendPushRequest>(Arena*);
template<> ::engine::SendPushRequest_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::engine::SendPushRequest_DataEntry_DoNotUse>(Arena*);
template<> ::engine::SendPushResponse* Arena::CreateMaybeMessage<::engine::SendPushResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace engine {

// ===================================================================

class SendPushRequest_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SendPushRequest_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SendPushRequest_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SendPushRequest_DataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SendPushRequest_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SendPushRequest_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SendPushRequest_DataEntry_DoNotUse& other);
  static const SendPushRequest_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SendPushRequest_DataEntry_DoNotUse*>(&_SendPushRequest_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "engine.SendPushRequest.DataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "engine.SendPushRequest.DataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_push_2eproto;
};

// -------------------------------------------------------------------

class SendPushRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:engine.SendPushRequest) */ {
 public:
  inline SendPushRequest() : SendPushRequest(nullptr) {}
  ~SendPushRequest() override;
  explicit PROTOBUF_CONSTEXPR SendPushRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendPushRequest(const SendPushRequest& from);
  SendPushRequest(SendPushRequest&& from) noexcept
    : SendPushRequest() {
    *this = ::std::move(from);
  }

  inline SendPushRequest& operator=(const SendPushRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPushRequest& operator=(SendPushRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendPushRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendPushRequest* internal_default_instance() {
    return reinterpret_cast<const SendPushRequest*>(
               &_SendPushRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendPushRequest& a, SendPushRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPushRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPushRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendPushRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendPushRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendPushRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendPushRequest& from) {
    SendPushRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPushRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "engine.SendPushRequest";
  }
  protected:
  explicit SendPushRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAndroidFieldNumber = 1,
    kAppleFieldNumber = 2,
    kDataFieldNumber = 5,
    kExpirationFieldNumber = 3,
    kPriorityFieldNumber = 4,
  };
  // repeated string android = 1;
  int android_size() const;
  private:
  int _internal_android_size() const;
  public:
  void clear_android();
  const std::string& android(int index) const;
  std::string* mutable_android(int index);
  void set_android(int index, const std::string& value);
  void set_android(int index, std::string&& value);
  void set_android(int index, const char* value);
  void set_android(int index, const char* value, size_t size);
  std::string* add_android();
  void add_android(const std::string& value);
  void add_android(std::string&& value);
  void add_android(const char* value);
  void add_android(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& android() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_android();
  private:
  const std::string& _internal_android(int index) const;
  std::string* _internal_add_android();
  public:

  // repeated string apple = 2;
  int apple_size() const;
  private:
  int _internal_apple_size() const;
  public:
  void clear_apple();
  const std::string& apple(int index) const;
  std::string* mutable_apple(int index);
  void set_apple(int index, const std::string& value);
  void set_apple(int index, std::string&& value);
  void set_apple(int index, const char* value);
  void set_apple(int index, const char* value, size_t size);
  std::string* add_apple();
  void add_apple(const std::string& value);
  void add_apple(std::string&& value);
  void add_apple(const char* value);
  void add_apple(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& apple() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_apple();
  private:
  const std::string& _internal_apple(int index) const;
  std::string* _internal_add_apple();
  public:

  // map<string, string> data = 5;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_data();

  // int64 expiration = 3;
  void clear_expiration();
  int64_t expiration() const;
  void set_expiration(int64_t value);
  private:
  int64_t _internal_expiration() const;
  void _internal_set_expiration(int64_t value);
  public:

  // int32 priority = 4;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:engine.SendPushRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> android_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> apple_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SendPushRequest_DataEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> data_;
    int64_t expiration_;
    int32_t priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_push_2eproto;
};
// -------------------------------------------------------------------

class SendPushResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:engine.SendPushResponse) */ {
 public:
  inline SendPushResponse() : SendPushResponse(nullptr) {}
  ~SendPushResponse() override;
  explicit PROTOBUF_CONSTEXPR SendPushResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendPushResponse(const SendPushResponse& from);
  SendPushResponse(SendPushResponse&& from) noexcept
    : SendPushResponse() {
    *this = ::std::move(from);
  }

  inline SendPushResponse& operator=(const SendPushResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPushResponse& operator=(SendPushResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendPushResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendPushResponse* internal_default_instance() {
    return reinterpret_cast<const SendPushResponse*>(
               &_SendPushResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SendPushResponse& a, SendPushResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPushResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPushResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendPushResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendPushResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendPushResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendPushResponse& from) {
    SendPushResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPushResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "engine.SendPushResponse";
  }
  protected:
  explicit SendPushResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendFieldNumber = 1,
  };
  // int32 send = 1;
  void clear_send();
  int32_t send() const;
  void set_send(int32_t value);
  private:
  int32_t _internal_send() const;
  void _internal_set_send(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:engine.SendPushResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t send_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_push_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SendPushRequest

// repeated string android = 1;
inline int SendPushRequest::_internal_android_size() const {
  return _impl_.android_.size();
}
inline int SendPushRequest::android_size() const {
  return _internal_android_size();
}
inline void SendPushRequest::clear_android() {
  _impl_.android_.Clear();
}
inline std::string* SendPushRequest::add_android() {
  std::string* _s = _internal_add_android();
  // @@protoc_insertion_point(field_add_mutable:engine.SendPushRequest.android)
  return _s;
}
inline const std::string& SendPushRequest::_internal_android(int index) const {
  return _impl_.android_.Get(index);
}
inline const std::string& SendPushRequest::android(int index) const {
  // @@protoc_insertion_point(field_get:engine.SendPushRequest.android)
  return _internal_android(index);
}
inline std::string* SendPushRequest::mutable_android(int index) {
  // @@protoc_insertion_point(field_mutable:engine.SendPushRequest.android)
  return _impl_.android_.Mutable(index);
}
inline void SendPushRequest::set_android(int index, const std::string& value) {
  _impl_.android_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:engine.SendPushRequest.android)
}
inline void SendPushRequest::set_android(int index, std::string&& value) {
  _impl_.android_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:engine.SendPushRequest.android)
}
inline void SendPushRequest::set_android(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.android_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:engine.SendPushRequest.android)
}
inline void SendPushRequest::set_android(int index, const char* value, size_t size) {
  _impl_.android_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:engine.SendPushRequest.android)
}
inline std::string* SendPushRequest::_internal_add_android() {
  return _impl_.android_.Add();
}
inline void SendPushRequest::add_android(const std::string& value) {
  _impl_.android_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:engine.SendPushRequest.android)
}
inline void SendPushRequest::add_android(std::string&& value) {
  _impl_.android_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:engine.SendPushRequest.android)
}
inline void SendPushRequest::add_android(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.android_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:engine.SendPushRequest.android)
}
inline void SendPushRequest::add_android(const char* value, size_t size) {
  _impl_.android_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:engine.SendPushRequest.android)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SendPushRequest::android() const {
  // @@protoc_insertion_point(field_list:engine.SendPushRequest.android)
  return _impl_.android_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SendPushRequest::mutable_android() {
  // @@protoc_insertion_point(field_mutable_list:engine.SendPushRequest.android)
  return &_impl_.android_;
}

// repeated string apple = 2;
inline int SendPushRequest::_internal_apple_size() const {
  return _impl_.apple_.size();
}
inline int SendPushRequest::apple_size() const {
  return _internal_apple_size();
}
inline void SendPushRequest::clear_apple() {
  _impl_.apple_.Clear();
}
inline std::string* SendPushRequest::add_apple() {
  std::string* _s = _internal_add_apple();
  // @@protoc_insertion_point(field_add_mutable:engine.SendPushRequest.apple)
  return _s;
}
inline const std::string& SendPushRequest::_internal_apple(int index) const {
  return _impl_.apple_.Get(index);
}
inline const std::string& SendPushRequest::apple(int index) const {
  // @@protoc_insertion_point(field_get:engine.SendPushRequest.apple)
  return _internal_apple(index);
}
inline std::string* SendPushRequest::mutable_apple(int index) {
  // @@protoc_insertion_point(field_mutable:engine.SendPushRequest.apple)
  return _impl_.apple_.Mutable(index);
}
inline void SendPushRequest::set_apple(int index, const std::string& value) {
  _impl_.apple_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:engine.SendPushRequest.apple)
}
inline void SendPushRequest::set_apple(int index, std::string&& value) {
  _impl_.apple_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:engine.SendPushRequest.apple)
}
inline void SendPushRequest::set_apple(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.apple_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:engine.SendPushRequest.apple)
}
inline void SendPushRequest::set_apple(int index, const char* value, size_t size) {
  _impl_.apple_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:engine.SendPushRequest.apple)
}
inline std::string* SendPushRequest::_internal_add_apple() {
  return _impl_.apple_.Add();
}
inline void SendPushRequest::add_apple(const std::string& value) {
  _impl_.apple_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:engine.SendPushRequest.apple)
}
inline void SendPushRequest::add_apple(std::string&& value) {
  _impl_.apple_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:engine.SendPushRequest.apple)
}
inline void SendPushRequest::add_apple(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.apple_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:engine.SendPushRequest.apple)
}
inline void SendPushRequest::add_apple(const char* value, size_t size) {
  _impl_.apple_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:engine.SendPushRequest.apple)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SendPushRequest::apple() const {
  // @@protoc_insertion_point(field_list:engine.SendPushRequest.apple)
  return _impl_.apple_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SendPushRequest::mutable_apple() {
  // @@protoc_insertion_point(field_mutable_list:engine.SendPushRequest.apple)
  return &_impl_.apple_;
}

// int64 expiration = 3;
inline void SendPushRequest::clear_expiration() {
  _impl_.expiration_ = int64_t{0};
}
inline int64_t SendPushRequest::_internal_expiration() const {
  return _impl_.expiration_;
}
inline int64_t SendPushRequest::expiration() const {
  // @@protoc_insertion_point(field_get:engine.SendPushRequest.expiration)
  return _internal_expiration();
}
inline void SendPushRequest::_internal_set_expiration(int64_t value) {
  
  _impl_.expiration_ = value;
}
inline void SendPushRequest::set_expiration(int64_t value) {
  _internal_set_expiration(value);
  // @@protoc_insertion_point(field_set:engine.SendPushRequest.expiration)
}

// int32 priority = 4;
inline void SendPushRequest::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t SendPushRequest::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t SendPushRequest::priority() const {
  // @@protoc_insertion_point(field_get:engine.SendPushRequest.priority)
  return _internal_priority();
}
inline void SendPushRequest::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void SendPushRequest::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:engine.SendPushRequest.priority)
}

// map<string, string> data = 5;
inline int SendPushRequest::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int SendPushRequest::data_size() const {
  return _internal_data_size();
}
inline void SendPushRequest::clear_data() {
  _impl_.data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SendPushRequest::_internal_data() const {
  return _impl_.data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SendPushRequest::data() const {
  // @@protoc_insertion_point(field_map:engine.SendPushRequest.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SendPushRequest::_internal_mutable_data() {
  return _impl_.data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SendPushRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:engine.SendPushRequest.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// SendPushResponse

// int32 send = 1;
inline void SendPushResponse::clear_send() {
  _impl_.send_ = 0;
}
inline int32_t SendPushResponse::_internal_send() const {
  return _impl_.send_;
}
inline int32_t SendPushResponse::send() const {
  // @@protoc_insertion_point(field_get:engine.SendPushResponse.send)
  return _internal_send();
}
inline void SendPushResponse::_internal_set_send(int32_t value) {
  
  _impl_.send_ = value;
}
inline void SendPushResponse::set_send(int32_t value) {
  _internal_set_send(value);
  // @@protoc_insertion_point(field_set:engine.SendPushResponse.send)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace engine

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_push_2eproto
