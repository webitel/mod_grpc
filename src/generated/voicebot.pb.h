// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: voicebot.proto
// Protobuf C++ Version: 5.29.0

#ifndef voicebot_2eproto_2epb_2eh
#define voicebot_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_voicebot_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_voicebot_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_voicebot_2eproto;
namespace voicebot {
class AudioRequest;
struct AudioRequestDefaultTypeInternal;
extern AudioRequestDefaultTypeInternal _AudioRequest_default_instance_;
class AudioResponse;
struct AudioResponseDefaultTypeInternal;
extern AudioResponseDefaultTypeInternal _AudioResponse_default_instance_;
class TextResponse;
struct TextResponseDefaultTypeInternal;
extern TextResponseDefaultTypeInternal _TextResponse_default_instance_;
}  // namespace voicebot
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace voicebot {

// ===================================================================


// -------------------------------------------------------------------

class TextResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:voicebot.TextResponse) */ {
 public:
  inline TextResponse() : TextResponse(nullptr) {}
  ~TextResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TextResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TextResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TextResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline TextResponse(const TextResponse& from) : TextResponse(nullptr, from) {}
  inline TextResponse(TextResponse&& from) noexcept
      : TextResponse(nullptr, std::move(from)) {}
  inline TextResponse& operator=(const TextResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextResponse& operator=(TextResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextResponse* internal_default_instance() {
    return reinterpret_cast<const TextResponse*>(
        &_TextResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(TextResponse& a, TextResponse& b) { a.Swap(&b); }
  inline void Swap(TextResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TextResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TextResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TextResponse& from) { TextResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TextResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "voicebot.TextResponse"; }

 protected:
  explicit TextResponse(::google::protobuf::Arena* arena);
  TextResponse(::google::protobuf::Arena* arena, const TextResponse& from);
  TextResponse(::google::protobuf::Arena* arena, TextResponse&& from) noexcept
      : TextResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConversationIdFieldNumber = 1,
    kTextFieldNumber = 2,
  };
  // string conversation_id = 1;
  void clear_conversation_id() ;
  const std::string& conversation_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conversation_id(Arg_&& arg, Args_... args);
  std::string* mutable_conversation_id();
  PROTOBUF_NODISCARD std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* value);

  private:
  const std::string& _internal_conversation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(
      const std::string& value);
  std::string* _internal_mutable_conversation_id();

  public:
  // string text = 2;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* value);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // @@protoc_insertion_point(class_scope:voicebot.TextResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TextResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr conversation_id_;
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_voicebot_2eproto;
};
// -------------------------------------------------------------------

class AudioResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:voicebot.AudioResponse) */ {
 public:
  inline AudioResponse() : AudioResponse(nullptr) {}
  ~AudioResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AudioResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AudioResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline AudioResponse(const AudioResponse& from) : AudioResponse(nullptr, from) {}
  inline AudioResponse(AudioResponse&& from) noexcept
      : AudioResponse(nullptr, std::move(from)) {}
  inline AudioResponse& operator=(const AudioResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioResponse& operator=(AudioResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioResponse* internal_default_instance() {
    return reinterpret_cast<const AudioResponse*>(
        &_AudioResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AudioResponse& a, AudioResponse& b) { a.Swap(&b); }
  inline void Swap(AudioResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AudioResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AudioResponse& from) { AudioResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AudioResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "voicebot.AudioResponse"; }

 protected:
  explicit AudioResponse(::google::protobuf::Arena* arena);
  AudioResponse(::google::protobuf::Arena* arena, const AudioResponse& from);
  AudioResponse(::google::protobuf::Arena* arena, AudioResponse&& from) noexcept
      : AudioResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConversationIdFieldNumber = 1,
    kAudioDataFieldNumber = 2,
  };
  // string conversation_id = 1;
  void clear_conversation_id() ;
  const std::string& conversation_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conversation_id(Arg_&& arg, Args_... args);
  std::string* mutable_conversation_id();
  PROTOBUF_NODISCARD std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* value);

  private:
  const std::string& _internal_conversation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(
      const std::string& value);
  std::string* _internal_mutable_conversation_id();

  public:
  // bytes audio_data = 2;
  void clear_audio_data() ;
  const std::string& audio_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio_data(Arg_&& arg, Args_... args);
  std::string* mutable_audio_data();
  PROTOBUF_NODISCARD std::string* release_audio_data();
  void set_allocated_audio_data(std::string* value);

  private:
  const std::string& _internal_audio_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_data(
      const std::string& value);
  std::string* _internal_mutable_audio_data();

  public:
  // @@protoc_insertion_point(class_scope:voicebot.AudioResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      46, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AudioResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr conversation_id_;
    ::google::protobuf::internal::ArenaStringPtr audio_data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_voicebot_2eproto;
};
// -------------------------------------------------------------------

class AudioRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:voicebot.AudioRequest) */ {
 public:
  inline AudioRequest() : AudioRequest(nullptr) {}
  ~AudioRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AudioRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AudioRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AudioRequest(const AudioRequest& from) : AudioRequest(nullptr, from) {}
  inline AudioRequest(AudioRequest&& from) noexcept
      : AudioRequest(nullptr, std::move(from)) {}
  inline AudioRequest& operator=(const AudioRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioRequest& operator=(AudioRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioRequest* internal_default_instance() {
    return reinterpret_cast<const AudioRequest*>(
        &_AudioRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AudioRequest& a, AudioRequest& b) { a.Swap(&b); }
  inline void Swap(AudioRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AudioRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AudioRequest& from) { AudioRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AudioRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "voicebot.AudioRequest"; }

 protected:
  explicit AudioRequest(::google::protobuf::Arena* arena);
  AudioRequest(::google::protobuf::Arena* arena, const AudioRequest& from);
  AudioRequest(::google::protobuf::Arena* arena, AudioRequest&& from) noexcept
      : AudioRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConversationIdFieldNumber = 1,
    kAudioDataFieldNumber = 2,
  };
  // string conversation_id = 1;
  void clear_conversation_id() ;
  const std::string& conversation_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conversation_id(Arg_&& arg, Args_... args);
  std::string* mutable_conversation_id();
  PROTOBUF_NODISCARD std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* value);

  private:
  const std::string& _internal_conversation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conversation_id(
      const std::string& value);
  std::string* _internal_mutable_conversation_id();

  public:
  // bytes audio_data = 2;
  void clear_audio_data() ;
  const std::string& audio_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio_data(Arg_&& arg, Args_... args);
  std::string* mutable_audio_data();
  PROTOBUF_NODISCARD std::string* release_audio_data();
  void set_allocated_audio_data(std::string* value);

  private:
  const std::string& _internal_audio_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_data(
      const std::string& value);
  std::string* _internal_mutable_audio_data();

  public:
  // @@protoc_insertion_point(class_scope:voicebot.AudioRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AudioRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr conversation_id_;
    ::google::protobuf::internal::ArenaStringPtr audio_data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_voicebot_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AudioRequest

// string conversation_id = 1;
inline void AudioRequest::clear_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.ClearToEmpty();
}
inline const std::string& AudioRequest::conversation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:voicebot.AudioRequest.conversation_id)
  return _internal_conversation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AudioRequest::set_conversation_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:voicebot.AudioRequest.conversation_id)
}
inline std::string* AudioRequest::mutable_conversation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:voicebot.AudioRequest.conversation_id)
  return _s;
}
inline const std::string& AudioRequest::_internal_conversation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conversation_id_.Get();
}
inline void AudioRequest::_internal_set_conversation_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(value, GetArena());
}
inline std::string* AudioRequest::_internal_mutable_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.conversation_id_.Mutable( GetArena());
}
inline std::string* AudioRequest::release_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:voicebot.AudioRequest.conversation_id)
  return _impl_.conversation_id_.Release();
}
inline void AudioRequest::set_allocated_conversation_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:voicebot.AudioRequest.conversation_id)
}

// bytes audio_data = 2;
inline void AudioRequest::clear_audio_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_data_.ClearToEmpty();
}
inline const std::string& AudioRequest::audio_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:voicebot.AudioRequest.audio_data)
  return _internal_audio_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AudioRequest::set_audio_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:voicebot.AudioRequest.audio_data)
}
inline std::string* AudioRequest::mutable_audio_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audio_data();
  // @@protoc_insertion_point(field_mutable:voicebot.AudioRequest.audio_data)
  return _s;
}
inline const std::string& AudioRequest::_internal_audio_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.audio_data_.Get();
}
inline void AudioRequest::_internal_set_audio_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_data_.Set(value, GetArena());
}
inline std::string* AudioRequest::_internal_mutable_audio_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.audio_data_.Mutable( GetArena());
}
inline std::string* AudioRequest::release_audio_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:voicebot.AudioRequest.audio_data)
  return _impl_.audio_data_.Release();
}
inline void AudioRequest::set_allocated_audio_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.audio_data_.IsDefault()) {
    _impl_.audio_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:voicebot.AudioRequest.audio_data)
}

// -------------------------------------------------------------------

// AudioResponse

// string conversation_id = 1;
inline void AudioResponse::clear_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.ClearToEmpty();
}
inline const std::string& AudioResponse::conversation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:voicebot.AudioResponse.conversation_id)
  return _internal_conversation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AudioResponse::set_conversation_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:voicebot.AudioResponse.conversation_id)
}
inline std::string* AudioResponse::mutable_conversation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:voicebot.AudioResponse.conversation_id)
  return _s;
}
inline const std::string& AudioResponse::_internal_conversation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conversation_id_.Get();
}
inline void AudioResponse::_internal_set_conversation_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(value, GetArena());
}
inline std::string* AudioResponse::_internal_mutable_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.conversation_id_.Mutable( GetArena());
}
inline std::string* AudioResponse::release_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:voicebot.AudioResponse.conversation_id)
  return _impl_.conversation_id_.Release();
}
inline void AudioResponse::set_allocated_conversation_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:voicebot.AudioResponse.conversation_id)
}

// bytes audio_data = 2;
inline void AudioResponse::clear_audio_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_data_.ClearToEmpty();
}
inline const std::string& AudioResponse::audio_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:voicebot.AudioResponse.audio_data)
  return _internal_audio_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AudioResponse::set_audio_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:voicebot.AudioResponse.audio_data)
}
inline std::string* AudioResponse::mutable_audio_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audio_data();
  // @@protoc_insertion_point(field_mutable:voicebot.AudioResponse.audio_data)
  return _s;
}
inline const std::string& AudioResponse::_internal_audio_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.audio_data_.Get();
}
inline void AudioResponse::_internal_set_audio_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_data_.Set(value, GetArena());
}
inline std::string* AudioResponse::_internal_mutable_audio_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.audio_data_.Mutable( GetArena());
}
inline std::string* AudioResponse::release_audio_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:voicebot.AudioResponse.audio_data)
  return _impl_.audio_data_.Release();
}
inline void AudioResponse::set_allocated_audio_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.audio_data_.IsDefault()) {
    _impl_.audio_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:voicebot.AudioResponse.audio_data)
}

// -------------------------------------------------------------------

// TextResponse

// string conversation_id = 1;
inline void TextResponse::clear_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.ClearToEmpty();
}
inline const std::string& TextResponse::conversation_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:voicebot.TextResponse.conversation_id)
  return _internal_conversation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TextResponse::set_conversation_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:voicebot.TextResponse.conversation_id)
}
inline std::string* TextResponse::mutable_conversation_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_conversation_id();
  // @@protoc_insertion_point(field_mutable:voicebot.TextResponse.conversation_id)
  return _s;
}
inline const std::string& TextResponse::_internal_conversation_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conversation_id_.Get();
}
inline void TextResponse::_internal_set_conversation_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.Set(value, GetArena());
}
inline std::string* TextResponse::_internal_mutable_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.conversation_id_.Mutable( GetArena());
}
inline std::string* TextResponse::release_conversation_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:voicebot.TextResponse.conversation_id)
  return _impl_.conversation_id_.Release();
}
inline void TextResponse::set_allocated_conversation_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conversation_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.conversation_id_.IsDefault()) {
    _impl_.conversation_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:voicebot.TextResponse.conversation_id)
}

// string text = 2;
inline void TextResponse::clear_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.ClearToEmpty();
}
inline const std::string& TextResponse::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:voicebot.TextResponse.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TextResponse::set_text(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:voicebot.TextResponse.text)
}
inline std::string* TextResponse::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:voicebot.TextResponse.text)
  return _s;
}
inline const std::string& TextResponse::_internal_text() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.text_.Get();
}
inline void TextResponse::_internal_set_text(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.Set(value, GetArena());
}
inline std::string* TextResponse::_internal_mutable_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.text_.Mutable( GetArena());
}
inline std::string* TextResponse::release_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:voicebot.TextResponse.text)
  return _impl_.text_.Release();
}
inline void TextResponse::set_allocated_text(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:voicebot.TextResponse.text)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace voicebot


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // voicebot_2eproto_2epb_2eh
